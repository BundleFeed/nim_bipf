/* Generated by the Nim Compiler v1.6.10 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI704643133 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654311461 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654311441 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI654311615 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654311466 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654311448 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI654311456 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554460 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI654311454 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI654311493 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI654311492 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI654311491 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654311460 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI654311483 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654311452 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI654311442 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI654311471 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654311449 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI654311475 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654311450 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI654311479 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654311451 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI654311487 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654311453 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI654311455 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555142 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI486539539 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555129 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1224736773 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI33554437 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI33554459 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI33555188 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1090519121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1090519113 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1224736772 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1224736774 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1224736771 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI620756995 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI620757004 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI620757005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI620757005 = {kind: 1, offset: "useStderr", len: 0, typ: NTI33554466, name: "useStderr", sons: null};
NTI620757005.node = NNI620757005;
var NNI620756995 = {kind: 2, offset: 0, typ: null, name: null, len: 8, sons: {"0": {kind: 1, offset: 0, typ: NTI620756995, name: "lvlAll", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI620756995, name: "lvlDebug", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI620756995, name: "lvlInfo", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI620756995, name: "lvlNotice", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI620756995, name: "lvlWarn", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI620756995, name: "lvlError", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI620756995, name: "lvlFatal", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI620756995, name: "lvlNone", len: 0, sons: null}}};
NTI620756995.node = NNI620756995;
var NNI620757004 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "levelThreshold", len: 0, typ: NTI620756995, name: "levelThreshold", sons: null}, 
{kind: 1, offset: "fmtStr", len: 0, typ: NTI33554439, name: "fmtStr", sons: null}]};
NTI620757004.node = NNI620757004;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI620757004.base = NTI33555083;
NTI620757005.base = NTI620757004;
var NNI1224736771 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1224736771.node = NNI1224736771;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
NTI33555112.base = NTI33555083;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;
NTI1224736771.base = NTI33555125;
var NNI1224736772 = {kind: 2, offset: 0, typ: null, name: null, len: 8, sons: {"0": {kind: 1, offset: 0, typ: NTI1224736772, name: "STRING", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1224736772, name: "BUFFER", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1224736772, name: "INT", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1224736772, name: "DOUBLE", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1224736772, name: "ARRAY", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1224736772, name: "OBJECT", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1224736772, name: "BOOLNULL", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI1224736772, name: "EXTENDED", len: 0, sons: null}}};
NTI1224736772.node = NNI1224736772;
var NNI1090519121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1090519121.node = NNI1090519121;
var NNI33555188 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555188.node = NNI33555188;
NTI33555188.base = NTI33555083;
NTI1090519121.base = NTI33555188;
NTI1090519113.base = NTI1090519121;
var NNI1224736773 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI1224736773, name: "TRUE", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1224736773, name: "FALSE", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1224736773, name: "NULL", len: 0, sons: null}}};
NTI1224736773.node = NNI1224736773;
var NNI1224736774 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "encodedSize", len: 0, typ: NTI33554456, name: "encodedSize", sons: null}, 
{kind: 3, offset: "tag", len: 8, typ: NTI1224736772, name: "tag", sons: [[setConstr(0), {kind: 1, offset: "str", len: 0, typ: NTI33554440, name: "str", sons: null}], 
[setConstr(1), {kind: 1, offset: "buf", len: 0, typ: NTI1090519113, name: "buf", sons: null}], 
[setConstr(2), {kind: 1, offset: "i", len: 0, typ: NTI33554459, name: "i", sons: null}], 
[setConstr(3), {kind: 1, offset: "d", len: 0, typ: NTI33554437, name: "d", sons: null}], 
[setConstr(6), {kind: 1, offset: "b", len: 0, typ: NTI1224736773, name: "b", sons: null}], 
[setConstr(7), {kind: 1, offset: "ext", len: 0, typ: NTI1090519113, name: "ext", sons: null}], 
[setConstr(8), {kind: 1, offset: "size", len: 0, typ: NTI33554456, name: "size", sons: null}]]}]};
NTI1224736774.node = NNI1224736774;
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555129 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555129.node = NNI33555129;
NTI33555129.base = NTI33555113;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;
NTI486539539.base = NTI1090519113;
var NNI33555142 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555142.node = NNI33555142;
NTI33555142.base = NTI33555113;
NTI654311453.base = NTI654311487;
NTI654311451.base = NTI654311479;
NTI654311450.base = NTI654311475;
NTI654311449.base = NTI654311471;
var NNI654311442 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI654311442, name: "Monday", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI654311442, name: "Tuesday", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI654311442, name: "Wednesday", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI654311442, name: "Thursday", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI654311442, name: "Friday", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI654311442, name: "Saturday", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI654311442, name: "Sunday", len: 0, sons: null}}};
NTI654311442.node = NNI654311442;
NTI654311452.base = NTI654311483;
var NNI654311491 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "zonedTimeFromTimeImpl", len: 0, typ: NTI654311492, name: "zonedTimeFromTimeImpl", sons: null}, 
{kind: 1, offset: "zonedTimeFromAdjTimeImpl", len: 0, typ: NTI654311493, name: "zonedTimeFromAdjTimeImpl", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554439, name: "name", sons: null}]};
NTI654311491.node = NNI654311491;
NTI654311460.base = NTI654311491;
var NNI654311455 = {kind: 2, len: 12, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "nanosecond", len: 0, typ: NTI654311453, name: "nanosecond", sons: null}, 
{kind: 1, offset: "second", len: 0, typ: NTI654311451, name: "second", sons: null}, 
{kind: 1, offset: "minute", len: 0, typ: NTI654311450, name: "minute", sons: null}, 
{kind: 1, offset: "hour", len: 0, typ: NTI654311449, name: "hour", sons: null}, 
{kind: 1, offset: "monthdayZero", len: 0, typ: NTI33554456, name: "monthdayZero", sons: null}, 
{kind: 1, offset: "monthZero", len: 0, typ: NTI33554456, name: "monthZero", sons: null}, 
{kind: 1, offset: "year", len: 0, typ: NTI33554456, name: "year", sons: null}, 
{kind: 1, offset: "weekday", len: 0, typ: NTI654311442, name: "weekday", sons: null}, 
{kind: 1, offset: "yearday", len: 0, typ: NTI654311452, name: "yearday", sons: null}, 
{kind: 1, offset: "isDst", len: 0, typ: NTI33554466, name: "isDst", sons: null}, 
{kind: 1, offset: "timezone", len: 0, typ: NTI654311460, name: "timezone", sons: null}, 
{kind: 1, offset: "utcOffset", len: 0, typ: NTI33554456, name: "utcOffset", sons: null}]};
NTI654311455.node = NNI654311455;
NTI654311455.base = NTI33555083;
var NNI33555121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555121.node = NNI33555121;
NTI33555121.base = NTI33555120;
var NNI654311454 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI33554460, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI654311453, name: "nanosecond", sons: null}]};
NTI654311454.node = NNI654311454;
var NNI654311456 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI33554460, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI654311453, name: "nanosecond", sons: null}]};
NTI654311456.node = NNI654311456;
NTI654311448.base = NTI654311466;
var NNI654311441 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI654311441, name: "January", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI654311441, name: "February", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI654311441, name: "March", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI654311441, name: "April", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI654311441, name: "May", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI654311441, name: "June", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI654311441, name: "July", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI654311441, name: "August", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI654311441, name: "September", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI654311441, name: "October", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI654311441, name: "November", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI654311441, name: "December", len: 0, sons: null}}};
NTI654311441.node = NNI654311441;
var NNI654311615 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI654311448, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI654311441, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554456, name: "Field2", sons: null}]};
NTI654311615.node = NNI654311615;
var NNI654311461 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "time", len: 0, typ: NTI654311454, name: "time", sons: null}, 
{kind: 1, offset: "utcOffset", len: 0, typ: NTI33554456, name: "utcOffset", sons: null}, 
{kind: 1, offset: "isDst", len: 0, typ: NTI33554466, name: "isDst", sons: null}]};
NTI654311461.node = NNI654311461;
var NNI704643133 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554456, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI704643133.node = NNI704643133;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    throw e_33556667;

  
}

function genericReset(x_33557171, ti_33557172) {
  var result_33557173 = null;

    result_33557173 = null;
    switch (ti_33557172.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (isFatPointer_33557131(ti_33557172)) {
              result_33557173 = [null, 0];
      
      }
      
      break;
    case 19:
            result_33557173 = {};
    
      break;
    case 18:
    case 17:
      if ((ti_33557172.kind == 17)) {
      result_33557173 = {m_type: ti_33557172};
      }
      else {
        result_33557173 = {};
      }
      
      break;
    case 24:
    case 27:
    case 28:
            result_33557173 = [];
    
      break;
    case 4:
    case 16:
            result_33557173 = new Array(x_33557171.length);
      for (var i = 0; i < x_33557171.length; ++i) {
        result_33557173[i] = genericReset(x_33557171[i], ti_33557172.base);
      }
    
      break;
    default: 
      break;
    }

  return result_33557173;

}

function subInt(a_33556944, b_33556945) {
        var result = a_33556944 - b_33556945;
    checkOverflowInt(result);
    return result;
  

  
}

function addInt(a_33556940, b_33556941) {
        var result = a_33556940 + b_33556941;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet2 = setConstr(0, 1, 2, 3, 6, 7);

function raiseFieldError2(f_33556778, discVal_33556779) {
    raiseException({message: (f_33556778 || []).concat(discVal_33556779 || [],makeNimstrLit("\'") || []), parent: null, m_type: NTI33555129, name: null, trace: [], up: null}, "FieldDefect");

  
}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}

function nimBoolToStr(x_33556514) {
  var result_33556515 = [];

    if (x_33556514) {
    result_33556515 = nimCopy(null, makeNimstrLit("true"), NTI33554439);
    }
    else {
      result_33556515 = nimCopy(null, makeNimstrLit("false"), NTI33554439);
    }
    

  return result_33556515;

}

function reprDiscriminant(e_33557409, typ_33557410) {
    var Temporary1;

  var result_33557411 = [];

    switch (typ_33557410.kind) {
    case 14:
      Temporary1 = reprEnum(e_33557409, typ_33557410);
      break;
    case 1:
      Temporary1 = nimBoolToStr(!((e_33557409 == 0)));
      break;
    default: 
      Temporary1 = HEX24_335544323(e_33557409);
      break;
    }
    result_33557411 = nimCopy(null, Temporary1, NTI33554439);

  return result_33557411;

}
var ConstSet3 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet4 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet5 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet6 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet7 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet8 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet9 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet10 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet11 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet12 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet13 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet14 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet15 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet16 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet17 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet18 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet19 = setConstr(0, 1, 2, 3, 6, 7);
var ConstSet20 = setConstr(2);
var ConstSet21 = setConstr(3);
var ConstSet22 = setConstr(6);
var ConstSet23 = setConstr(0);
var ConstSet24 = setConstr(7);
var ConstSet25 = setConstr(7);
var ConstSet26 = setConstr(7);
var ConstSet27 = setConstr(1);
var ConstSet28 = setConstr(1);
var ConstSet29 = setConstr(1);

function cstrToNimstr(c_33556804) {
      var ln = c_33556804.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556804.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556804.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function isObj(obj_33557238, subclass_33557239) {
  var result_33557240 = false;

  BeforeRet: do {
    var x_33557241 = obj_33557238;
    if ((x_33557241 == subclass_33557239)) {
    result_33557240 = true;
    break BeforeRet;
    }
    
    Label1: do {
        Label2: while (true) {
        if (!!((x_33557241 == subclass_33557239))) break Label2;
          if ((x_33557241 == null)) {
          result_33557240 = false;
          break BeforeRet;
          }
          
          x_33557241 = x_33557241.base;
        }
    } while (false);
    result_33557240 = true;
    break BeforeRet;
  } while (false);

  return result_33557240;

}

function addChar(x_33557255, c_33557256) {
    x_33557255.push(c_33557256);

  
}
var ConstSet30 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet31 = setConstr([65, 90]);

function absInt(a_33556988) {
    var Temporary1;

  var result_33556989 = 0;

    if ((a_33556988 < 0)) {
    Temporary1 = (a_33556988 * -1);
    }
    else {
    Temporary1 = a_33556988;
    }
    
    result_33556989 = Temporary1;

  return result_33556989;

}

function divInt(a_33556952, b_33556953) {
        if (b_33556953 == 0) raiseDivByZero();
    if (b_33556953 == -1 && a_33556952 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556952 / b_33556953);
  

  
}
    var unitWeights_654311570 = [1, 1000, 1000000, 1000000000, 60000000000, 3600000000000, 86400000000000, 604800000000000];

function modInt(a_33556956, b_33556957) {
        if (b_33556957 == 0) raiseDivByZero();
    if (b_33556957 == -1 && a_33556956 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556956 % b_33556957);
  

  
}
    var daysUntilMonthLeap_654311692 = new Int32Array([0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335]);
      var daysUntilMonth_654311691 = new Int32Array([0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]);
              var LevelNames_620757007 = [makeNimstrLit("DEBUG"), makeNimstrLit("DEBUG"), makeNimstrLit("INFO"), makeNimstrLit("NOTICE"), makeNimstrLit("WARN"), makeNimstrLit("ERROR"), makeNimstrLit("FATAL"), makeNimstrLit("NONE")];
if (globalThis.utcInstance_654312842 === undefined) {
  globalThis.utcInstance_654312842 = [null];
}
if (globalThis.localInstance_654312843 === undefined) {
  globalThis.localInstance_654312843 = [null];
}
if (globalThis.level_620757017 === undefined) {
  globalThis.level_620757017 = [0];
}
if (globalThis.handlers_620757018 === undefined) {
  globalThis.handlers_620757018 = [[]];
}
var objectID_1124073634 = [0];

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function newConsoleLogger_620757102(levelThreshold_620757103, fmtStr_620757104, useStderr_620757105) {
  var result_620757106 = null;

    result_620757106 = ({m_type: NTI620757005, useStderr: false, levelThreshold: 0, fmtStr: []});
    result_620757106.fmtStr = nimCopy(null, fmtStr_620757104, NTI33554439);
    result_620757106.levelThreshold = levelThreshold_620757103;
    result_620757106.useStderr = useStderr_620757105;

  return result_620757106;

}

function addHandler_620757181(handler_620757182) {
    handlers_620757018[0].push(handler_620757182);;

  
}
var consoleLog_486539268 = [newConsoleLogger_620757102(0, makeNimstrLit("$levelname "), false)];
addHandler_620757181(consoleLog_486539268[0]);
var lastObjectVisited_486539734 = [null];
var lastBufferProduced_486539735 = [null];

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556938) {
        if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
  

  
}

function HEX5BHEX5D_1224736920(s_1224736922, i_1224736923) {
  var result_1224736924 = null;
  var result_1224736924_Idx = 0;

    result_1224736924 = s_1224736922; result_1224736924_Idx = subInt((s_1224736922).length, i_1224736923);

  return [result_1224736924, result_1224736924_Idx];

}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = addInt(old_251658421, n_251658420));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_486540060 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540060 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_486540060;
            result_251658417[result_251658417_Idx][addInt(old_251658421, iHEX60gensym4_251658435)] = x_251658418.charCodeAt(addInt(start_251658419, iHEX60gensym4_251658435));
            i_486540060 = addInt(i_486540060, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function reprEnum(e_33557385, typ_33557386) {
  var result_33557387 = [];

    var tmp_33557388 = false;
    var item_33557389 = typ_33557386.node.sons[e_33557385];
    tmp_33557388 = item_33557389 !== undefined
    if (tmp_33557388) {
    result_33557387 = nimCopy(null, makeNimstrLit(item_33557389.name), NTI33554439);
    }
    else {
      result_33557387 = nimCopy(null, (HEX24_335544323(e_33557385) || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI33554439);
    }
    

  return result_33557387;

}

function startArray_1224737103(b_1224737104, b_1224737104_Idx) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;

    var vHEX60gensym19_1224737116 = {tag: 4, size: 0, encodedSize: 0, str: null, buf: null, i: 0, d: 0.0, b: 0, ext: null};
    if (((b_1224737104[b_1224737104_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737104[b_1224737104_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    b_1224737104[b_1224737104_Idx].pointers.push((b_1224737104[b_1224737104_Idx].stack).length);;
    Temporary1 = vHEX60gensym19_1224737116;
    vHEX60gensym19_1224737116 = genericReset(vHEX60gensym19_1224737116, NTI1224736774);
    b_1224737104[b_1224737104_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym19_1224737150 = (Temporary2 = HEX5BHEX5D_1224736920(b_1224737104[b_1224737104_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224737104[b_1224737104_Idx].stack[pHEX60gensym19_1224737150].tag == 4)) {
      var Temporary3 = b_1224737104[b_1224737104_Idx].stack[pHEX60gensym19_1224737150];
      if (ConstSet2[Temporary3.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736772)); }
      Temporary3.size = addInt(Temporary3.size, 1);
      var addedHEX60gensym19_1224737159 = vHEX60gensym19_1224737116.encodedSize;
      b_1224737104[b_1224737104_Idx].pointers.push((b_1224737104[b_1224737104_Idx].stack).length);;
      b_1224737104[b_1224737104_Idx].stack[pHEX60gensym19_1224737150].encodedSize = addInt(b_1224737104[b_1224737104_Idx].stack[pHEX60gensym19_1224737150].encodedSize, addedHEX60gensym19_1224737159);
      Temporary4 = vHEX60gensym19_1224737116;
      vHEX60gensym19_1224737116 = genericReset(vHEX60gensym19_1224737116, NTI1224736774);
      b_1224737104[b_1224737104_Idx].stack.push(Temporary4);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function startArray_1224737187(b_1224737188, b_1224737188_Idx, key_1224737189) {
      var Temporary1;
      var Temporary2;
        var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;

    if (((b_1224737188[b_1224737188_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym27_1224737202 = (Temporary1 = HEX5BHEX5D_1224736920(b_1224737188[b_1224737188_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_1224737188[b_1224737188_Idx].stack[pHEX60gensym27_1224737202].tag == 5)) {
      var Temporary2 = b_1224737188[b_1224737188_Idx].stack[pHEX60gensym27_1224737202];
      if (ConstSet3[Temporary2.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736772)); }
      Temporary2.size = addInt(Temporary2.size, 1);
      var kHEX60gensym27_1224737211 = {tag: 0, str: key_1224737189, encodedSize: Buffer.byteLength(key_1224737189), buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym27_1224737220 = {tag: 4, size: 0, encodedSize: 0, str: null, buf: null, i: 0, d: 0.0, b: 0, ext: null};
        if (!(0 <= kHEX60gensym27_1224737211.encodedSize)) Temporary3 = false; else {          Temporary3 = (kHEX60gensym27_1224737211.encodedSize <= 2147483647);        }      if (!(Temporary3)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `k`gensym27.encodedSize >= 0 and k`gensym27.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym33_1224737235 = (kHEX60gensym27_1224737211.encodedSize << 3);
      if ((uHEX60gensym33_1224737235 < 128)) {
      Temporary4 = 1;
      }
      else {
      if ((uHEX60gensym33_1224737235 < 16384)) {
      Temporary4 = 2;
      }
      else {
      if ((uHEX60gensym33_1224737235 < 2097152)) {
      Temporary4 = 3;
      }
      else {
      if ((uHEX60gensym33_1224737235 < 268435456)) {
      Temporary4 = 4;
      }
      else {
      Temporary4 = 5;
      }
      }}}
      var addedHEX60gensym27_1224737236 = addInt(addInt(kHEX60gensym27_1224737211.encodedSize, vHEX60gensym27_1224737220.encodedSize), Temporary4);
      Temporary5 = kHEX60gensym27_1224737211;
      kHEX60gensym27_1224737211 = genericReset(kHEX60gensym27_1224737211, NTI1224736774);
      b_1224737188[b_1224737188_Idx].stack.push(Temporary5);;
      b_1224737188[b_1224737188_Idx].pointers.push((b_1224737188[b_1224737188_Idx].stack).length);;
      b_1224737188[b_1224737188_Idx].stack[pHEX60gensym27_1224737202].encodedSize = addInt(b_1224737188[b_1224737188_Idx].stack[pHEX60gensym27_1224737202].encodedSize, addedHEX60gensym27_1224737236);
      Temporary6 = vHEX60gensym27_1224737220;
      vHEX60gensym27_1224737220 = genericReset(vHEX60gensym27_1224737220, NTI1224736774);
      b_1224737188[b_1224737188_Idx].stack.push(Temporary6);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function toNativeString_486539272(s_486539273) {
  var result_486539274 = null;

    result_486539274 = s_486539273;

  return result_486539274;

}

function pop_1224738380(s_1224738382, s_1224738382_Idx) {
  var result_1224738383 = 0;

    var L_1224738387 = subInt((s_1224738382[s_1224738382_Idx]).length, 1);
    result_1224738383 = s_1224738382[s_1224738382_Idx][L_1224738387];
    if (s_1224738382[s_1224738382_Idx].length < L_1224738387) { for (var i = s_1224738382[s_1224738382_Idx].length ; i < L_1224738387 ; ++i) s_1224738382[s_1224738382_Idx].push(0); }
               else { s_1224738382[s_1224738382_Idx].length = L_1224738387; };

  return result_1224738383;

}

function endArray_1224738367(b_1224738368, b_1224738368_Idx) {
      var Temporary1;
        var Temporary2;
      var Temporary3;

    if (((b_1224738368[b_1224738368_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot end ARRAY before starting it"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym227_1224738392 = pop_1224738380(b_1224738368[b_1224738368_Idx], "pointers");
      if (!((b_1224738368[b_1224738368_Idx].stack[pHEX60gensym227_1224738392].tag == 4))) {
      raiseException({message: makeNimstrLit("Cannot end ARRAY before starting it"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
      if ((0 < (b_1224738368[b_1224738368_Idx].pointers).length)) {
      var parentPHEX60gensym227_1224738408 = (Temporary1 = HEX5BHEX5D_1224736920(b_1224738368[b_1224738368_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      var pEncodedSizeHEX60gensym227_1224738409 = b_1224738368[b_1224738368_Idx].stack[pHEX60gensym227_1224738392].encodedSize;
        if (!(0 <= pEncodedSizeHEX60gensym227_1224738409)) Temporary2 = false; else {          Temporary2 = (pEncodedSizeHEX60gensym227_1224738409 <= 2147483647);        }      if (!(Temporary2)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `pEncodedSize`gensym227 >= 0 and pEncodedSize`gensym227 <= high(int32)` "));
      }
      
      var uHEX60gensym234_1224738424 = (pEncodedSizeHEX60gensym227_1224738409 << 3);
      if ((uHEX60gensym234_1224738424 < 128)) {
      Temporary3 = 1;
      }
      else {
      if ((uHEX60gensym234_1224738424 < 16384)) {
      Temporary3 = 2;
      }
      else {
      if ((uHEX60gensym234_1224738424 < 2097152)) {
      Temporary3 = 3;
      }
      else {
      if ((uHEX60gensym234_1224738424 < 268435456)) {
      Temporary3 = 4;
      }
      else {
      Temporary3 = 5;
      }
      }}}
      b_1224738368[b_1224738368_Idx].stack[parentPHEX60gensym227_1224738408].encodedSize = addInt(b_1224738368[b_1224738368_Idx].stack[parentPHEX60gensym227_1224738408].encodedSize, addInt(pEncodedSizeHEX60gensym227_1224738409, Temporary3));
      }
      
    }
    

  
}

function startMap_1224736850(b_1224736851, b_1224736851_Idx) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;

    var vHEX60gensym0_1224736864 = {tag: 5, size: 0, encodedSize: 0, str: null, buf: null, i: 0, d: 0.0, b: 0, ext: null};
    if (((b_1224736851[b_1224736851_Idx].pointers).length == 0)) {
    if ((0 < (b_1224736851[b_1224736851_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    b_1224736851[b_1224736851_Idx].pointers.push((b_1224736851[b_1224736851_Idx].stack).length);;
    Temporary1 = vHEX60gensym0_1224736864;
    vHEX60gensym0_1224736864 = genericReset(vHEX60gensym0_1224736864, NTI1224736774);
    b_1224736851[b_1224736851_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym0_1224736937 = (Temporary2 = HEX5BHEX5D_1224736920(b_1224736851[b_1224736851_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224736851[b_1224736851_Idx].stack[pHEX60gensym0_1224736937].tag == 4)) {
      var Temporary3 = b_1224736851[b_1224736851_Idx].stack[pHEX60gensym0_1224736937];
      if (ConstSet4[Temporary3.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736772)); }
      Temporary3.size = addInt(Temporary3.size, 1);
      var addedHEX60gensym0_1224736946 = vHEX60gensym0_1224736864.encodedSize;
      b_1224736851[b_1224736851_Idx].pointers.push((b_1224736851[b_1224736851_Idx].stack).length);;
      b_1224736851[b_1224736851_Idx].stack[pHEX60gensym0_1224736937].encodedSize = addInt(b_1224736851[b_1224736851_Idx].stack[pHEX60gensym0_1224736937].encodedSize, addedHEX60gensym0_1224736946);
      Temporary4 = vHEX60gensym0_1224736864;
      vHEX60gensym0_1224736864 = genericReset(vHEX60gensym0_1224736864, NTI1224736774);
      b_1224736851[b_1224736851_Idx].stack.push(Temporary4);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function startMap_1224737010(b_1224737011, b_1224737011_Idx, key_1224737012) {
      var Temporary1;
      var Temporary2;
        var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;

    if (((b_1224737011[b_1224737011_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym8_1224737025 = (Temporary1 = HEX5BHEX5D_1224736920(b_1224737011[b_1224737011_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_1224737011[b_1224737011_Idx].stack[pHEX60gensym8_1224737025].tag == 5)) {
      var Temporary2 = b_1224737011[b_1224737011_Idx].stack[pHEX60gensym8_1224737025];
      if (ConstSet5[Temporary2.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736772)); }
      Temporary2.size = addInt(Temporary2.size, 1);
      var kHEX60gensym8_1224737034 = {tag: 0, str: key_1224737012, encodedSize: Buffer.byteLength(key_1224737012), buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym8_1224737043 = {tag: 5, size: 0, encodedSize: 0, str: null, buf: null, i: 0, d: 0.0, b: 0, ext: null};
        if (!(0 <= kHEX60gensym8_1224737034.encodedSize)) Temporary3 = false; else {          Temporary3 = (kHEX60gensym8_1224737034.encodedSize <= 2147483647);        }      if (!(Temporary3)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `k`gensym8.encodedSize >= 0 and k`gensym8.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym14_1224737058 = (kHEX60gensym8_1224737034.encodedSize << 3);
      if ((uHEX60gensym14_1224737058 < 128)) {
      Temporary4 = 1;
      }
      else {
      if ((uHEX60gensym14_1224737058 < 16384)) {
      Temporary4 = 2;
      }
      else {
      if ((uHEX60gensym14_1224737058 < 2097152)) {
      Temporary4 = 3;
      }
      else {
      if ((uHEX60gensym14_1224737058 < 268435456)) {
      Temporary4 = 4;
      }
      else {
      Temporary4 = 5;
      }
      }}}
      var addedHEX60gensym8_1224737059 = addInt(addInt(kHEX60gensym8_1224737034.encodedSize, vHEX60gensym8_1224737043.encodedSize), Temporary4);
      Temporary5 = kHEX60gensym8_1224737034;
      kHEX60gensym8_1224737034 = genericReset(kHEX60gensym8_1224737034, NTI1224736774);
      b_1224737011[b_1224737011_Idx].stack.push(Temporary5);;
      b_1224737011[b_1224737011_Idx].pointers.push((b_1224737011[b_1224737011_Idx].stack).length);;
      b_1224737011[b_1224737011_Idx].stack[pHEX60gensym8_1224737025].encodedSize = addInt(b_1224737011[b_1224737011_Idx].stack[pHEX60gensym8_1224737025].encodedSize, addedHEX60gensym8_1224737059);
      Temporary6 = vHEX60gensym8_1224737043;
      vHEX60gensym8_1224737043 = genericReset(vHEX60gensym8_1224737043, NTI1224736774);
      b_1224737011[b_1224737011_Idx].stack.push(Temporary6);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function endMap_1224738429(b_1224738430, b_1224738430_Idx) {
      var Temporary1;
        var Temporary2;
      var Temporary3;

    if (((b_1224738430[b_1224738430_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot end OBJECT before starting it"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym238_1224738445 = pop_1224738380(b_1224738430[b_1224738430_Idx], "pointers");
      if (!((b_1224738430[b_1224738430_Idx].stack[pHEX60gensym238_1224738445].tag == 5))) {
      raiseException({message: makeNimstrLit("Cannot end OBJECT before starting it"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
      if ((0 < (b_1224738430[b_1224738430_Idx].pointers).length)) {
      var parentPHEX60gensym238_1224738461 = (Temporary1 = HEX5BHEX5D_1224736920(b_1224738430[b_1224738430_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      var pEncodedSizeHEX60gensym238_1224738462 = b_1224738430[b_1224738430_Idx].stack[pHEX60gensym238_1224738445].encodedSize;
        if (!(0 <= pEncodedSizeHEX60gensym238_1224738462)) Temporary2 = false; else {          Temporary2 = (pEncodedSizeHEX60gensym238_1224738462 <= 2147483647);        }      if (!(Temporary2)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `pEncodedSize`gensym238 >= 0 and pEncodedSize`gensym238 <= high(int32)` "));
      }
      
      var uHEX60gensym245_1224738477 = (pEncodedSizeHEX60gensym238_1224738462 << 3);
      if ((uHEX60gensym245_1224738477 < 128)) {
      Temporary3 = 1;
      }
      else {
      if ((uHEX60gensym245_1224738477 < 16384)) {
      Temporary3 = 2;
      }
      else {
      if ((uHEX60gensym245_1224738477 < 2097152)) {
      Temporary3 = 3;
      }
      else {
      if ((uHEX60gensym245_1224738477 < 268435456)) {
      Temporary3 = 4;
      }
      else {
      Temporary3 = 5;
      }
      }}}
      b_1224738430[b_1224738430_Idx].stack[parentPHEX60gensym238_1224738461].encodedSize = addInt(b_1224738430[b_1224738430_Idx].stack[parentPHEX60gensym238_1224738461].encodedSize, addInt(pEncodedSizeHEX60gensym238_1224738462, Temporary3));
      }
      
    }
    

  
}

function addNull_1224737651(b_1224737652, b_1224737652_Idx) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
        var Temporary4;
      var Temporary5;
      var Temporary6;

    var vHEX60gensym98_1224737660 = {tag: 6, b: 2, encodedSize: 0, str: null, buf: null, i: 0, d: 0.0, ext: null, size: 0};
    if (((b_1224737652[b_1224737652_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737652[b_1224737652_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary1 = vHEX60gensym98_1224737660;
    vHEX60gensym98_1224737660 = genericReset(vHEX60gensym98_1224737660, NTI1224736774);
    b_1224737652[b_1224737652_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym98_1224737679 = (Temporary2 = HEX5BHEX5D_1224736920(b_1224737652[b_1224737652_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224737652[b_1224737652_Idx].stack[pHEX60gensym98_1224737679].tag == 4)) {
      var Temporary3 = b_1224737652[b_1224737652_Idx].stack[pHEX60gensym98_1224737679];
      if (ConstSet6[Temporary3.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736772)); }
      Temporary3.size = addInt(Temporary3.size, 1);
      var addedHEX60gensym98_1224737688 = vHEX60gensym98_1224737660.encodedSize;
        if (!(0 <= vHEX60gensym98_1224737660.encodedSize)) Temporary4 = false; else {          Temporary4 = (vHEX60gensym98_1224737660.encodedSize <= 2147483647);        }      if (!(Temporary4)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `v`gensym98.encodedSize >= 0 and v`gensym98.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym105_1224737703 = (vHEX60gensym98_1224737660.encodedSize << 3);
      if ((uHEX60gensym105_1224737703 < 128)) {
      Temporary5 = 1;
      }
      else {
      if ((uHEX60gensym105_1224737703 < 16384)) {
      Temporary5 = 2;
      }
      else {
      if ((uHEX60gensym105_1224737703 < 2097152)) {
      Temporary5 = 3;
      }
      else {
      if ((uHEX60gensym105_1224737703 < 268435456)) {
      Temporary5 = 4;
      }
      else {
      Temporary5 = 5;
      }
      }}}
      addedHEX60gensym98_1224737688 = addInt(addedHEX60gensym98_1224737688, Temporary5);
      b_1224737652[b_1224737652_Idx].stack[pHEX60gensym98_1224737679].encodedSize = addInt(b_1224737652[b_1224737652_Idx].stack[pHEX60gensym98_1224737679].encodedSize, addedHEX60gensym98_1224737688);
      Temporary6 = vHEX60gensym98_1224737660;
      vHEX60gensym98_1224737660 = genericReset(vHEX60gensym98_1224737660, NTI1224736774);
      b_1224737652[b_1224737652_Idx].stack.push(Temporary6);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addNull_1224738195(b_1224738196, b_1224738196_Idx, k_1224738197) {
      var Temporary1;
      var Temporary2;
        var Temporary3;
      var Temporary4;
      var Temporary5;
        var Temporary6;
      var Temporary7;
      var Temporary8;

    if (((b_1224738196[b_1224738196_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym197_1224738210 = (Temporary1 = HEX5BHEX5D_1224736920(b_1224738196[b_1224738196_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_1224738196[b_1224738196_Idx].stack[pHEX60gensym197_1224738210].tag == 5)) {
      var Temporary2 = b_1224738196[b_1224738196_Idx].stack[pHEX60gensym197_1224738210];
      if (ConstSet7[Temporary2.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736772)); }
      Temporary2.size = addInt(Temporary2.size, 1);
      var kHEX60gensym197_1224738219 = {tag: 0, str: k_1224738197, encodedSize: Buffer.byteLength(k_1224738197), buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym197_1224738224 = {tag: 6, b: 2, encodedSize: 0, str: null, buf: null, i: 0, d: 0.0, ext: null, size: 0};
        if (!(0 <= kHEX60gensym197_1224738219.encodedSize)) Temporary3 = false; else {          Temporary3 = (kHEX60gensym197_1224738219.encodedSize <= 2147483647);        }      if (!(Temporary3)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `k`gensym197.encodedSize >= 0 and k`gensym197.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym203_1224738239 = (kHEX60gensym197_1224738219.encodedSize << 3);
      if ((uHEX60gensym203_1224738239 < 128)) {
      Temporary4 = 1;
      }
      else {
      if ((uHEX60gensym203_1224738239 < 16384)) {
      Temporary4 = 2;
      }
      else {
      if ((uHEX60gensym203_1224738239 < 2097152)) {
      Temporary4 = 3;
      }
      else {
      if ((uHEX60gensym203_1224738239 < 268435456)) {
      Temporary4 = 4;
      }
      else {
      Temporary4 = 5;
      }
      }}}
      var addedHEX60gensym197_1224738240 = addInt(addInt(kHEX60gensym197_1224738219.encodedSize, vHEX60gensym197_1224738224.encodedSize), Temporary4);
      Temporary5 = kHEX60gensym197_1224738219;
      kHEX60gensym197_1224738219 = genericReset(kHEX60gensym197_1224738219, NTI1224736774);
      b_1224738196[b_1224738196_Idx].stack.push(Temporary5);;
        if (!(0 <= vHEX60gensym197_1224738224.encodedSize)) Temporary6 = false; else {          Temporary6 = (vHEX60gensym197_1224738224.encodedSize <= 2147483647);        }      if (!(Temporary6)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `v`gensym197.encodedSize >= 0 and v`gensym197.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym207_1224738262 = (vHEX60gensym197_1224738224.encodedSize << 3);
      if ((uHEX60gensym207_1224738262 < 128)) {
      Temporary7 = 1;
      }
      else {
      if ((uHEX60gensym207_1224738262 < 16384)) {
      Temporary7 = 2;
      }
      else {
      if ((uHEX60gensym207_1224738262 < 2097152)) {
      Temporary7 = 3;
      }
      else {
      if ((uHEX60gensym207_1224738262 < 268435456)) {
      Temporary7 = 4;
      }
      else {
      Temporary7 = 5;
      }
      }}}
      addedHEX60gensym197_1224738240 = addInt(addedHEX60gensym197_1224738240, Temporary7);
      b_1224738196[b_1224738196_Idx].stack[pHEX60gensym197_1224738210].encodedSize = addInt(b_1224738196[b_1224738196_Idx].stack[pHEX60gensym197_1224738210].encodedSize, addedHEX60gensym197_1224738240);
      Temporary8 = vHEX60gensym197_1224738224;
      vHEX60gensym197_1224738224 = genericReset(vHEX60gensym197_1224738224, NTI1224736774);
      b_1224738196[b_1224738196_Idx].stack.push(Temporary8);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addString_1224737421(b_1224737422, b_1224737422_Idx, s_1224737423) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
        var Temporary4;
      var Temporary5;
      var Temporary6;

    var vHEX60gensym62_1224737427 = {tag: 0, str: s_1224737423, encodedSize: Buffer.byteLength(s_1224737423), buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
    if (((b_1224737422[b_1224737422_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737422[b_1224737422_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary1 = vHEX60gensym62_1224737427;
    vHEX60gensym62_1224737427 = genericReset(vHEX60gensym62_1224737427, NTI1224736774);
    b_1224737422[b_1224737422_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym62_1224737446 = (Temporary2 = HEX5BHEX5D_1224736920(b_1224737422[b_1224737422_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224737422[b_1224737422_Idx].stack[pHEX60gensym62_1224737446].tag == 4)) {
      var Temporary3 = b_1224737422[b_1224737422_Idx].stack[pHEX60gensym62_1224737446];
      if (ConstSet8[Temporary3.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736772)); }
      Temporary3.size = addInt(Temporary3.size, 1);
      var addedHEX60gensym62_1224737455 = vHEX60gensym62_1224737427.encodedSize;
        if (!(0 <= vHEX60gensym62_1224737427.encodedSize)) Temporary4 = false; else {          Temporary4 = (vHEX60gensym62_1224737427.encodedSize <= 2147483647);        }      if (!(Temporary4)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `v`gensym62.encodedSize >= 0 and v`gensym62.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym69_1224737470 = (vHEX60gensym62_1224737427.encodedSize << 3);
      if ((uHEX60gensym69_1224737470 < 128)) {
      Temporary5 = 1;
      }
      else {
      if ((uHEX60gensym69_1224737470 < 16384)) {
      Temporary5 = 2;
      }
      else {
      if ((uHEX60gensym69_1224737470 < 2097152)) {
      Temporary5 = 3;
      }
      else {
      if ((uHEX60gensym69_1224737470 < 268435456)) {
      Temporary5 = 4;
      }
      else {
      Temporary5 = 5;
      }
      }}}
      addedHEX60gensym62_1224737455 = addInt(addedHEX60gensym62_1224737455, Temporary5);
      b_1224737422[b_1224737422_Idx].stack[pHEX60gensym62_1224737446].encodedSize = addInt(b_1224737422[b_1224737422_Idx].stack[pHEX60gensym62_1224737446].encodedSize, addedHEX60gensym62_1224737455);
      Temporary6 = vHEX60gensym62_1224737427;
      vHEX60gensym62_1224737427 = genericReset(vHEX60gensym62_1224737427, NTI1224736774);
      b_1224737422[b_1224737422_Idx].stack.push(Temporary6);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addString_1224737948(b_1224737949, b_1224737949_Idx, k_1224737950, s_1224737951) {
      var Temporary1;
      var Temporary2;
        var Temporary3;
      var Temporary4;
      var Temporary5;
        var Temporary6;
      var Temporary7;
      var Temporary8;

    if (((b_1224737949[b_1224737949_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym152_1224737964 = (Temporary1 = HEX5BHEX5D_1224736920(b_1224737949[b_1224737949_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_1224737949[b_1224737949_Idx].stack[pHEX60gensym152_1224737964].tag == 5)) {
      var Temporary2 = b_1224737949[b_1224737949_Idx].stack[pHEX60gensym152_1224737964];
      if (ConstSet9[Temporary2.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736772)); }
      Temporary2.size = addInt(Temporary2.size, 1);
      var kHEX60gensym152_1224737973 = {tag: 0, str: k_1224737950, encodedSize: Buffer.byteLength(k_1224737950), buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym152_1224737974 = {tag: 0, str: s_1224737951, encodedSize: Buffer.byteLength(s_1224737951), buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
        if (!(0 <= kHEX60gensym152_1224737973.encodedSize)) Temporary3 = false; else {          Temporary3 = (kHEX60gensym152_1224737973.encodedSize <= 2147483647);        }      if (!(Temporary3)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `k`gensym152.encodedSize >= 0 and k`gensym152.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym158_1224737989 = (kHEX60gensym152_1224737973.encodedSize << 3);
      if ((uHEX60gensym158_1224737989 < 128)) {
      Temporary4 = 1;
      }
      else {
      if ((uHEX60gensym158_1224737989 < 16384)) {
      Temporary4 = 2;
      }
      else {
      if ((uHEX60gensym158_1224737989 < 2097152)) {
      Temporary4 = 3;
      }
      else {
      if ((uHEX60gensym158_1224737989 < 268435456)) {
      Temporary4 = 4;
      }
      else {
      Temporary4 = 5;
      }
      }}}
      var addedHEX60gensym152_1224737990 = addInt(addInt(kHEX60gensym152_1224737973.encodedSize, vHEX60gensym152_1224737974.encodedSize), Temporary4);
      Temporary5 = kHEX60gensym152_1224737973;
      kHEX60gensym152_1224737973 = genericReset(kHEX60gensym152_1224737973, NTI1224736774);
      b_1224737949[b_1224737949_Idx].stack.push(Temporary5);;
        if (!(0 <= vHEX60gensym152_1224737974.encodedSize)) Temporary6 = false; else {          Temporary6 = (vHEX60gensym152_1224737974.encodedSize <= 2147483647);        }      if (!(Temporary6)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `v`gensym152.encodedSize >= 0 and v`gensym152.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym162_1224738012 = (vHEX60gensym152_1224737974.encodedSize << 3);
      if ((uHEX60gensym162_1224738012 < 128)) {
      Temporary7 = 1;
      }
      else {
      if ((uHEX60gensym162_1224738012 < 16384)) {
      Temporary7 = 2;
      }
      else {
      if ((uHEX60gensym162_1224738012 < 2097152)) {
      Temporary7 = 3;
      }
      else {
      if ((uHEX60gensym162_1224738012 < 268435456)) {
      Temporary7 = 4;
      }
      else {
      Temporary7 = 5;
      }
      }}}
      addedHEX60gensym152_1224737990 = addInt(addedHEX60gensym152_1224737990, Temporary7);
      b_1224737949[b_1224737949_Idx].stack[pHEX60gensym152_1224737964].encodedSize = addInt(b_1224737949[b_1224737949_Idx].stack[pHEX60gensym152_1224737964].encodedSize, addedHEX60gensym152_1224737990);
      Temporary8 = vHEX60gensym152_1224737974;
      vHEX60gensym152_1224737974 = genericReset(vHEX60gensym152_1224737974, NTI1224736774);
      b_1224737949[b_1224737949_Idx].stack.push(Temporary8);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addInt_1224737271(b_1224737272, b_1224737272_Idx, i_1224737273) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
        var Temporary4;
      var Temporary5;
      var Temporary6;

    var vHEX60gensym38_1224737277 = {tag: 2, i: i_1224737273, encodedSize: 4, str: null, buf: null, d: 0.0, b: 0, ext: null, size: 0};
    if (((b_1224737272[b_1224737272_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737272[b_1224737272_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary1 = vHEX60gensym38_1224737277;
    vHEX60gensym38_1224737277 = genericReset(vHEX60gensym38_1224737277, NTI1224736774);
    b_1224737272[b_1224737272_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym38_1224737296 = (Temporary2 = HEX5BHEX5D_1224736920(b_1224737272[b_1224737272_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224737272[b_1224737272_Idx].stack[pHEX60gensym38_1224737296].tag == 4)) {
      var Temporary3 = b_1224737272[b_1224737272_Idx].stack[pHEX60gensym38_1224737296];
      if (ConstSet10[Temporary3.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736772)); }
      Temporary3.size = addInt(Temporary3.size, 1);
      var addedHEX60gensym38_1224737305 = vHEX60gensym38_1224737277.encodedSize;
        if (!(0 <= vHEX60gensym38_1224737277.encodedSize)) Temporary4 = false; else {          Temporary4 = (vHEX60gensym38_1224737277.encodedSize <= 2147483647);        }      if (!(Temporary4)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `v`gensym38.encodedSize >= 0 and v`gensym38.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym45_1224737320 = (vHEX60gensym38_1224737277.encodedSize << 3);
      if ((uHEX60gensym45_1224737320 < 128)) {
      Temporary5 = 1;
      }
      else {
      if ((uHEX60gensym45_1224737320 < 16384)) {
      Temporary5 = 2;
      }
      else {
      if ((uHEX60gensym45_1224737320 < 2097152)) {
      Temporary5 = 3;
      }
      else {
      if ((uHEX60gensym45_1224737320 < 268435456)) {
      Temporary5 = 4;
      }
      else {
      Temporary5 = 5;
      }
      }}}
      addedHEX60gensym38_1224737305 = addInt(addedHEX60gensym38_1224737305, Temporary5);
      b_1224737272[b_1224737272_Idx].stack[pHEX60gensym38_1224737296].encodedSize = addInt(b_1224737272[b_1224737272_Idx].stack[pHEX60gensym38_1224737296].encodedSize, addedHEX60gensym38_1224737305);
      Temporary6 = vHEX60gensym38_1224737277;
      vHEX60gensym38_1224737277 = genericReset(vHEX60gensym38_1224737277, NTI1224736774);
      b_1224737272[b_1224737272_Idx].stack.push(Temporary6);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function toInt32_486539291(s_486539292) {
      var Temporary1;

  var result_486539293 = 0;

    if (!((typeof(s_486539292) == "number"))) {
    failedAssertImpl_218103864(makeNimstrLit("nim_bipf_purejs.nim(49, 10) `jsTypeOf(s) == \"number\"` "));
    }
    
    result_486539293 = s_486539292;
      if (!(-2147483648 <= result_486539293)) Temporary1 = false; else {        Temporary1 = (result_486539293 <= 2147483647);      }    if (!(Temporary1)) {
    failedAssertImpl_218103864(makeNimstrLit("nim_bipf_purejs.nim(51, 10) `result >= low(int32) and result <= high(int32)` "));
    }
    

  return result_486539293;

}

function addInt_1224737786(b_1224737787, b_1224737787_Idx, k_1224737788, i_1224737789) {
      var Temporary1;
      var Temporary2;
        var Temporary3;
      var Temporary4;
      var Temporary5;
        var Temporary6;
      var Temporary7;
      var Temporary8;

    if (((b_1224737787[b_1224737787_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym122_1224737802 = (Temporary1 = HEX5BHEX5D_1224736920(b_1224737787[b_1224737787_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_1224737787[b_1224737787_Idx].stack[pHEX60gensym122_1224737802].tag == 5)) {
      var Temporary2 = b_1224737787[b_1224737787_Idx].stack[pHEX60gensym122_1224737802];
      if (ConstSet11[Temporary2.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736772)); }
      Temporary2.size = addInt(Temporary2.size, 1);
      var kHEX60gensym122_1224737811 = {tag: 0, str: k_1224737788, encodedSize: Buffer.byteLength(k_1224737788), buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym122_1224737812 = {tag: 2, i: i_1224737789, encodedSize: 4, str: null, buf: null, d: 0.0, b: 0, ext: null, size: 0};
        if (!(0 <= kHEX60gensym122_1224737811.encodedSize)) Temporary3 = false; else {          Temporary3 = (kHEX60gensym122_1224737811.encodedSize <= 2147483647);        }      if (!(Temporary3)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `k`gensym122.encodedSize >= 0 and k`gensym122.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym128_1224737827 = (kHEX60gensym122_1224737811.encodedSize << 3);
      if ((uHEX60gensym128_1224737827 < 128)) {
      Temporary4 = 1;
      }
      else {
      if ((uHEX60gensym128_1224737827 < 16384)) {
      Temporary4 = 2;
      }
      else {
      if ((uHEX60gensym128_1224737827 < 2097152)) {
      Temporary4 = 3;
      }
      else {
      if ((uHEX60gensym128_1224737827 < 268435456)) {
      Temporary4 = 4;
      }
      else {
      Temporary4 = 5;
      }
      }}}
      var addedHEX60gensym122_1224737828 = addInt(addInt(kHEX60gensym122_1224737811.encodedSize, vHEX60gensym122_1224737812.encodedSize), Temporary4);
      Temporary5 = kHEX60gensym122_1224737811;
      kHEX60gensym122_1224737811 = genericReset(kHEX60gensym122_1224737811, NTI1224736774);
      b_1224737787[b_1224737787_Idx].stack.push(Temporary5);;
        if (!(0 <= vHEX60gensym122_1224737812.encodedSize)) Temporary6 = false; else {          Temporary6 = (vHEX60gensym122_1224737812.encodedSize <= 2147483647);        }      if (!(Temporary6)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `v`gensym122.encodedSize >= 0 and v`gensym122.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym132_1224737850 = (vHEX60gensym122_1224737812.encodedSize << 3);
      if ((uHEX60gensym132_1224737850 < 128)) {
      Temporary7 = 1;
      }
      else {
      if ((uHEX60gensym132_1224737850 < 16384)) {
      Temporary7 = 2;
      }
      else {
      if ((uHEX60gensym132_1224737850 < 2097152)) {
      Temporary7 = 3;
      }
      else {
      if ((uHEX60gensym132_1224737850 < 268435456)) {
      Temporary7 = 4;
      }
      else {
      Temporary7 = 5;
      }
      }}}
      addedHEX60gensym122_1224737828 = addInt(addedHEX60gensym122_1224737828, Temporary7);
      b_1224737787[b_1224737787_Idx].stack[pHEX60gensym122_1224737802].encodedSize = addInt(b_1224737787[b_1224737787_Idx].stack[pHEX60gensym122_1224737802].encodedSize, addedHEX60gensym122_1224737828);
      Temporary8 = vHEX60gensym122_1224737812;
      vHEX60gensym122_1224737812 = genericReset(vHEX60gensym122_1224737812, NTI1224736774);
      b_1224737787[b_1224737787_Idx].stack.push(Temporary8);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addDouble_1224737346(b_1224737347, b_1224737347_Idx, d_1224737348) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
        var Temporary4;
      var Temporary5;
      var Temporary6;

    var vHEX60gensym50_1224737352 = {tag: 3, d: d_1224737348, encodedSize: 8, str: null, buf: null, i: 0, b: 0, ext: null, size: 0};
    if (((b_1224737347[b_1224737347_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737347[b_1224737347_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary1 = vHEX60gensym50_1224737352;
    vHEX60gensym50_1224737352 = genericReset(vHEX60gensym50_1224737352, NTI1224736774);
    b_1224737347[b_1224737347_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym50_1224737371 = (Temporary2 = HEX5BHEX5D_1224736920(b_1224737347[b_1224737347_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224737347[b_1224737347_Idx].stack[pHEX60gensym50_1224737371].tag == 4)) {
      var Temporary3 = b_1224737347[b_1224737347_Idx].stack[pHEX60gensym50_1224737371];
      if (ConstSet12[Temporary3.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736772)); }
      Temporary3.size = addInt(Temporary3.size, 1);
      var addedHEX60gensym50_1224737380 = vHEX60gensym50_1224737352.encodedSize;
        if (!(0 <= vHEX60gensym50_1224737352.encodedSize)) Temporary4 = false; else {          Temporary4 = (vHEX60gensym50_1224737352.encodedSize <= 2147483647);        }      if (!(Temporary4)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `v`gensym50.encodedSize >= 0 and v`gensym50.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym57_1224737395 = (vHEX60gensym50_1224737352.encodedSize << 3);
      if ((uHEX60gensym57_1224737395 < 128)) {
      Temporary5 = 1;
      }
      else {
      if ((uHEX60gensym57_1224737395 < 16384)) {
      Temporary5 = 2;
      }
      else {
      if ((uHEX60gensym57_1224737395 < 2097152)) {
      Temporary5 = 3;
      }
      else {
      if ((uHEX60gensym57_1224737395 < 268435456)) {
      Temporary5 = 4;
      }
      else {
      Temporary5 = 5;
      }
      }}}
      addedHEX60gensym50_1224737380 = addInt(addedHEX60gensym50_1224737380, Temporary5);
      b_1224737347[b_1224737347_Idx].stack[pHEX60gensym50_1224737371].encodedSize = addInt(b_1224737347[b_1224737347_Idx].stack[pHEX60gensym50_1224737371].encodedSize, addedHEX60gensym50_1224737380);
      Temporary6 = vHEX60gensym50_1224737352;
      vHEX60gensym50_1224737352 = genericReset(vHEX60gensym50_1224737352, NTI1224736774);
      b_1224737347[b_1224737347_Idx].stack.push(Temporary6);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function toFloat64_486539312(s_486539313) {
  var result_486539314 = 0.0;

    if (!((typeof(s_486539313) == "number"))) {
    failedAssertImpl_218103864(makeNimstrLit("nim_bipf_purejs.nim(54, 10) `jsTypeOf(s) == \"number\"` "));
    }
    
    result_486539314 = s_486539313;

  return result_486539314;

}

function addDouble_1224737867(b_1224737868, b_1224737868_Idx, k_1224737869, d_1224737870) {
      var Temporary1;
      var Temporary2;
        var Temporary3;
      var Temporary4;
      var Temporary5;
        var Temporary6;
      var Temporary7;
      var Temporary8;

    if (((b_1224737868[b_1224737868_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym137_1224737883 = (Temporary1 = HEX5BHEX5D_1224736920(b_1224737868[b_1224737868_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_1224737868[b_1224737868_Idx].stack[pHEX60gensym137_1224737883].tag == 5)) {
      var Temporary2 = b_1224737868[b_1224737868_Idx].stack[pHEX60gensym137_1224737883];
      if (ConstSet13[Temporary2.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736772)); }
      Temporary2.size = addInt(Temporary2.size, 1);
      var kHEX60gensym137_1224737892 = {tag: 0, str: k_1224737869, encodedSize: Buffer.byteLength(k_1224737869), buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym137_1224737893 = {tag: 3, d: d_1224737870, encodedSize: 8, str: null, buf: null, i: 0, b: 0, ext: null, size: 0};
        if (!(0 <= kHEX60gensym137_1224737892.encodedSize)) Temporary3 = false; else {          Temporary3 = (kHEX60gensym137_1224737892.encodedSize <= 2147483647);        }      if (!(Temporary3)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `k`gensym137.encodedSize >= 0 and k`gensym137.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym143_1224737908 = (kHEX60gensym137_1224737892.encodedSize << 3);
      if ((uHEX60gensym143_1224737908 < 128)) {
      Temporary4 = 1;
      }
      else {
      if ((uHEX60gensym143_1224737908 < 16384)) {
      Temporary4 = 2;
      }
      else {
      if ((uHEX60gensym143_1224737908 < 2097152)) {
      Temporary4 = 3;
      }
      else {
      if ((uHEX60gensym143_1224737908 < 268435456)) {
      Temporary4 = 4;
      }
      else {
      Temporary4 = 5;
      }
      }}}
      var addedHEX60gensym137_1224737909 = addInt(addInt(kHEX60gensym137_1224737892.encodedSize, vHEX60gensym137_1224737893.encodedSize), Temporary4);
      Temporary5 = kHEX60gensym137_1224737892;
      kHEX60gensym137_1224737892 = genericReset(kHEX60gensym137_1224737892, NTI1224736774);
      b_1224737868[b_1224737868_Idx].stack.push(Temporary5);;
        if (!(0 <= vHEX60gensym137_1224737893.encodedSize)) Temporary6 = false; else {          Temporary6 = (vHEX60gensym137_1224737893.encodedSize <= 2147483647);        }      if (!(Temporary6)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `v`gensym137.encodedSize >= 0 and v`gensym137.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym147_1224737931 = (vHEX60gensym137_1224737893.encodedSize << 3);
      if ((uHEX60gensym147_1224737931 < 128)) {
      Temporary7 = 1;
      }
      else {
      if ((uHEX60gensym147_1224737931 < 16384)) {
      Temporary7 = 2;
      }
      else {
      if ((uHEX60gensym147_1224737931 < 2097152)) {
      Temporary7 = 3;
      }
      else {
      if ((uHEX60gensym147_1224737931 < 268435456)) {
      Temporary7 = 4;
      }
      else {
      Temporary7 = 5;
      }
      }}}
      addedHEX60gensym137_1224737909 = addInt(addedHEX60gensym137_1224737909, Temporary7);
      b_1224737868[b_1224737868_Idx].stack[pHEX60gensym137_1224737883].encodedSize = addInt(b_1224737868[b_1224737868_Idx].stack[pHEX60gensym137_1224737883].encodedSize, addedHEX60gensym137_1224737909);
      Temporary8 = vHEX60gensym137_1224737893;
      vHEX60gensym137_1224737893 = genericReset(vHEX60gensym137_1224737893, NTI1224736774);
      b_1224737868[b_1224737868_Idx].stack.push(Temporary8);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addBool_1224737562(b_1224737563, b_1224737563_Idx, v_1224737564) {
    var Temporary1;
    var Temporary2;
      var Temporary3;
    var Temporary4;
      var Temporary5;
      var Temporary6;
        var Temporary7;
      var Temporary8;
      var Temporary9;

    if (v_1224737564) {
    Temporary1 = 0;
    }
    else {
    Temporary1 = 1;
    }
    
      if (v_1224737564) {
      Temporary3 = 0;
      }
      else {
      Temporary3 = 1;
      }
      
    if ((Temporary3 == 2)) {
    Temporary2 = 0;
    }
    else {
    Temporary2 = 1;
    }
    
    var vHEX60gensym86_1224737573 = {tag: 6, b: Temporary1, encodedSize: Temporary2, str: null, buf: null, i: 0, d: 0.0, ext: null, size: 0};
    if (((b_1224737563[b_1224737563_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737563[b_1224737563_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary4 = vHEX60gensym86_1224737573;
    vHEX60gensym86_1224737573 = genericReset(vHEX60gensym86_1224737573, NTI1224736774);
    b_1224737563[b_1224737563_Idx].stack.push(Temporary4);;
    }
    else {
      var pHEX60gensym86_1224737592 = (Temporary5 = HEX5BHEX5D_1224736920(b_1224737563[b_1224737563_Idx].pointers, 1), Temporary5)[0][Temporary5[1]];
      if ((b_1224737563[b_1224737563_Idx].stack[pHEX60gensym86_1224737592].tag == 4)) {
      var Temporary6 = b_1224737563[b_1224737563_Idx].stack[pHEX60gensym86_1224737592];
      if (ConstSet14[Temporary6.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary6.tag, NTI1224736772)); }
      Temporary6.size = addInt(Temporary6.size, 1);
      var addedHEX60gensym86_1224737601 = vHEX60gensym86_1224737573.encodedSize;
        if (!(0 <= vHEX60gensym86_1224737573.encodedSize)) Temporary7 = false; else {          Temporary7 = (vHEX60gensym86_1224737573.encodedSize <= 2147483647);        }      if (!(Temporary7)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `v`gensym86.encodedSize >= 0 and v`gensym86.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym93_1224737616 = (vHEX60gensym86_1224737573.encodedSize << 3);
      if ((uHEX60gensym93_1224737616 < 128)) {
      Temporary8 = 1;
      }
      else {
      if ((uHEX60gensym93_1224737616 < 16384)) {
      Temporary8 = 2;
      }
      else {
      if ((uHEX60gensym93_1224737616 < 2097152)) {
      Temporary8 = 3;
      }
      else {
      if ((uHEX60gensym93_1224737616 < 268435456)) {
      Temporary8 = 4;
      }
      else {
      Temporary8 = 5;
      }
      }}}
      addedHEX60gensym86_1224737601 = addInt(addedHEX60gensym86_1224737601, Temporary8);
      b_1224737563[b_1224737563_Idx].stack[pHEX60gensym86_1224737592].encodedSize = addInt(b_1224737563[b_1224737563_Idx].stack[pHEX60gensym86_1224737592].encodedSize, addedHEX60gensym86_1224737601);
      Temporary9 = vHEX60gensym86_1224737573;
      vHEX60gensym86_1224737573 = genericReset(vHEX60gensym86_1224737573, NTI1224736774);
      b_1224737563[b_1224737563_Idx].stack.push(Temporary9);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function toBool_486539320(s_486539321) {
  var result_486539322 = false;

    if (!((typeof(s_486539321) == "boolean"))) {
    failedAssertImpl_218103864(makeNimstrLit("nim_bipf_purejs.nim(58, 10) `jsTypeOf(s) == \"boolean\"` "));
    }
    
    result_486539322 = s_486539321;

  return result_486539322;

}

function addBool_1224738110(b_1224738111, b_1224738111_Idx, k_1224738112, v_1224738113) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
        var Temporary5;
        var Temporary6;
      var Temporary7;
      var Temporary8;
        var Temporary9;
      var Temporary10;
      var Temporary11;

    if (((b_1224738111[b_1224738111_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym182_1224738126 = (Temporary1 = HEX5BHEX5D_1224736920(b_1224738111[b_1224738111_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_1224738111[b_1224738111_Idx].stack[pHEX60gensym182_1224738126].tag == 5)) {
      var Temporary2 = b_1224738111[b_1224738111_Idx].stack[pHEX60gensym182_1224738126];
      if (ConstSet15[Temporary2.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736772)); }
      Temporary2.size = addInt(Temporary2.size, 1);
      var kHEX60gensym182_1224738135 = {tag: 0, str: k_1224738112, encodedSize: Buffer.byteLength(k_1224738112), buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      if (v_1224738113) {
      Temporary3 = 0;
      }
      else {
      Temporary3 = 1;
      }
      
        if (v_1224738113) {
        Temporary5 = 0;
        }
        else {
        Temporary5 = 1;
        }
        
      if ((Temporary5 == 2)) {
      Temporary4 = 0;
      }
      else {
      Temporary4 = 1;
      }
      
      var vHEX60gensym182_1224738140 = {tag: 6, b: Temporary3, encodedSize: Temporary4, str: null, buf: null, i: 0, d: 0.0, ext: null, size: 0};
        if (!(0 <= kHEX60gensym182_1224738135.encodedSize)) Temporary6 = false; else {          Temporary6 = (kHEX60gensym182_1224738135.encodedSize <= 2147483647);        }      if (!(Temporary6)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `k`gensym182.encodedSize >= 0 and k`gensym182.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym188_1224738155 = (kHEX60gensym182_1224738135.encodedSize << 3);
      if ((uHEX60gensym188_1224738155 < 128)) {
      Temporary7 = 1;
      }
      else {
      if ((uHEX60gensym188_1224738155 < 16384)) {
      Temporary7 = 2;
      }
      else {
      if ((uHEX60gensym188_1224738155 < 2097152)) {
      Temporary7 = 3;
      }
      else {
      if ((uHEX60gensym188_1224738155 < 268435456)) {
      Temporary7 = 4;
      }
      else {
      Temporary7 = 5;
      }
      }}}
      var addedHEX60gensym182_1224738156 = addInt(addInt(kHEX60gensym182_1224738135.encodedSize, vHEX60gensym182_1224738140.encodedSize), Temporary7);
      Temporary8 = kHEX60gensym182_1224738135;
      kHEX60gensym182_1224738135 = genericReset(kHEX60gensym182_1224738135, NTI1224736774);
      b_1224738111[b_1224738111_Idx].stack.push(Temporary8);;
        if (!(0 <= vHEX60gensym182_1224738140.encodedSize)) Temporary9 = false; else {          Temporary9 = (vHEX60gensym182_1224738140.encodedSize <= 2147483647);        }      if (!(Temporary9)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `v`gensym182.encodedSize >= 0 and v`gensym182.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym192_1224738178 = (vHEX60gensym182_1224738140.encodedSize << 3);
      if ((uHEX60gensym192_1224738178 < 128)) {
      Temporary10 = 1;
      }
      else {
      if ((uHEX60gensym192_1224738178 < 16384)) {
      Temporary10 = 2;
      }
      else {
      if ((uHEX60gensym192_1224738178 < 2097152)) {
      Temporary10 = 3;
      }
      else {
      if ((uHEX60gensym192_1224738178 < 268435456)) {
      Temporary10 = 4;
      }
      else {
      Temporary10 = 5;
      }
      }}}
      addedHEX60gensym182_1224738156 = addInt(addedHEX60gensym182_1224738156, Temporary10);
      b_1224738111[b_1224738111_Idx].stack[pHEX60gensym182_1224738126].encodedSize = addInt(b_1224738111[b_1224738111_Idx].stack[pHEX60gensym182_1224738126].encodedSize, addedHEX60gensym182_1224738156);
      Temporary11 = vHEX60gensym182_1224738140;
      vHEX60gensym182_1224738140 = genericReset(vHEX60gensym182_1224738140, NTI1224736774);
      b_1224738111[b_1224738111_Idx].stack.push(Temporary11);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addBuffer_1224737487(b_1224737488, b_1224737488_Idx, buff_1224737489) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
        var Temporary4;
      var Temporary5;
      var Temporary6;

    var vHEX60gensym74_1224737493 = {tag: 1, buf: buff_1224737489, encodedSize: buff_1224737489.length, str: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
    if (((b_1224737488[b_1224737488_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737488[b_1224737488_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary1 = vHEX60gensym74_1224737493;
    vHEX60gensym74_1224737493 = genericReset(vHEX60gensym74_1224737493, NTI1224736774);
    b_1224737488[b_1224737488_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym74_1224737512 = (Temporary2 = HEX5BHEX5D_1224736920(b_1224737488[b_1224737488_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224737488[b_1224737488_Idx].stack[pHEX60gensym74_1224737512].tag == 4)) {
      var Temporary3 = b_1224737488[b_1224737488_Idx].stack[pHEX60gensym74_1224737512];
      if (ConstSet16[Temporary3.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736772)); }
      Temporary3.size = addInt(Temporary3.size, 1);
      var addedHEX60gensym74_1224737521 = vHEX60gensym74_1224737493.encodedSize;
        if (!(0 <= vHEX60gensym74_1224737493.encodedSize)) Temporary4 = false; else {          Temporary4 = (vHEX60gensym74_1224737493.encodedSize <= 2147483647);        }      if (!(Temporary4)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `v`gensym74.encodedSize >= 0 and v`gensym74.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym81_1224737536 = (vHEX60gensym74_1224737493.encodedSize << 3);
      if ((uHEX60gensym81_1224737536 < 128)) {
      Temporary5 = 1;
      }
      else {
      if ((uHEX60gensym81_1224737536 < 16384)) {
      Temporary5 = 2;
      }
      else {
      if ((uHEX60gensym81_1224737536 < 2097152)) {
      Temporary5 = 3;
      }
      else {
      if ((uHEX60gensym81_1224737536 < 268435456)) {
      Temporary5 = 4;
      }
      else {
      Temporary5 = 5;
      }
      }}}
      addedHEX60gensym74_1224737521 = addInt(addedHEX60gensym74_1224737521, Temporary5);
      b_1224737488[b_1224737488_Idx].stack[pHEX60gensym74_1224737512].encodedSize = addInt(b_1224737488[b_1224737488_Idx].stack[pHEX60gensym74_1224737512].encodedSize, addedHEX60gensym74_1224737521);
      Temporary6 = vHEX60gensym74_1224737493;
      vHEX60gensym74_1224737493 = genericReset(vHEX60gensym74_1224737493, NTI1224736774);
      b_1224737488[b_1224737488_Idx].stack.push(Temporary6);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function jsToByteBuffer_486539283(s_486539284) {
  var result_486539285 = null;

    if (!(((typeof(s_486539284) == "object") && (s_486539284 instanceof Uint8Array)))) {
    failedAssertImpl_218103864(makeNimstrLit("nim_bipf_purejs.nim(45, 10) `jsTypeOf(s) == \"object\" and isUint8Array(s)` "));
    }
    
    result_486539285 = s_486539284;

  return result_486539285;

}

function addBuffer_1224738029(b_1224738030, b_1224738030_Idx, k_1224738031, buf_1224738032) {
      var Temporary1;
      var Temporary2;
        var Temporary3;
      var Temporary4;
      var Temporary5;
        var Temporary6;
      var Temporary7;
      var Temporary8;

    if (((b_1224738030[b_1224738030_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym167_1224738045 = (Temporary1 = HEX5BHEX5D_1224736920(b_1224738030[b_1224738030_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_1224738030[b_1224738030_Idx].stack[pHEX60gensym167_1224738045].tag == 5)) {
      var Temporary2 = b_1224738030[b_1224738030_Idx].stack[pHEX60gensym167_1224738045];
      if (ConstSet17[Temporary2.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736772)); }
      Temporary2.size = addInt(Temporary2.size, 1);
      var kHEX60gensym167_1224738054 = {tag: 0, str: k_1224738031, encodedSize: Buffer.byteLength(k_1224738031), buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym167_1224738055 = {tag: 1, buf: buf_1224738032, encodedSize: buf_1224738032.length, str: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
        if (!(0 <= kHEX60gensym167_1224738054.encodedSize)) Temporary3 = false; else {          Temporary3 = (kHEX60gensym167_1224738054.encodedSize <= 2147483647);        }      if (!(Temporary3)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `k`gensym167.encodedSize >= 0 and k`gensym167.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym173_1224738070 = (kHEX60gensym167_1224738054.encodedSize << 3);
      if ((uHEX60gensym173_1224738070 < 128)) {
      Temporary4 = 1;
      }
      else {
      if ((uHEX60gensym173_1224738070 < 16384)) {
      Temporary4 = 2;
      }
      else {
      if ((uHEX60gensym173_1224738070 < 2097152)) {
      Temporary4 = 3;
      }
      else {
      if ((uHEX60gensym173_1224738070 < 268435456)) {
      Temporary4 = 4;
      }
      else {
      Temporary4 = 5;
      }
      }}}
      var addedHEX60gensym167_1224738071 = addInt(addInt(kHEX60gensym167_1224738054.encodedSize, vHEX60gensym167_1224738055.encodedSize), Temporary4);
      Temporary5 = kHEX60gensym167_1224738054;
      kHEX60gensym167_1224738054 = genericReset(kHEX60gensym167_1224738054, NTI1224736774);
      b_1224738030[b_1224738030_Idx].stack.push(Temporary5);;
        if (!(0 <= vHEX60gensym167_1224738055.encodedSize)) Temporary6 = false; else {          Temporary6 = (vHEX60gensym167_1224738055.encodedSize <= 2147483647);        }      if (!(Temporary6)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `v`gensym167.encodedSize >= 0 and v`gensym167.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym177_1224738093 = (vHEX60gensym167_1224738055.encodedSize << 3);
      if ((uHEX60gensym177_1224738093 < 128)) {
      Temporary7 = 1;
      }
      else {
      if ((uHEX60gensym177_1224738093 < 16384)) {
      Temporary7 = 2;
      }
      else {
      if ((uHEX60gensym177_1224738093 < 2097152)) {
      Temporary7 = 3;
      }
      else {
      if ((uHEX60gensym177_1224738093 < 268435456)) {
      Temporary7 = 4;
      }
      else {
      Temporary7 = 5;
      }
      }}}
      addedHEX60gensym167_1224738071 = addInt(addedHEX60gensym167_1224738071, Temporary7);
      b_1224738030[b_1224738030_Idx].stack[pHEX60gensym167_1224738045].encodedSize = addInt(b_1224738030[b_1224738030_Idx].stack[pHEX60gensym167_1224738045].encodedSize, addedHEX60gensym167_1224738071);
      Temporary8 = vHEX60gensym167_1224738055;
      vHEX60gensym167_1224738055 = genericReset(vHEX60gensym167_1224738055, NTI1224736774);
      b_1224738030[b_1224738030_Idx].stack.push(Temporary8);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addExtended_1224737720(b_1224737721, b_1224737721_Idx, ext_1224737722) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
        var Temporary4;
      var Temporary5;
      var Temporary6;

    var vHEX60gensym110_1224737726 = {tag: 7, ext: ext_1224737722, encodedSize: 0, str: null, buf: null, i: 0, d: 0.0, b: 0, size: 0};
    if (((b_1224737721[b_1224737721_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737721[b_1224737721_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary1 = vHEX60gensym110_1224737726;
    vHEX60gensym110_1224737726 = genericReset(vHEX60gensym110_1224737726, NTI1224736774);
    b_1224737721[b_1224737721_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym110_1224737745 = (Temporary2 = HEX5BHEX5D_1224736920(b_1224737721[b_1224737721_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224737721[b_1224737721_Idx].stack[pHEX60gensym110_1224737745].tag == 4)) {
      var Temporary3 = b_1224737721[b_1224737721_Idx].stack[pHEX60gensym110_1224737745];
      if (ConstSet18[Temporary3.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736772)); }
      Temporary3.size = addInt(Temporary3.size, 1);
      var addedHEX60gensym110_1224737754 = vHEX60gensym110_1224737726.encodedSize;
        if (!(0 <= vHEX60gensym110_1224737726.encodedSize)) Temporary4 = false; else {          Temporary4 = (vHEX60gensym110_1224737726.encodedSize <= 2147483647);        }      if (!(Temporary4)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `v`gensym110.encodedSize >= 0 and v`gensym110.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym117_1224737769 = (vHEX60gensym110_1224737726.encodedSize << 3);
      if ((uHEX60gensym117_1224737769 < 128)) {
      Temporary5 = 1;
      }
      else {
      if ((uHEX60gensym117_1224737769 < 16384)) {
      Temporary5 = 2;
      }
      else {
      if ((uHEX60gensym117_1224737769 < 2097152)) {
      Temporary5 = 3;
      }
      else {
      if ((uHEX60gensym117_1224737769 < 268435456)) {
      Temporary5 = 4;
      }
      else {
      Temporary5 = 5;
      }
      }}}
      addedHEX60gensym110_1224737754 = addInt(addedHEX60gensym110_1224737754, Temporary5);
      b_1224737721[b_1224737721_Idx].stack[pHEX60gensym110_1224737745].encodedSize = addInt(b_1224737721[b_1224737721_Idx].stack[pHEX60gensym110_1224737745].encodedSize, addedHEX60gensym110_1224737754);
      Temporary6 = vHEX60gensym110_1224737726;
      vHEX60gensym110_1224737726 = genericReset(vHEX60gensym110_1224737726, NTI1224736774);
      b_1224737721[b_1224737721_Idx].stack.push(Temporary6);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addExtended_1224738279(b_1224738280, b_1224738280_Idx, k_1224738281, ext_1224738282) {
      var Temporary1;
      var Temporary2;
        var Temporary3;
      var Temporary4;
      var Temporary5;
        var Temporary6;
      var Temporary7;
      var Temporary8;

    if (((b_1224738280[b_1224738280_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym212_1224738295 = (Temporary1 = HEX5BHEX5D_1224736920(b_1224738280[b_1224738280_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_1224738280[b_1224738280_Idx].stack[pHEX60gensym212_1224738295].tag == 5)) {
      var Temporary2 = b_1224738280[b_1224738280_Idx].stack[pHEX60gensym212_1224738295];
      if (ConstSet19[Temporary2.tag]!==undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736772)); }
      Temporary2.size = addInt(Temporary2.size, 1);
      var kHEX60gensym212_1224738304 = {tag: 0, str: k_1224738281, encodedSize: Buffer.byteLength(k_1224738281), buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym212_1224738305 = {tag: 7, ext: ext_1224738282, encodedSize: 0, str: null, buf: null, i: 0, d: 0.0, b: 0, size: 0};
        if (!(0 <= kHEX60gensym212_1224738304.encodedSize)) Temporary3 = false; else {          Temporary3 = (kHEX60gensym212_1224738304.encodedSize <= 2147483647);        }      if (!(Temporary3)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `k`gensym212.encodedSize >= 0 and k`gensym212.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym218_1224738320 = (kHEX60gensym212_1224738304.encodedSize << 3);
      if ((uHEX60gensym218_1224738320 < 128)) {
      Temporary4 = 1;
      }
      else {
      if ((uHEX60gensym218_1224738320 < 16384)) {
      Temporary4 = 2;
      }
      else {
      if ((uHEX60gensym218_1224738320 < 2097152)) {
      Temporary4 = 3;
      }
      else {
      if ((uHEX60gensym218_1224738320 < 268435456)) {
      Temporary4 = 4;
      }
      else {
      Temporary4 = 5;
      }
      }}}
      var addedHEX60gensym212_1224738321 = addInt(addInt(kHEX60gensym212_1224738304.encodedSize, vHEX60gensym212_1224738305.encodedSize), Temporary4);
      Temporary5 = kHEX60gensym212_1224738304;
      kHEX60gensym212_1224738304 = genericReset(kHEX60gensym212_1224738304, NTI1224736774);
      b_1224738280[b_1224738280_Idx].stack.push(Temporary5);;
        if (!(0 <= vHEX60gensym212_1224738305.encodedSize)) Temporary6 = false; else {          Temporary6 = (vHEX60gensym212_1224738305.encodedSize <= 2147483647);        }      if (!(Temporary6)) {
      failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `v`gensym212.encodedSize >= 0 and v`gensym212.encodedSize <= high(int32)` "));
      }
      
      var uHEX60gensym222_1224738343 = (vHEX60gensym212_1224738305.encodedSize << 3);
      if ((uHEX60gensym222_1224738343 < 128)) {
      Temporary7 = 1;
      }
      else {
      if ((uHEX60gensym222_1224738343 < 16384)) {
      Temporary7 = 2;
      }
      else {
      if ((uHEX60gensym222_1224738343 < 2097152)) {
      Temporary7 = 3;
      }
      else {
      if ((uHEX60gensym222_1224738343 < 268435456)) {
      Temporary7 = 4;
      }
      else {
      Temporary7 = 5;
      }
      }}}
      addedHEX60gensym212_1224738321 = addInt(addedHEX60gensym212_1224738321, Temporary7);
      b_1224738280[b_1224738280_Idx].stack[pHEX60gensym212_1224738295].encodedSize = addInt(b_1224738280[b_1224738280_Idx].stack[pHEX60gensym212_1224738295].encodedSize, addedHEX60gensym212_1224738321);
      Temporary8 = vHEX60gensym212_1224738305;
      vHEX60gensym212_1224738305 = genericReset(vHEX60gensym212_1224738305, NTI1224736774);
      b_1224738280[b_1224738280_Idx].stack.push(Temporary8);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function writeVaruint32_1073741938(buf_1073741939, buf_1073741939_Idx, v_1073741940, p_1073741941, p_1073741941_Idx) {
    if ((v_1073741940 < 128)) {
    buf_1073741939[buf_1073741939_Idx][p_1073741941[p_1073741941_Idx]] = v_1073741940;
    p_1073741941[p_1073741941_Idx] = addInt(p_1073741941[p_1073741941_Idx], 1);
    }
    else {
    if ((v_1073741940 < 16384)) {
    buf_1073741939[buf_1073741939_Idx][p_1073741941[p_1073741941_Idx]] = (v_1073741940 | 128);
    buf_1073741939[buf_1073741939_Idx][addInt(p_1073741941[p_1073741941_Idx], 1)] = (v_1073741940 >>> 7);
    p_1073741941[p_1073741941_Idx] = addInt(p_1073741941[p_1073741941_Idx], 2);
    }
    else {
    if ((v_1073741940 < 2097152)) {
    buf_1073741939[buf_1073741939_Idx][p_1073741941[p_1073741941_Idx]] = (v_1073741940 | 128);
    buf_1073741939[buf_1073741939_Idx][addInt(p_1073741941[p_1073741941_Idx], 1)] = ((v_1073741940 >>> 7) | 128);
    buf_1073741939[buf_1073741939_Idx][addInt(p_1073741941[p_1073741941_Idx], 2)] = (v_1073741940 >>> 14);
    p_1073741941[p_1073741941_Idx] = addInt(p_1073741941[p_1073741941_Idx], 3);
    }
    else {
    if ((v_1073741940 < 268435456)) {
    buf_1073741939[buf_1073741939_Idx][p_1073741941[p_1073741941_Idx]] = (v_1073741940 | 128);
    buf_1073741939[buf_1073741939_Idx][addInt(p_1073741941[p_1073741941_Idx], 1)] = ((v_1073741940 >>> 7) | 128);
    buf_1073741939[buf_1073741939_Idx][addInt(p_1073741941[p_1073741941_Idx], 2)] = ((v_1073741940 >>> 14) | 128);
    buf_1073741939[buf_1073741939_Idx][addInt(p_1073741941[p_1073741941_Idx], 3)] = (v_1073741940 >>> 21);
    p_1073741941[p_1073741941_Idx] = addInt(p_1073741941[p_1073741941_Idx], 4);
    }
    else {
      buf_1073741939[buf_1073741939_Idx][p_1073741941[p_1073741941_Idx]] = (v_1073741940 | 128);
      buf_1073741939[buf_1073741939_Idx][addInt(p_1073741941[p_1073741941_Idx], 1)] = ((v_1073741940 >>> 7) | 128);
      buf_1073741939[buf_1073741939_Idx][addInt(p_1073741941[p_1073741941_Idx], 2)] = ((v_1073741940 >>> 14) | 128);
      buf_1073741939[buf_1073741939_Idx][addInt(p_1073741941[p_1073741941_Idx], 3)] = ((v_1073741940 >>> 21) | 128);
      buf_1073741939[buf_1073741939_Idx][addInt(p_1073741941[p_1073741941_Idx], 4)] = (v_1073741940 >>> 28);
      p_1073741941[p_1073741941_Idx] = addInt(p_1073741941[p_1073741941_Idx], 5);
    }
    }}}

  
}

function finish_1224738533(b_1224738534, b_1224738534_Idx) {
      var Temporary1;
    var Temporary2;
              var Temporary6;
              var Temporary7;
              var Temporary8;
              var Temporary9;
                var Temporary10;
                var Temporary11;
                var Temporary12;
                var Temporary13;
                var Temporary14;
                var Temporary15;

  var result_1224738535 = null;

    if ((0 < (b_1224738534[b_1224738534_Idx].pointers).length)) {
    raiseException({message: makeNimstrLit("Cannot finish document before ending all arrays and maps"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    if (((b_1224738534[b_1224738534_Idx].stack).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot finish document before adding any value"), parent: null, m_type: NTI1224736771, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    var encodedSize_1224738544 = b_1224738534[b_1224738534_Idx].stack[0].encodedSize;
      if (!(0 <= encodedSize_1224738544)) Temporary1 = false; else {        Temporary1 = (encodedSize_1224738544 <= 2147483647);      }    if (!(Temporary1)) {
    failedAssertImpl_218103864(makeNimstrLit("nim_bipf.nim(57, 10) `encodedSize >= 0 and encodedSize <= high(int32)` "));
    }
    
    var uHEX60gensym254_1224738559 = (encodedSize_1224738544 << 3);
    if ((uHEX60gensym254_1224738559 < 128)) {
    Temporary2 = 1;
    }
    else {
    if ((uHEX60gensym254_1224738559 < 16384)) {
    Temporary2 = 2;
    }
    else {
    if ((uHEX60gensym254_1224738559 < 2097152)) {
    Temporary2 = 3;
    }
    else {
    if ((uHEX60gensym254_1224738559 < 268435456)) {
    Temporary2 = 4;
    }
    else {
    Temporary2 = 5;
    }
    }}}
    var r_1224738560 = [Buffer.allocUnsafe(addInt(encodedSize_1224738544, Temporary2))];
    var p_1224738561 = [0];
    Label3: do {
      var sv_1224738582 = ({encodedSize: 0, tag: 0, str: null, buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0});
      var i_486540064 = 0;
      var L_486540065 = (b_1224738534[b_1224738534_Idx].stack).length;
      Label4: do {
          Label5: while (true) {
          if (!(i_486540064 < L_486540065)) break Label5;
            sv_1224738582 = b_1224738534[b_1224738534_Idx].stack[i_486540064];
            var tag_1224738871 = ((sv_1224738582.tag + (sv_1224738582.encodedSize << 3)) >>> 0);
            writeVaruint32_1073741938(r_1224738560, 0, tag_1224738871, p_1224738561, 0);
            switch (sv_1224738582.tag) {
            case 5:
            case 4:
              break;
            case 2:
              var Temporary6 = sv_1224738582;
              if (ConstSet20[Temporary6.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'i\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary6.tag, NTI1224736772)); }
              r_1224738560[0].writeInt32LE(Temporary6.i, p_1224738561[0]);
              p_1224738561[0] = addInt(p_1224738561[0], 4);
              break;
            case 3:
              var Temporary7 = sv_1224738582;
              if (ConstSet21[Temporary7.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'d\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary7.tag, NTI1224736772)); }
              r_1224738560[0].writeDoubleLE(Temporary7.d, p_1224738561[0]);
              p_1224738561[0] = addInt(p_1224738561[0], 8);
              break;
            case 6:
              var Temporary8 = sv_1224738582;
              if (ConstSet22[Temporary8.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'b\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary8.tag, NTI1224736772)); }
              switch (Temporary8.b) {
              case 0:
                r_1224738560[0][p_1224738561[0]] = 1;
                p_1224738561[0] = addInt(p_1224738561[0], 1);
                break;
              case 1:
                r_1224738560[0][p_1224738561[0]] = 0;
                p_1224738561[0] = addInt(p_1224738561[0], 1);
                break;
              case 2:
                break;
              }
              break;
            case 0:
              var Temporary9 = sv_1224738582;
              if (ConstSet23[Temporary9.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary9.tag, NTI1224736772)); }
              p_1224738561[0] = addInt(p_1224738561[0], r_1224738560[0].write(Temporary9.str, p_1224738561[0]));
              break;
            case 7:
                var Temporary10 = sv_1224738582;
                if (ConstSet24[Temporary10.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'ext\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary10.tag, NTI1224736772)); }
              if ((Temporary10.ext.length == 0)) {
              }
              else {
                var Temporary11 = sv_1224738582;
                if (ConstSet25[Temporary11.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'ext\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary11.tag, NTI1224736772)); }
                r_1224738560[0].set(Temporary11.ext,p_1224738561[0]);;
                var Temporary12 = sv_1224738582;
                if (ConstSet26[Temporary12.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'ext\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary12.tag, NTI1224736772)); }
                p_1224738561[0] = addInt(p_1224738561[0], Temporary12.ext.length);
              }
              
              break;
            case 1:
                var Temporary13 = sv_1224738582;
                if (ConstSet27[Temporary13.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'buf\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary13.tag, NTI1224736772)); }
              if ((Temporary13.buf.length == 0)) {
              }
              else {
                var Temporary14 = sv_1224738582;
                if (ConstSet28[Temporary14.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'buf\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary14.tag, NTI1224736772)); }
                r_1224738560[0].set(Temporary14.buf,p_1224738561[0]);;
                var Temporary15 = sv_1224738582;
                if (ConstSet29[Temporary15.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'buf\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary15.tag, NTI1224736772)); }
                p_1224738561[0] = addInt(p_1224738561[0], Temporary15.buf.length);
              }
              
              break;
            }
            i_486540064 = addInt(i_486540064, 1);
            if (!(((b_1224738534[b_1224738534_Idx].stack).length == L_486540065))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_1224738535 = r_1224738560[0];

  return result_1224738535;

}

function newBipfBuilder_486539341() {

function HEX3Aanonymous_486539347(thisHEX60gensym11_486539348, arg0HEX60gensym11_486539349) {
    var thatHEX60gensym11_486539350 = [thisHEX60gensym11_486539348];
    if ((arg0HEX60gensym11_486539349 === undefined)) {
    startArray_1224737103(thatHEX60gensym11_486539350, 0);
    }
    else {
    startArray_1224737187(thatHEX60gensym11_486539350, 0, toNativeString_486539272(arg0HEX60gensym11_486539349));
    }
    

  
}
    
function HEX3Aanonymous_486539366(arg0HEX60gensym11_486539367) {
        HEX3Aanonymous_486539347(this, arg0HEX60gensym11_486539367);

      
    }

function HEX3Aanonymous_486539384(this_486539385) {
    var that_486539386 = [this_486539385];
    endArray_1224738367(that_486539386, 0);

  
}
    
function HEX3Aanonymous_486539387() {
        HEX3Aanonymous_486539384(this);

      
    }

function HEX3Aanonymous_486539403(thisHEX60gensym16_486539404, arg0HEX60gensym16_486539405) {
    var thatHEX60gensym16_486539406 = [thisHEX60gensym16_486539404];
    if ((arg0HEX60gensym16_486539405 === undefined)) {
    startMap_1224736850(thatHEX60gensym16_486539406, 0);
    }
    else {
    startMap_1224737010(thatHEX60gensym16_486539406, 0, toNativeString_486539272(arg0HEX60gensym16_486539405));
    }
    

  
}
    
function HEX3Aanonymous_486539410(arg0HEX60gensym16_486539411) {
        HEX3Aanonymous_486539403(this, arg0HEX60gensym16_486539411);

      
    }

function HEX3Aanonymous_486539424(this_486539425) {
    var that_486539426 = [this_486539425];
    endMap_1224738429(that_486539426, 0);

  
}
    
function HEX3Aanonymous_486539427() {
        HEX3Aanonymous_486539424(this);

      
    }

function HEX3Aanonymous_486539443(thisHEX60gensym21_486539444, arg0HEX60gensym21_486539445) {
    var thatHEX60gensym21_486539446 = [thisHEX60gensym21_486539444];
    if ((arg0HEX60gensym21_486539445 === undefined)) {
    addNull_1224737651(thatHEX60gensym21_486539446, 0);
    }
    else {
    addNull_1224738195(thatHEX60gensym21_486539446, 0, toNativeString_486539272(arg0HEX60gensym21_486539445));
    }
    

  
}
    
function HEX3Aanonymous_486539450(arg0HEX60gensym21_486539451) {
        HEX3Aanonymous_486539443(this, arg0HEX60gensym21_486539451);

      
    }

function HEX3Aanonymous_486539468(thisHEX60gensym24_486539469, arg0HEX60gensym24_486539470, arg1HEX60gensym24_486539471) {
    var thatHEX60gensym24_486539472 = [thisHEX60gensym24_486539469];
    if ((arg1HEX60gensym24_486539471 === undefined)) {
    addString_1224737421(thatHEX60gensym24_486539472, 0, toNativeString_486539272(arg0HEX60gensym24_486539470));
    }
    else {
    addString_1224737948(thatHEX60gensym24_486539472, 0, toNativeString_486539272(arg0HEX60gensym24_486539470), toNativeString_486539272(arg1HEX60gensym24_486539471));
    }
    

  
}
    
function HEX3Aanonymous_486539476(arg0HEX60gensym24_486539477, arg1HEX60gensym24_486539478) {
        HEX3Aanonymous_486539468(this, arg0HEX60gensym24_486539477, arg1HEX60gensym24_486539478);

      
    }

function HEX3Aanonymous_486539495(thisHEX60gensym27_486539496, arg0HEX60gensym27_486539497, arg1HEX60gensym27_486539498) {
    var thatHEX60gensym27_486539499 = [thisHEX60gensym27_486539496];
    if ((arg1HEX60gensym27_486539498 === undefined)) {
    addInt_1224737271(thatHEX60gensym27_486539499, 0, toInt32_486539291(arg0HEX60gensym27_486539497));
    }
    else {
    addInt_1224737786(thatHEX60gensym27_486539499, 0, toNativeString_486539272(arg0HEX60gensym27_486539497), toInt32_486539291(arg1HEX60gensym27_486539498));
    }
    

  
}
    
function HEX3Aanonymous_486539503(arg0HEX60gensym27_486539504, arg1HEX60gensym27_486539505) {
        HEX3Aanonymous_486539495(this, arg0HEX60gensym27_486539504, arg1HEX60gensym27_486539505);

      
    }

function HEX3Aanonymous_486539522(thisHEX60gensym30_486539523, arg0HEX60gensym30_486539524, arg1HEX60gensym30_486539525) {
    var thatHEX60gensym30_486539526 = [thisHEX60gensym30_486539523];
    if ((arg1HEX60gensym30_486539525 === undefined)) {
    addDouble_1224737346(thatHEX60gensym30_486539526, 0, toFloat64_486539312(arg0HEX60gensym30_486539524));
    }
    else {
    addDouble_1224737867(thatHEX60gensym30_486539526, 0, toNativeString_486539272(arg0HEX60gensym30_486539524), toFloat64_486539312(arg1HEX60gensym30_486539525));
    }
    

  
}
    
function HEX3Aanonymous_486539530(arg0HEX60gensym30_486539531, arg1HEX60gensym30_486539532) {
        HEX3Aanonymous_486539522(this, arg0HEX60gensym30_486539531, arg1HEX60gensym30_486539532);

      
    }

function HEX3Aanonymous_486539549(thisHEX60gensym33_486539550, arg0HEX60gensym33_486539551, arg1HEX60gensym33_486539552) {
    var thatHEX60gensym33_486539553 = [thisHEX60gensym33_486539550];
    if ((arg1HEX60gensym33_486539552 === undefined)) {
    addBool_1224737562(thatHEX60gensym33_486539553, 0, toBool_486539320(arg0HEX60gensym33_486539551));
    }
    else {
    addBool_1224738110(thatHEX60gensym33_486539553, 0, toNativeString_486539272(arg0HEX60gensym33_486539551), toBool_486539320(arg1HEX60gensym33_486539552));
    }
    

  
}
    
function HEX3Aanonymous_486539557(arg0HEX60gensym33_486539558, arg1HEX60gensym33_486539559) {
        HEX3Aanonymous_486539549(this, arg0HEX60gensym33_486539558, arg1HEX60gensym33_486539559);

      
    }

function HEX3Aanonymous_486539576(thisHEX60gensym36_486539577, arg0HEX60gensym36_486539578, arg1HEX60gensym36_486539579) {
    var thatHEX60gensym36_486539580 = [thisHEX60gensym36_486539577];
    if ((arg1HEX60gensym36_486539579 === undefined)) {
    addBuffer_1224737487(thatHEX60gensym36_486539580, 0, jsToByteBuffer_486539283(arg0HEX60gensym36_486539578));
    }
    else {
    addBuffer_1224738029(thatHEX60gensym36_486539580, 0, toNativeString_486539272(arg0HEX60gensym36_486539578), jsToByteBuffer_486539283(arg1HEX60gensym36_486539579));
    }
    

  
}
    
function HEX3Aanonymous_486539584(arg0HEX60gensym36_486539585, arg1HEX60gensym36_486539586) {
        HEX3Aanonymous_486539576(this, arg0HEX60gensym36_486539585, arg1HEX60gensym36_486539586);

      
    }

function HEX3Aanonymous_486539603(thisHEX60gensym39_486539604, arg0HEX60gensym39_486539605, arg1HEX60gensym39_486539606) {
    var thatHEX60gensym39_486539607 = [thisHEX60gensym39_486539604];
    if ((arg1HEX60gensym39_486539606 === undefined)) {
    addExtended_1224737720(thatHEX60gensym39_486539607, 0, jsToByteBuffer_486539283(arg0HEX60gensym39_486539605));
    }
    else {
    addExtended_1224738279(thatHEX60gensym39_486539607, 0, toNativeString_486539272(arg0HEX60gensym39_486539605), jsToByteBuffer_486539283(arg1HEX60gensym39_486539606));
    }
    

  
}
    
function HEX3Aanonymous_486539611(arg0HEX60gensym39_486539612, arg1HEX60gensym39_486539613) {
        HEX3Aanonymous_486539603(this, arg0HEX60gensym39_486539612, arg1HEX60gensym39_486539613);

      
    }

function HEX3Aanonymous_486539626(this_486539627) {
  var result_486539628 = null;

    var that_486539629 = [this_486539627];
    result_486539628 = finish_1224738533(that_486539629, 0);

  return result_486539628;

}
    
function HEX3Aanonymous_486539630() {
      var result_486539631 = null;

        result_486539631 = HEX3Aanonymous_486539626(this);

      return result_486539631;

    }

  var result_486539342 = null;

    result_486539342 = {stack: [], pointers: []};
    var prototype_486539343 = result_486539342;
    prototype_486539343.startArray = HEX3Aanonymous_486539366;
    prototype_486539343.endArray = HEX3Aanonymous_486539387;
    prototype_486539343.startMap = HEX3Aanonymous_486539410;
    prototype_486539343.endMap = HEX3Aanonymous_486539427;
    prototype_486539343.addNull = HEX3Aanonymous_486539450;
    prototype_486539343.addString = HEX3Aanonymous_486539476;
    prototype_486539343.addInt = HEX3Aanonymous_486539503;
    prototype_486539343.addDouble = HEX3Aanonymous_486539530;
    prototype_486539343.addBool = HEX3Aanonymous_486539557;
    prototype_486539343.addBuffer = HEX3Aanonymous_486539584;
    prototype_486539343.addExtended = HEX3Aanonymous_486539611;
    prototype_486539343.finish = HEX3Aanonymous_486539630;

  return result_486539342;

}

function serialize_486539644(obj_486539645) {

function recursiveEncodeKeyed_486539648(builder_486539649, builder_486539649_Idx, key_486539650, obj_486539651) {
    var jsType_486539675 = typeof(obj_486539651);
    if ((jsType_486539675 == "undefined")) {
    }
    else {
    if ((jsType_486539675 == "boolean")) {
    addBool_1224738110(builder_486539649, builder_486539649_Idx, key_486539650, toBool_486539320(obj_486539651));
    }
    else {
    if ((jsType_486539675 == "number")) {
    if ((((Number.isSafeInteger(obj_486539651)) && toBool_486539320((obj_486539651 >= -2147483648))) && toBool_486539320((obj_486539651 <= 2147483647)))) {
    addInt_1224737786(builder_486539649, builder_486539649_Idx, key_486539650, toInt32_486539291(obj_486539651));
    }
    else {
    addDouble_1224737867(builder_486539649, builder_486539649_Idx, key_486539650, toFloat64_486539312(obj_486539651));
    }
    
    }
    else {
    if ((jsType_486539675 == "string")) {
    addString_1224737948(builder_486539649, builder_486539649_Idx, key_486539650, toNativeString_486539272(obj_486539651));
    }
    else {
    if ((jsType_486539675 == "object")) {
    if ((obj_486539651 === null)) {
    addNull_1224738195(builder_486539649, builder_486539649_Idx, key_486539650);
    }
    else {
    if ((obj_486539651 instanceof Uint8Array)) {
    addBuffer_1224738029(builder_486539649, builder_486539649_Idx, key_486539650, jsToByteBuffer_486539283(obj_486539651));
    }
    else {
    if ((Array.isArray(obj_486539651))) {
    startArray_1224737187(builder_486539649, builder_486539649_Idx, key_486539650);
    Label1: do {
      var value_486539687 = null;
      var v_486540073 = null;
      for (var k in obj_486539651) {
        if (!obj_486539651.hasOwnProperty(k)) continue;
        v_486540073=obj_486539651[k];
      value_486539687 = v_486540073;
      recursiveEncode_486539652(builder_486539649, builder_486539649_Idx, value_486539687);
      }
    } while (false);
    endArray_1224738367(builder_486539649, builder_486539649_Idx);
    }
    else {
      startMap_1224737010(builder_486539649, builder_486539649_Idx, key_486539650);
      Label2: do {
        var key_486539688 = null;
        var value_486539689 = null;
        var k_486540075 = null;
        var v_486540076 = null;
        for (var k_486540075 in obj_486539651) {
          if (!obj_486539651.hasOwnProperty(k_486540075)) continue;
          v_486540076=obj_486539651[k_486540075];
        key_486539688 = k_486540075;
        value_486539689 = v_486540076;
        recursiveEncodeKeyed_486539648(builder_486539649, builder_486539649_Idx, key_486539688, value_486539689);
        }
      } while (false);
      endMap_1224738429(builder_486539649, builder_486539649_Idx);
    }
    }}
    }
    else {
      raiseException({message: (makeNimstrLit("Unsupported type: ") || []).concat(cstrToNimstr(jsType_486539675) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    }}}}

  
}
    
function recursiveEncode_486539652(builder_486539653, builder_486539653_Idx, obj_486539654) {
        var jsType_486539655 = typeof(obj_486539654);
        if ((jsType_486539655 == "undefined")) {
        }
        else {
        if ((jsType_486539655 == "boolean")) {
        addBool_1224737562(builder_486539653, builder_486539653_Idx, toBool_486539320(obj_486539654));
        }
        else {
        if ((jsType_486539655 == "number")) {
        if ((((Number.isSafeInteger(obj_486539654)) && toBool_486539320((obj_486539654 >= -2147483648))) && toBool_486539320((obj_486539654 <= 2147483647)))) {
        addInt_1224737271(builder_486539653, builder_486539653_Idx, toInt32_486539291(obj_486539654));
        }
        else {
        addDouble_1224737346(builder_486539653, builder_486539653_Idx, toFloat64_486539312(obj_486539654));
        }
        
        }
        else {
        if ((jsType_486539655 == "string")) {
        addString_1224737421(builder_486539653, builder_486539653_Idx, toNativeString_486539272(obj_486539654));
        }
        else {
        if ((jsType_486539655 == "object")) {
        if ((obj_486539654 === null)) {
        addNull_1224737651(builder_486539653, builder_486539653_Idx);
        }
        else {
        if ((obj_486539654 instanceof Uint8Array)) {
        addBuffer_1224737487(builder_486539653, builder_486539653_Idx, jsToByteBuffer_486539283(obj_486539654));
        }
        else {
        if ((Array.isArray(obj_486539654))) {
        startArray_1224737103(builder_486539653, builder_486539653_Idx);
        Label1: do {
          var value_486539667 = null;
          var v_486540068 = null;
          for (var k in obj_486539654) {
            if (!obj_486539654.hasOwnProperty(k)) continue;
            v_486540068=obj_486539654[k];
          value_486539667 = v_486540068;
          recursiveEncode_486539652(builder_486539653, builder_486539653_Idx, value_486539667);
          }
        } while (false);
        endArray_1224738367(builder_486539653, builder_486539653_Idx);
        }
        else {
          startMap_1224736850(builder_486539653, builder_486539653_Idx);
          Label2: do {
            var key_486539668 = null;
            var value_486539669 = null;
            var k_486540070 = null;
            var v_486540071 = null;
            for (var k_486540070 in obj_486539654) {
              if (!obj_486539654.hasOwnProperty(k_486540070)) continue;
              v_486540071=obj_486539654[k_486540070];
            key_486539668 = k_486540070;
            value_486539669 = v_486540071;
            recursiveEncodeKeyed_486539648(builder_486539653, builder_486539653_Idx, key_486539668, value_486539669);
            }
          } while (false);
          endMap_1224738429(builder_486539653, builder_486539653_Idx);
        }
        }}
        }
        else {
          raiseException({message: (makeNimstrLit("Unsupported type: ") || []).concat(cstrToNimstr(jsType_486539655) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
        }
        }}}}

      
    }

  var result_486539646 = null;

    var builder_486539647 = [newBipfBuilder_486539341()];
    recursiveEncode_486539652(builder_486539647, 0, obj_486539645);
    result_486539646 = finish_1224738533(builder_486539647, 0);

  return result_486539646;

}

function encodingLength_486539736(obj_486539737) {
  var result_486539738 = 0;

    lastBufferProduced_486539735[0] = serialize_486539644(obj_486539737);
    lastObjectVisited_486539734[0] = obj_486539737;
    result_486539738 = lastBufferProduced_486539735[0].length;

  return result_486539738;

}

function encode_486539741(obj_486539742, buffer_486539743, offset_486539744) {
  var result_486539745 = 0;

    if (!((obj_486539742 == lastObjectVisited_486539734[0]))) {
    lastBufferProduced_486539735[0] = serialize_486539644(obj_486539742);
    lastObjectVisited_486539734[0] = obj_486539742;
    }
    
    if (((subInt(buffer_486539743.length, offset_486539744) < lastBufferProduced_486539735[0].length) && !(( typeof Buffer !== 'undefined' && Buffer.isBuffer(buffer_486539743) )))) {
    raiseException({message: makeNimstrLit("Buffer too small"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var p_486539751 = offset_486539744;
    if ((lastBufferProduced_486539735[0].length == 0)) {
    }
    else {
      buffer_486539743.set(lastBufferProduced_486539735[0],p_486539751);;
      p_486539751 = addInt(p_486539751, lastBufferProduced_486539735[0].length);
    }
    
    result_486539745 = subInt(p_486539751, offset_486539744);

  return result_486539745;

}

function readVaruint32_1073742002(data_1073742003, p_1073742004, p_1073742004_Idx) {
  var result_1073742005 = 0;

  BeforeRet: do {
    result_1073742005 = 0;
    var b_1073742006 = 0;
    b_1073742006 = data_1073742003[p_1073742004[p_1073742004_Idx]];
    result_1073742005 = ((result_1073742005 + ((b_1073742006 & 127) >>> 0)) >>> 0);
    p_1073742004[p_1073742004_Idx] = addInt(p_1073742004[p_1073742004_Idx], 1);
    if (((b_1073742006 & 128) == 0)) {
    break BeforeRet;
    }
    
    b_1073742006 = data_1073742003[p_1073742004[p_1073742004_Idx]];
    result_1073742005 = ((result_1073742005 + (((b_1073742006 & 127) >>> 0) << 7)) >>> 0);
    p_1073742004[p_1073742004_Idx] = addInt(p_1073742004[p_1073742004_Idx], 1);
    if (((b_1073742006 & 128) == 0)) {
    break BeforeRet;
    }
    
    b_1073742006 = data_1073742003[p_1073742004[p_1073742004_Idx]];
    result_1073742005 = ((result_1073742005 + (((b_1073742006 & 127) >>> 0) << 14)) >>> 0);
    p_1073742004[p_1073742004_Idx] = addInt(p_1073742004[p_1073742004_Idx], 1);
    if (((b_1073742006 & 128) == 0)) {
    break BeforeRet;
    }
    
    b_1073742006 = data_1073742003[p_1073742004[p_1073742004_Idx]];
    result_1073742005 = ((result_1073742005 + (((b_1073742006 & 127) >>> 0) << 21)) >>> 0);
    p_1073742004[p_1073742004_Idx] = addInt(p_1073742004[p_1073742004_Idx], 1);
    if (((b_1073742006 & 128) == 0)) {
    break BeforeRet;
    }
    
    b_1073742006 = data_1073742003[p_1073742004[p_1073742004_Idx]];
    result_1073742005 = ((result_1073742005 + (((b_1073742006 & 127) >>> 0) << 28)) >>> 0);
    p_1073742004[p_1073742004_Idx] = addInt(p_1073742004[p_1073742004_Idx], 1);
    if (((b_1073742006 & 128) == 0)) {
    break BeforeRet;
    }
    
    raiseException({message: makeNimstrLit("Malformed Varint"), parent: null, m_type: NTI33555112, name: null, trace: [], up: null}, "Exception");
  } while (false);

  return result_1073742005;

}

function decodeObject_486539761(buffer_486539762, p_486539763, p_486539763_Idx, size_486539764) {
  var result_486539765 = null;

    result_486539765 = {};
    var endOffset_486539766 = addInt(p_486539763[p_486539763_Idx], size_486539764);
    Label1: do {
        Label2: while (true) {
        if (!(p_486539763[p_486539763_Idx] < endOffset_486539766)) break Label2;
          var keyPrefix_486539767 = readVaruint32_1073742002(buffer_486539762, p_486539763, p_486539763_Idx);
          var keySize_486539772 = (keyPrefix_486539767 >>> 3);
          var keyTag_486539773 = (keyPrefix_486539767 & 7);
          if (!((keyTag_486539773 == 0))) {
          failedAssertImpl_218103864(makeNimstrLit("nim_bipf_purejs.nim(241, 12) `keyTag == BipfTag.STRING` "));
          }
          
          Label3: do {
            var resultHEX60gensym54_486539784 = buffer_486539762.toString('utf8', p_486539763[p_486539763_Idx], addInt(p_486539763[p_486539763_Idx], keySize_486539772));
            p_486539763[p_486539763_Idx] = addInt(p_486539763[p_486539763_Idx], keySize_486539772);
          } while (false);
          var key_486539789 = resultHEX60gensym54_486539784;
          var value_486539790 = decodeNext_486539758(buffer_486539762, p_486539763, p_486539763_Idx);
          result_486539765[key_486539789] = value_486539790;
        }
    } while (false);

  return result_486539765;

}

function newSeq_486539805(len_486539807) {
  var result_486539808 = [];

    result_486539808 = new Array(len_486539807); for (var i = 0 ; i < len_486539807 ; ++i) { result_486539808[i] = null; }
  return result_486539808;

}

function decodeArray_486539796(buffer_486539797, p_486539798, p_486539798_Idx, size_486539799) {
  var result_486539800 = [];

    result_486539800 = nimCopy(null, newSeq_486539805(0), NTI486539539);
    var endOffset_486539822 = addInt(p_486539798[p_486539798_Idx], size_486539799);
    Label1: do {
        Label2: while (true) {
        if (!(p_486539798[p_486539798_Idx] < endOffset_486539822)) break Label2;
          result_486539800.push(decodeNext_486539758(buffer_486539797, p_486539798, p_486539798_Idx));;
        }
    } while (false);

  return result_486539800;

}

function decodeNext_486539758(buffer_486539759, p_486539760, p_486539760_Idx) {
    var Temporary1;
      var Temporary3;
      var Temporary6;
        var Temporary7;
      var Temporary8;

  var result_486539830 = null;

  BeforeRet: do {
    var prefix_486539831 = readVaruint32_1073742002(buffer_486539759, p_486539760, p_486539760_Idx);
    var size_486539836 = (prefix_486539831 >>> 3);
    var tag_486539837 = (prefix_486539831 & 7);
    switch (tag_486539837) {
    case 5:
      Temporary1 = decodeObject_486539761(buffer_486539759, p_486539760, p_486539760_Idx, size_486539836);
      break;
    case 4:
      Temporary1 = (decodeArray_486539796(buffer_486539759, p_486539760, p_486539760_Idx, size_486539836));
      break;
    case 0:
      Label2: do {
        var resultHEX60gensym56_486539845 = buffer_486539759.toString('utf8', p_486539760[p_486539760_Idx], addInt(p_486539760[p_486539760_Idx], size_486539836));
        p_486539760[p_486539760_Idx] = addInt(p_486539760[p_486539760_Idx], size_486539836);
      } while (false);
      Temporary1 = (resultHEX60gensym56_486539845);
      break;
    case 1:
      if ((size_486539836 == 0)) {
      Temporary3 = Buffer.allocUnsafe(0);
      }
      else {
        p_486539760[p_486539760_Idx] = addInt(p_486539760[p_486539760_Idx], size_486539836);
      Temporary3 = new Uint8Array(buffer_486539759.buffer, subInt(p_486539760[p_486539760_Idx], size_486539836), size_486539836);
      }
      
      Temporary1 = Buffer.from(Temporary3);
      break;
    case 2:
      Label4: do {
        var resultHEX60gensym59_486539858 = buffer_486539759.readInt32LE(p_486539760[p_486539760_Idx]);
        p_486539760[p_486539760_Idx] = addInt(p_486539760[p_486539760_Idx], 4);
      } while (false);
      Temporary1 = (resultHEX60gensym59_486539858);
      break;
    case 3:
      Label5: do {
        var resultHEX60gensym60_486539867 = buffer_486539759.readDoubleLE(p_486539760[p_486539760_Idx]);
        p_486539760[p_486539760_Idx] = addInt(p_486539760[p_486539760_Idx], 8);
      } while (false);
      Temporary1 = (resultHEX60gensym60_486539867);
      break;
    case 6:
      if ((size_486539836 == 0)) {
      Temporary6 = null;
      }
      else {
        var v_486539875 = (buffer_486539759[p_486539760[p_486539760_Idx]] == 1);
        p_486539760[p_486539760_Idx] = addInt(p_486539760[p_486539760_Idx], 1);
        if (v_486539875) {
        Temporary7 = true;
        }
        else {
        Temporary7 = false;
        }
        
      Temporary6 = Temporary7;
      }
      
      Temporary1 = Temporary6;
      break;
    case 7:
      if ((size_486539836 == 0)) {
      Temporary8 = Buffer.allocUnsafe(0);
      }
      else {
        p_486539760[p_486539760_Idx] = addInt(p_486539760[p_486539760_Idx], size_486539836);
      Temporary8 = new Uint8Array(buffer_486539759.buffer, subInt(p_486539760[p_486539760_Idx], size_486539836), size_486539836);
      }
      
      Temporary1 = Buffer.from(Temporary8);
      break;
    }
    result_486539830 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_486539830;

}

function decode_486539893(buffer_486539894, start_486539895) {
  var result_486539896 = null;

    var p_486539897 = [start_486539895];
    result_486539896 = decodeNext_486539758(buffer_486539894, p_486539897, 0);

  return result_486539896;

}

function seekKey_486539898(buffer_486539899, start_486539900, key_486539901) {
  var result_486539902 = 0;

  BeforeRet: do {
    var p_486539903 = [start_486539900];
    var prefix_486539904 = readVaruint32_1073742002(buffer_486539899, p_486539903, 0);
    var tag_486539905 = (prefix_486539904 & 7);
    if (!((tag_486539905 == 5))) {
    result_486539902 = -1;
    break BeforeRet;
    }
    
    var size_486539914 = (prefix_486539904 >>> 3);
    var endOffset_486539915 = addInt(p_486539903[0], size_486539914);
    Label1: do {
        Label2: while (true) {
        if (!(p_486539903[0] < endOffset_486539915)) break Label2;
          var keyPrefix_486539916 = readVaruint32_1073742002(buffer_486539899, p_486539903, 0);
          var keySize_486539921 = (keyPrefix_486539916 >>> 3);
          var keyTag_486539922 = (keyPrefix_486539916 & 7);
          Label3: do {
            var resultHEX60gensym65_486539924 = buffer_486539899.toString('utf8', p_486539903[0], addInt(p_486539903[0], keySize_486539921));
            p_486539903[0] = addInt(p_486539903[0], keySize_486539921);
          } while (false);
          var keyName_486539929 = resultHEX60gensym65_486539924;
          if ((keyName_486539929 == key_486539901)) {
          result_486539902 = p_486539903[0];
          break BeforeRet;
          }
          
          var valuePrefix_486539930 = readVaruint32_1073742002(buffer_486539899, p_486539903, 0);
          var valueSize_486539935 = (valuePrefix_486539930 >>> 3);
          p_486539903[0] = addInt(p_486539903[0], valueSize_486539935);
        }
    } while (false);
    result_486539902 = -1;
    break BeforeRet;
  } while (false);

  return result_486539902;

}

function seekPath_486539940(buffer_486539941, start_486539942, target_486539943, targetStart_486539944) {
  var result_486539945 = 0;

  BeforeRet: do {
    var p_486539946 = start_486539942;
    var ary_486539947 = decode_486539893(target_486539943, targetStart_486539944);
    Label1: do {
      var i_486539955 = 0;
      var colontmp__486540084 = 0;
      colontmp__486540084 = toInt32_486539291(ary_486539947.length);
      var res_486540086 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_486540086 < colontmp__486540084)) break Label3;
            i_486539955 = res_486540086;
            var key_486539956 = ary_486539947[((i_486539955) | 0)];
            p_486539946 = seekKey_486539898(buffer_486539941, p_486539946, toNativeString_486539272(key_486539956));
            if ((p_486539946 == -1)) {
            result_486539945 = -1;
            break BeforeRet;
            }
            
            res_486540086 = addInt(res_486540086, 1);
          }
      } while (false);
    } while (false);
    result_486539945 = p_486539946;
    break BeforeRet;
  } while (false);

  return result_486539945;

}
  var Temporary2;
  if ((module.exports == null)) Temporary2 = true; else {    Temporary2 = (module.exports == undefined);  }if (Temporary2) {
module.exports = {};
}

module.exports["serialize"] = serialize_486539644;
module.exports["encodingLength"] = encodingLength_486539736;
module.exports["encode"] = encode_486539741;
module.exports["decode"] = decode_486539893;
module.exports["seekPath"] = seekPath_486539940;
module.exports["allocAndEncode"] = serialize_486539644;

function sysFatal_33557003(message_33557006) {
    raiseException({message: nimCopy(null, message_33557006, NTI33554439), m_type: NTI33555142, parent: null, name: null, trace: [], up: null}, "NilAccessDefect");

  
}

function chckNilDisp(p_33557002, p_33557002_Idx) {
    if ((p_33557002 == null && p_33557002_Idx == 0)) {
    sysFatal_33557003(makeNimstrLit("cannot dispatch; dispatcher is nil"));
    }
    

  
}

function nsuToLowerAsciiChar(c_637534276) {
  var result_637534277 = 0;

    if ((ConstSet31[c_637534276] != undefined)) {
    result_637534277 = (c_637534276 ^ 32);
    }
    else {
      result_637534277 = c_637534276;
    }
    

  return result_637534277;

}

function nsuIntToStr(x_637534997, minchars_637534998) {
  var result_637534999 = [];

    result_637534999 = nimCopy(null, HEX24_335544323(absInt(x_637534997)), NTI33554439);
    Label1: do {
      var i_637535004 = 0;
      var colontmp__486540101 = 0;
      colontmp__486540101 = subInt(minchars_637534998, (result_637534999).length);
      var res_486540102 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_486540102 <= colontmp__486540101)) break Label3;
            i_637535004 = res_486540102;
            result_637534999 = nimCopy(null, [48].concat(result_637534999 || []), NTI33554439);
            res_486540102 = addInt(res_486540102, 1);
          }
      } while (false);
    } while (false);
    if ((x_637534997 < 0)) {
    result_637534999 = nimCopy(null, [45].concat(result_637534999 || []), NTI33554439);
    }
    

  return result_637534999;

}

function monthday_654312587(dt_654312588) {
  var result_654312589 = 0;

    if (!(!((dt_654312588.monthdayZero == 0)))) {
    failedAssertImpl_218103864(makeNimstrLit("times.nim(997, 28) `dt.monthdayZero != 0` Uninitialized datetime"));
    }
    
    result_654312589 = dt_654312588.monthdayZero;

  return result_654312589;

}

function ntgetDateStr(dt_654312938) {
  var result_654312939 = [];

    if (!(!((dt_654312938.monthdayZero == 0)))) {
    failedAssertImpl_218103864(makeNimstrLit("times.nim(1423, 29) `dt.monthdayZero != 0` Uninitialized datetime"));
    }
    
    result_654312939 = nimCopy(null, (HEX24_335544323(dt_654312938.year) || []).concat([45],nsuIntToStr(dt_654312938.monthZero, 2) || [],[45],nsuIntToStr(monthday_654312587(dt_654312938), 2) || []), NTI33554439);

  return result_654312939;

}

function HEX2B_654311442(a_654311443, b_654311444) {
  var result_654311445 = 0;

    result_654311445 = (a_654311443 + b_654311444);

  return result_654311445;

}

function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI33555121, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function HEX2A_654311434(a_654311435, b_654311436) {
  var result_654311437 = 0;

    result_654311437 = (a_654311435 * b_654311436);

  return result_654311437;

}

function convert_654311835(unitFrom_654311837, unitTo_654311838, quantity_654311839) {
    var Temporary1;

  var result_654311840 = 0;

    if ((unitFrom_654311837 < unitTo_654311838)) {
    Temporary1 = divInt(quantity_654311839, divInt(unitWeights_654311570[unitTo_654311838], unitWeights_654311570[unitFrom_654311837]));
    }
    else {
    Temporary1 = HEX2A_654311434(divInt(unitWeights_654311570[unitFrom_654311837], unitWeights_654311570[unitTo_654311838]), quantity_654311839);
    }
    
    result_654311840 = Temporary1;

  return result_654311840;

}

function convert_654311902(unitFrom_654311904, unitTo_654311905, quantity_654311906) {
    var Temporary1;

  var result_654311907 = 0;

    if ((unitFrom_654311904 < unitTo_654311905)) {
    Temporary1 = divInt(quantity_654311906, divInt(unitWeights_654311570[unitTo_654311905], unitWeights_654311570[unitFrom_654311904]));
    }
    else {
    Temporary1 = HEX2A_654311434(divInt(unitWeights_654311570[unitFrom_654311904], unitWeights_654311570[unitTo_654311905]), quantity_654311906);
    }
    
    result_654311907 = Temporary1;

  return result_654311907;

}

function normalize_654312463(seconds_654312465, nanoseconds_654312466) {
  var result_654312467 = ({seconds: 0, nanosecond: 0});

    result_654312467.seconds = HEX2B_654311442(seconds_654312465, convert_654311835(0, 3, nanoseconds_654312466));
    var nanosecond_654312478 = modInt(nanoseconds_654312466, convert_654311902(3, 0, 1));
    if ((nanosecond_654312478 < 0)) {
    nanosecond_654312478 = addInt(nanosecond_654312478, convert_654311902(3, 0, 1));
    result_654312467.seconds = subInt(result_654312467.seconds, 1);
    }
    
    result_654312467.nanosecond = nanosecond_654312478;

  return result_654312467;

}

function HEX2D_654311450(a_654311451, b_654311452) {
  var result_654311453 = 0;

    result_654311453 = (a_654311451 - b_654311452);

  return result_654311453;

}

function HEX2D_654311454(a_654311455, b_654311456) {
  var result_654311457 = 0;

    result_654311457 = (a_654311455 - b_654311456);

  return result_654311457;

}

function ntSubTime(a_654312493, b_654312494) {
  var result_654312495 = ({seconds: 0, nanosecond: 0});

    result_654312495 = nimCopy(result_654312495, normalize_654312463(HEX2D_654311450(a_654312493.seconds, b_654312494.seconds), HEX2D_654311454(a_654312493.nanosecond, b_654312494.nanosecond)), NTI654311454);

  return result_654312495;

}

function normalize_654311892(seconds_654311894, nanoseconds_654311895) {
  var result_654311896 = ({seconds: 0, nanosecond: 0});

    result_654311896.seconds = HEX2B_654311442(seconds_654311894, convert_654311835(0, 3, nanoseconds_654311895));
    var nanosecond_654311912 = modInt(nanoseconds_654311895, convert_654311902(3, 0, 1));
    if ((nanosecond_654311912 < 0)) {
    nanosecond_654311912 = addInt(nanosecond_654311912, convert_654311902(3, 0, 1));
    result_654311896.seconds = subInt(result_654311896.seconds, 1);
    }
    
    result_654311896.nanosecond = nanosecond_654311912;

  return result_654311896;

}

function initDuration_654311825(nanoseconds_654311826, microseconds_654311827, milliseconds_654311828, seconds_654311829, minutes_654311830, hours_654311831, days_654311832, weeks_654311833) {
  var result_654311834 = ({seconds: 0, nanosecond: 0});

    var seconds_654311880 = HEX2B_654311442(HEX2B_654311442(HEX2B_654311442(HEX2B_654311442(HEX2B_654311442(HEX2B_654311442(HEX2B_654311442(convert_654311835(7, 3, weeks_654311833), convert_654311835(6, 3, days_654311832)), convert_654311835(4, 3, minutes_654311830)), convert_654311835(5, 3, hours_654311831)), convert_654311835(3, 3, seconds_654311829)), convert_654311835(2, 3, milliseconds_654311828)), convert_654311835(1, 3, microseconds_654311827)), convert_654311835(0, 3, nanoseconds_654311826));
    var nanoseconds_654311891 = HEX2B_654311442(HEX2B_654311442(convert_654311835(2, 0, modInt(milliseconds_654311828, 1000)), convert_654311835(1, 0, modInt(microseconds_654311827, 1000000))), modInt(nanoseconds_654311826, 1000000000));
    result_654311834 = nimCopy(result_654311834, normalize_654311892(seconds_654311880, nanoseconds_654311891), NTI654311456);

  return result_654311834;

}

function floorDiv_654311717(x_654311719, y_654311720) {
      var Temporary1;
      var Temporary2;
        var Temporary3;

  var result_654311721 = 0;

    result_654311721 = Math.trunc(x_654311719 / y_654311720);
    var r_654311722 = Math.trunc(x_654311719 % y_654311720);
      if (!(0 < r_654311722)) Temporary2 = false; else {        Temporary2 = (y_654311720 < 0);      }      if (Temporary2) Temporary1 = true; else {        if (!(r_654311722 < 0)) Temporary3 = false; else {          Temporary3 = (0 < y_654311720);        }        Temporary1 = Temporary3;      }    if (Temporary1) {
    result_654311721 -= 1;
    }
    

  return result_654311721;

}

function inc_654311465(a_654311466, a_654311466_Idx, b_654311467) {
    a_654311466[a_654311466_Idx] += b_654311467;

  
}

function fromEpochDay_654311650(epochday_654311651) {
    var Temporary1;
    var Temporary2;

  var result_654311655 = {Field0: 0, Field1: 0, Field2: 0};

  BeforeRet: do {
    var z_654311656 = [epochday_654311651];
    inc_654311465(z_654311656, 0, 719468);
    if ((0 <= z_654311656[0])) {
    Temporary1 = z_654311656[0];
    }
    else {
    Temporary1 = HEX2D_654311450(z_654311656[0], 146096);
    }
    
    var era_654311657 = divInt(Temporary1, 146097);
    var doe_654311658 = HEX2D_654311450(z_654311656[0], HEX2A_654311434(era_654311657, 146097));
    var yoe_654311659 = divInt(HEX2D_654311450(HEX2B_654311442(HEX2D_654311450(doe_654311658, divInt(doe_654311658, 1460)), divInt(doe_654311658, 36524)), divInt(doe_654311658, 146096)), 365);
    var y_654311660 = HEX2B_654311442(yoe_654311659, HEX2A_654311434(era_654311657, 400));
    var doy_654311661 = HEX2D_654311450(doe_654311658, HEX2D_654311450(HEX2B_654311442(HEX2A_654311434(365, yoe_654311659), divInt(yoe_654311659, 4)), divInt(yoe_654311659, 100)));
    var mp_654311662 = divInt(HEX2B_654311442(HEX2A_654311434(5, doy_654311661), 2), 153);
    var d_654311663 = HEX2B_654311442(HEX2D_654311450(doy_654311661, divInt(HEX2B_654311442(HEX2A_654311434(153, mp_654311662), 2), 5)), 1);
    if ((mp_654311662 < 10)) {
    Temporary2 = 3;
    }
    else {
    Temporary2 = -9;
    }
    
    var m_654311664 = HEX2B_654311442(mp_654311662, Temporary2);
    var colontmp__486540105 = d_654311663;
    var colontmp__486540106 = m_654311664;
    var colontmp__486540107 = HEX2B_654311442(y_654311660, ((m_654311664 <= 2) ? 1 : 0));
    result_654311655 = nimCopy(result_654311655, {Field0: nimCopy(null, colontmp__486540105, NTI654311448), Field1: colontmp__486540106, Field2: colontmp__486540107}, NTI654311615);
    break BeforeRet;
  } while (false);

  return result_654311655;

}

function isLeapYear_654311593(year_654311594) {
    var Temporary1;
      var Temporary2;

  var result_654311595 = false;

    if (!(modInt(year_654311594, 4) == 0)) Temporary1 = false; else {      if (!((modInt(year_654311594, 100) == 0))) Temporary2 = true; else {        Temporary2 = (modInt(year_654311594, 400) == 0);      }      Temporary1 = Temporary2;    }    result_654311595 = Temporary1;

  return result_654311595;

}

function getDaysInMonth_654311596(month_654311597, year_654311598) {
      var Temporary1;

  var result_654311599 = 0;

    switch (month_654311597) {
    case 2:
      if (isLeapYear_654311593(year_654311598)) {
      Temporary1 = 29;
      }
      else {
      Temporary1 = 28;
      }
      
      result_654311599 = Temporary1;
      break;
    case 4:
    case 6:
    case 9:
    case 11:
      result_654311599 = 30;
      break;
    default: 
      result_654311599 = 31;
      break;
    }

  return result_654311599;

}

function assertValidDate_654311600(monthday_654311601, month_654311602, year_654311603) {
    if (!((monthday_654311601 <= getDaysInMonth_654311596(month_654311602, year_654311603)))) {
    failedAssertImpl_218103864((makeNimstrLit("times.nim(450, 10) `monthday <= getDaysInMonth(month, year)` ") || []).concat(HEX24_335544323(year_654311603) || [],makeNimstrLit("-") || [],nsuIntToStr(month_654311602, 2) || [],makeNimstrLit("-") || [],HEX24_335544323(monthday_654311601) || [],makeNimstrLit(" is not a valid date") || []));
    }
    

  
}

function HEX2A_654311438(a_654311439, b_654311440) {
  var result_654311441 = 0;

    result_654311441 = (a_654311439 * b_654311440);

  return result_654311441;

}

function HEX2B_654311446(a_654311447, b_654311448) {
  var result_654311449 = 0;

    result_654311449 = (a_654311447 + b_654311448);

  return result_654311449;

}

function toEpochDay_654311622(monthday_654311623, month_654311624, year_654311625) {
    var Temporary1;
    var Temporary2;

  var result_654311626 = 0;

  BeforeRet: do {
    assertValidDate_654311600(monthday_654311623, month_654311624, year_654311625);
    var colontmp__486540108 = {Field0: year_654311625, Field1: month_654311624, Field2: monthday_654311623};
    var y_654311630 = colontmp__486540108["Field0"];
    var m_654311631 = colontmp__486540108["Field1"];
    var d_654311632 = colontmp__486540108["Field2"];
    if ((m_654311631 <= 2)) {
    y_654311630 = subInt(y_654311630, 1);
    }
    
    if ((0 <= y_654311630)) {
    Temporary1 = y_654311630;
    }
    else {
    Temporary1 = HEX2D_654311454(y_654311630, 399);
    }
    
    var era_654311637 = divInt(Temporary1, 400);
    var yoe_654311638 = HEX2D_654311454(y_654311630, HEX2A_654311438(era_654311637, 400));
    if ((2 < m_654311631)) {
    Temporary2 = -3;
    }
    else {
    Temporary2 = 9;
    }
    
    var doy_654311639 = HEX2D_654311454(HEX2B_654311446(divInt(HEX2B_654311446(HEX2A_654311438(153, HEX2B_654311446(m_654311631, Temporary2)), 2), 5), d_654311632), 1);
    var doe_654311640 = HEX2B_654311446(HEX2D_654311454(HEX2B_654311446(HEX2A_654311438(yoe_654311638, 365), divInt(yoe_654311638, 4)), divInt(yoe_654311638, 100)), doy_654311639);
    result_654311626 = HEX2D_654311454(HEX2B_654311446(HEX2A_654311438(era_654311637, 146097), doe_654311640), 719468);
    break BeforeRet;
  } while (false);

  return result_654311626;

}

function getDayOfWeek_654311711(monthday_654311712, month_654311713, year_654311714) {
    var Temporary1;

  var result_654311715 = 0;

    assertValidDate_654311600(monthday_654311712, month_654311713, year_654311714);
    var days_654311716 = HEX2D_654311450(toEpochDay_654311622(monthday_654311712, month_654311713, year_654311714), 3);
    var weeks_654311727 = floorDiv_654311717(days_654311716, 7);
    var wd_654311728 = HEX2D_654311450(days_654311716, HEX2A_654311434(weeks_654311727, 7));
    if ((wd_654311728 == 0)) {
    Temporary1 = 6;
    }
    else {
    Temporary1 = HEX2D_654311450(wd_654311728, 1);
    }
    
    result_654311715 = Temporary1;

  return result_654311715;

}

function getDayOfYear_654311686(monthday_654311687, month_654311688, year_654311689) {
  var result_654311690 = 0;

    assertValidDate_654311600(monthday_654311687, month_654311688, year_654311689);
    if (isLeapYear_654311593(year_654311689)) {
    result_654311690 = HEX2D_654311454(HEX2B_654311446(daysUntilMonthLeap_654311692[(month_654311688) - (1)], monthday_654311687), 1);
    }
    else {
      result_654311690 = HEX2D_654311454(HEX2B_654311446(daysUntilMonth_654311691[(month_654311688) - (1)], monthday_654311687), 1);
    }
    

  return result_654311690;

}

function initDateTime_654312694(zt_654312695, zone_654312696) {
  var result_654312697 = ({m_type: NTI654311455, nanosecond: 0, second: 0, minute: 0, hour: 0, monthdayZero: 0, monthZero: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0});

    var adjTime_654312698 = ntSubTime(zt_654312695.time, initDuration_654311825(0, 0, 0, zt_654312695.utcOffset, 0, 0, 0, 0));
    var s_654312699 = adjTime_654312698.seconds;
    var epochday_654312704 = floorDiv_654311717(s_654312699, 86400);
    var rem_654312705 = HEX2D_654311450(s_654312699, HEX2A_654311434(epochday_654312704, 86400));
    var hour_654312706 = divInt(rem_654312705, 3600);
    rem_654312705 = HEX2D_654311450(rem_654312705, HEX2A_654311434(hour_654312706, 3600));
    var minute_654312707 = divInt(rem_654312705, 60);
    rem_654312705 = HEX2D_654311450(rem_654312705, HEX2A_654311434(minute_654312707, 60));
    var second_654312708 = rem_654312705;
    var colontmp__486540104 = fromEpochDay_654311650(epochday_654312704);
    var d_654312709 = colontmp__486540104["Field0"];
    var m_654312710 = colontmp__486540104["Field1"];
    var y_654312711 = colontmp__486540104["Field2"];
    result_654312697 = nimCopy(result_654312697, {year: y_654312711, monthZero: ((m_654312710) | 0), monthdayZero: d_654312709, hour: nimCopy(null, hour_654312706, NTI654311449), minute: nimCopy(null, minute_654312707, NTI654311450), second: nimCopy(null, second_654312708, NTI654311451), nanosecond: nimCopy(null, zt_654312695.time.nanosecond, NTI654311453), weekday: getDayOfWeek_654311711(d_654312709, m_654312710, y_654312711), yearday: getDayOfYear_654311686(d_654312709, m_654312710, y_654312711), isDst: zt_654312695.isDst, timezone: zone_654312696, utcOffset: zt_654312695.utcOffset, m_type: NTI654311455}, NTI654311455);

  return result_654312697;

}

function zonedTimeFromTime_654312751(zone_654312752, time_654312753) {
  var result_654312754 = ({time: ({seconds: 0, nanosecond: 0}), utcOffset: 0, isDst: false});

    result_654312754 = nimCopy(result_654312754, zone_654312752.zonedTimeFromTimeImpl(time_654312753), NTI654311461);

  return result_654312754;

}

function inZone_654312791(time_654312792, zone_654312793) {
  var result_654312794 = ({m_type: NTI654311455, nanosecond: 0, second: 0, minute: 0, hour: 0, monthdayZero: 0, monthZero: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0});

    result_654312794 = nimCopy(result_654312794, initDateTime_654312694(zonedTimeFromTime_654312751(zone_654312793, time_654312792), zone_654312793), NTI654311455);

  return result_654312794;

}

function newTimezone_654312721(name_654312722, zonedTimeFromTimeImpl_654312725, zonedTimeFromAdjTimeImpl_654312728) {
  var result_654312729 = null;

    result_654312729 = {name: nimCopy(null, name_654312722, NTI33554439), zonedTimeFromTimeImpl: zonedTimeFromTimeImpl_654312725, zonedTimeFromAdjTimeImpl: zonedTimeFromAdjTimeImpl_654312728};

  return result_654312729;

}

function localZonedTimeFromTime_654312809(time_654312810) {
  var result_654312811 = ({time: ({seconds: 0, nanosecond: 0}), utcOffset: 0, isDst: false});

    var jsDate_654312815 = new Date(HEX2A_654311434(time_654312810.seconds, 1000));
    var offset_654312816 = HEX2A_654311438(jsDate_654312815.getTimezoneOffset(), 60);
    result_654312811.time = nimCopy(result_654312811.time, time_654312810, NTI654311454);
    result_654312811.utcOffset = offset_654312816;
    result_654312811.isDst = false;

  return result_654312811;

}

function contains_654312832(s_654312836, value_654312837) {
  var result_654312838 = false;

    result_654312838 = ((s_654312836.a <= value_654312837) && (value_654312837 <= s_654312836.b));

  return result_654312838;

}

function HEX2EHEX2E_956302163(a_956302166, b_956302167) {
  var result_956302168 = ({a: 0, b: 0});

    result_956302168 = nimCopy(result_956302168, {a: a_956302166, b: b_956302167}, NTI704643133);

  return result_956302168;

}

function ntAddTime(a_654312457, b_654312458) {
  var result_654312459 = ({seconds: 0, nanosecond: 0});

    result_654312459 = nimCopy(result_654312459, normalize_654312463(HEX2B_654311442(a_654312457.seconds, b_654312458.seconds), HEX2B_654311446(a_654312457.nanosecond, b_654312458.nanosecond)), NTI654311454);

  return result_654312459;

}

function localZonedTimeFromAdjTime_654312817(adjTime_654312818) {
  var result_654312819 = ({time: ({seconds: 0, nanosecond: 0}), utcOffset: 0, isDst: false});

    var utcDate_654312823 = new Date(HEX2A_654311434(adjTime_654312818.seconds, 1000));
    var localDate_654312824 = new Date(utcDate_654312823.getUTCFullYear(),utcDate_654312823.getUTCMonth(),utcDate_654312823.getUTCDate(),utcDate_654312823.getUTCHours(),utcDate_654312823.getUTCMinutes(),utcDate_654312823.getUTCSeconds(),0);
    if (contains_654312832(HEX2EHEX2E_956302163(0, 99), utcDate_654312823.getUTCFullYear())) {
    localDate_654312824.setFullYear(utcDate_654312823.getUTCFullYear());
    }
    
    result_654312819.utcOffset = HEX2A_654311438(localDate_654312824.getTimezoneOffset(), 60);
    result_654312819.time = nimCopy(result_654312819.time, ntAddTime(adjTime_654312818, initDuration_654311825(0, 0, 0, result_654312819.utcOffset, 0, 0, 0, 0)), NTI654311454);
    result_654312819.isDst = false;

  return result_654312819;

}

function local_654312858() {
  var result_654312859 = null;

    if ((localInstance_654312843[0] == null)) {
    localInstance_654312843[0] = newTimezone_654312721(makeNimstrLit("LOCAL"), localZonedTimeFromTime_654312809, localZonedTimeFromAdjTime_654312817);
    }
    
    result_654312859 = localInstance_654312843[0];

  return result_654312859;

}

function local_654312872(t_654312873) {
  var result_654312874 = ({m_type: NTI654311455, nanosecond: 0, second: 0, minute: 0, hour: 0, monthdayZero: 0, monthZero: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0});

    result_654312874 = nimCopy(result_654312874, inZone_654312791(t_654312873, local_654312858()), NTI654311455);

  return result_654312874;

}

function initTime_654312350(unix_654312351, nanosecond_654312352) {
  var result_654312353 = ({seconds: 0, nanosecond: 0});

    result_654312353.seconds = unix_654312351;
    result_654312353.nanosecond = nanosecond_654312352;

  return result_654312353;

}

function getTime_654312416() {
  var result_654312417 = ({seconds: 0, nanosecond: 0});

    var millis_654312418 = new Date().getTime();
    var seconds_654312424 = convert_654311902(2, 3, millis_654312418);
    var nanos_654312435 = convert_654311902(2, 0, modInt(millis_654312418, convert_654311902(3, 2, 1)));
    result_654312417 = nimCopy(result_654312417, initTime_654312350(seconds_654312424, nanos_654312435), NTI654311454);

  return result_654312417;

}

function now_654312875() {
  var result_654312876 = ({m_type: NTI654311455, nanosecond: 0, second: 0, minute: 0, hour: 0, monthdayZero: 0, monthZero: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0});

    result_654312876 = nimCopy(result_654312876, local_654312872(getTime_654312416()), NTI654311455);

  return result_654312876;

}

function ntgetClockStr(dt_654312946) {
  var result_654312947 = [];

    if (!(!((dt_654312946.monthdayZero == 0)))) {
    failedAssertImpl_218103864(makeNimstrLit("times.nim(1431, 29) `dt.monthdayZero != 0` Uninitialized datetime"));
    }
    
    result_654312947 = nimCopy(null, (nsuIntToStr(dt_654312946.hour, 2) || []).concat([58],nsuIntToStr(dt_654312946.minute, 2) || [],[58],nsuIntToStr(dt_654312946.second, 2) || []), NTI33554439);

  return result_654312947;

}

function substituteLog_620757046(frmt_620757047, level_620757048, args_620757049) {
                  var Temporary8;

  var result_620757050 = [];

    var msgLen_620757051 = 0;
    Label1: do {
      var arg_620757055 = [];
      var i_486540093 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540093 < (args_620757049).length)) break Label3;
            arg_620757055 = args_620757049[i_486540093];
            msgLen_620757051 = addInt(msgLen_620757051, (arg_620757055).length);
            i_486540093 = addInt(i_486540093, 1);
          }
      } while (false);
    } while (false);
    result_620757050 = nimCopy(null, mnewString(0), NTI33554439);
    var i_620757060 = 0;
    Label4: do {
        Label5: while (true) {
        if (!(i_620757060 < (frmt_620757047).length)) break Label5;
          if (!((frmt_620757047[i_620757060] == 36))) {
          addChar(result_620757050, frmt_620757047[i_620757060]);;
          i_620757060 = addInt(i_620757060, 1);
          }
          else {
            i_620757060 = addInt(i_620757060, 1);
            var v_620757069 = [];
            var app_620757070 = [];
            Label6: do {
                Label7: while (true) {
                  if (!(i_620757060 < (frmt_620757047).length)) Temporary8 = false; else {                    Temporary8 = (ConstSet30[frmt_620757047[i_620757060]] != undefined);                  }                if (!Temporary8) break Label7;
                  addChar(v_620757069, nsuToLowerAsciiChar(frmt_620757047[i_620757060]));;
                  i_620757060 = addInt(i_620757060, 1);
                }
            } while (false);
            switch (toJSStr(v_620757069)) {
            case "date":
              result_620757050.push.apply(result_620757050, ntgetDateStr(now_654312875()));;
              break;
            case "time":
              result_620757050.push.apply(result_620757050, ntgetClockStr(now_654312875()));;
              break;
            case "datetime":
              result_620757050.push.apply(result_620757050, (ntgetDateStr(now_654312875()) || []).concat(makeNimstrLit("T") || [],ntgetClockStr(now_654312875()) || []));;
              break;
            case "app":
              result_620757050.push.apply(result_620757050, app_620757070);;
              break;
            case "appdir":
              break;
            case "appname":
              break;
            case "levelid":
              addChar(result_620757050, LevelNames_620757007[level_620757048][0]);;
              break;
            case "levelname":
              result_620757050.push.apply(result_620757050, LevelNames_620757007[level_620757048]);;
              break;
            default: 
              break;
            }
          }
          
        }
    } while (false);
    Label9: do {
      var arg_620757082 = [];
      var i_486540098 = 0;
      Label10: do {
          Label11: while (true) {
          if (!(i_486540098 < (args_620757049).length)) break Label11;
            arg_620757082 = args_620757049[i_486540098];
            result_620757050.push.apply(result_620757050, arg_620757082);;
            i_486540098 = addInt(i_486540098, 1);
          }
      } while (false);
    } while (false);

  return result_620757050;

}

function log_620757088(logger_620757089, level_620757090, args_620757091) {
      var Temporary1;

      if (!(level_620757017[0] <= level_620757090)) Temporary1 = false; else {        Temporary1 = (logger_620757089.levelThreshold <= level_620757090);      }    if (Temporary1) {
    var ln_620757100 = substituteLog_620757046(logger_620757089.fmtStr, level_620757090, args_620757091);
    var cln_620757101 = toJSStr(ln_620757100);
    switch (level_620757090) {
    case 1:
      console.debug(cln_620757101);
      break;
    case 2:
      console.info(cln_620757101);
      break;
    case 4:
      console.warn(cln_620757101);
      break;
    case 5:
      console.error(cln_620757101);
      break;
    default: 
      console.log(cln_620757101);
      break;
    }
    }
    

  
}

function log_620757083(logger_620757084, level_620757085, args_620757086) {
  
}

function log_620757087(logger_620757084, level_620757085, args_620757086) {
    chckNilDisp(logger_620757084);
    if (isObj(logger_620757084.m_type, NTI620757005)) {
    log_620757088(logger_620757084, level_620757085, args_620757086);
    }
    else {
    if (isObj(logger_620757084.m_type, NTI620757004)) {
    log_620757083(logger_620757084, level_620757085, args_620757086);
    }
    }

  
}
