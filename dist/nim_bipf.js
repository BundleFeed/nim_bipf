/* Generated by the Nim Compiler v1.6.12 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI704643133 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654311461 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654311441 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI654311615 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654311466 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654311448 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI654311456 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554460 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI654311454 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654311493 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI654311492 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI654311491 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI654311460 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI654311483 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654311452 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI654311442 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI654311471 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654311449 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI654311475 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654311450 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI654311479 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654311451 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI654311487 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654311453 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI654311455 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555142 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554464 = {size: 0,kind: 43,base: null,node: null,finalizer: null};
var NTI1358954499 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI486541059 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI486541056 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555132 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555129 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1174405125 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI33554437 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI33554459 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI33555188 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1056964689 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1056964681 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1224736771 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1224736772 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1174405123 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI620756995 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI620757004 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI620757005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI620757005 = {kind: 1, offset: "useStderr", len: 0, typ: NTI33554466, name: "useStderr", sons: null};
NTI620757005.node = NNI620757005;
var NNI620756995 = {kind: 2, offset: 0, typ: null, name: null, len: 8, sons: {"0": {kind: 1, offset: 0, typ: NTI620756995, name: "lvlAll", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI620756995, name: "lvlDebug", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI620756995, name: "lvlInfo", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI620756995, name: "lvlNotice", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI620756995, name: "lvlWarn", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI620756995, name: "lvlError", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI620756995, name: "lvlFatal", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI620756995, name: "lvlNone", len: 0, sons: null}}};
NTI620756995.node = NNI620756995;
var NNI620757004 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "levelThreshold", len: 0, typ: NTI620756995, name: "levelThreshold", sons: null}, 
{kind: 1, offset: "fmtStr", len: 0, typ: NTI33554439, name: "fmtStr", sons: null}]};
NTI620757004.node = NNI620757004;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI620757004.base = NTI33555083;
NTI620757005.base = NTI620757004;
var NNI1174405123 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1174405123.node = NNI1174405123;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
NTI33555112.base = NTI33555083;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;
NTI1174405123.base = NTI33555125;
var NNI1224736771 = {kind: 2, offset: 0, typ: null, name: null, len: 10, sons: {"0": {kind: 1, offset: 0, typ: NTI1224736771, name: "svtSTRING", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1224736771, name: "svtBUFFER", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1224736771, name: "svtINT", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1224736771, name: "svtDOUBLE", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1224736771, name: "svtARRAY", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1224736771, name: "svtOBJECT", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1224736771, name: "svtBOOLNULL", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI1224736771, name: "svtEXTENDED", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI1224736771, name: "svtBIPF_BUFFER", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI1224736771, name: "svtCSTRING", len: 0, sons: null}}};
NTI1224736771.node = NNI1224736771;
var NNI1056964689 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1056964689.node = NNI1056964689;
var NNI33555188 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555188.node = NNI33555188;
NTI33555188.base = NTI33555083;
NTI1056964689.base = NTI33555188;
NTI1056964681.base = NTI1056964689;
var NNI1174405125 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI1174405125, name: "TRUE", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1174405125, name: "FALSE", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1174405125, name: "NULL", len: 0, sons: null}}};
NTI1174405125.node = NNI1174405125;
var NNI1224736772 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "encodedSize", len: 0, typ: NTI33554456, name: "encodedSize", sons: null}, 
{kind: 3, offset: "tag", len: 10, typ: NTI1224736771, name: "tag", sons: [[setConstr(0), {kind: 1, offset: "str", len: 0, typ: NTI33554439, name: "str", sons: null}], 
[setConstr(9), {kind: 1, offset: "cstr", len: 0, typ: NTI33554440, name: "cstr", sons: null}], 
[setConstr(1, 8), {kind: 1, offset: "buf", len: 0, typ: NTI1056964681, name: "buf", sons: null}], 
[setConstr(2), {kind: 1, offset: "i", len: 0, typ: NTI33554459, name: "i", sons: null}], 
[setConstr(3), {kind: 1, offset: "d", len: 0, typ: NTI33554437, name: "d", sons: null}], 
[setConstr(6), {kind: 1, offset: "b", len: 0, typ: NTI1174405125, name: "b", sons: null}], 
[setConstr(7), {kind: 1, offset: "ext", len: 0, typ: NTI1056964681, name: "ext", sons: null}], 
[setConstr(4, 5), {kind: 1, offset: "size", len: 0, typ: NTI33554456, name: "size", sons: null}]]}]};
NTI1224736772.node = NNI1224736772;
var NNI33555129 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555129.node = NNI33555129;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555113.base = NTI33555112;
NTI33555129.base = NTI33555113;
var NNI33555132 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555132.node = NNI33555132;
NTI33555132.base = NTI33555113;
var NNI1358954499 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI1358954499, name: "MatchKey", len: 0, sons: null}}};
NTI1358954499.node = NNI1358954499;
var NNI486541059 = {kind: 3, offset: "opCode", len: 1, typ: NTI1358954499, name: "opCode", sons: [[setConstr(0), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "prefix", len: 0, typ: NTI33554464, name: "prefix", sons: null}, 
{kind: 1, offset: "key", len: 0, typ: NTI1056964681, name: "key", sons: null}]}]]};
NTI486541059.node = NNI486541059;
NTI486541056.base = NTI486541059;
var NNI33555142 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555142.node = NNI33555142;
NTI33555142.base = NTI33555113;
NTI654311453.base = NTI654311487;
NTI654311451.base = NTI654311479;
NTI654311450.base = NTI654311475;
NTI654311449.base = NTI654311471;
var NNI654311442 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI654311442, name: "Monday", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI654311442, name: "Tuesday", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI654311442, name: "Wednesday", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI654311442, name: "Thursday", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI654311442, name: "Friday", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI654311442, name: "Saturday", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI654311442, name: "Sunday", len: 0, sons: null}}};
NTI654311442.node = NNI654311442;
NTI654311452.base = NTI654311483;
var NNI654311491 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "zonedTimeFromTimeImpl", len: 0, typ: NTI654311492, name: "zonedTimeFromTimeImpl", sons: null}, 
{kind: 1, offset: "zonedTimeFromAdjTimeImpl", len: 0, typ: NTI654311493, name: "zonedTimeFromAdjTimeImpl", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554439, name: "name", sons: null}]};
NTI654311491.node = NNI654311491;
NTI654311460.base = NTI654311491;
var NNI654311455 = {kind: 2, len: 12, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "nanosecond", len: 0, typ: NTI654311453, name: "nanosecond", sons: null}, 
{kind: 1, offset: "second", len: 0, typ: NTI654311451, name: "second", sons: null}, 
{kind: 1, offset: "minute", len: 0, typ: NTI654311450, name: "minute", sons: null}, 
{kind: 1, offset: "hour", len: 0, typ: NTI654311449, name: "hour", sons: null}, 
{kind: 1, offset: "monthdayZero", len: 0, typ: NTI33554456, name: "monthdayZero", sons: null}, 
{kind: 1, offset: "monthZero", len: 0, typ: NTI33554456, name: "monthZero", sons: null}, 
{kind: 1, offset: "year", len: 0, typ: NTI33554456, name: "year", sons: null}, 
{kind: 1, offset: "weekday", len: 0, typ: NTI654311442, name: "weekday", sons: null}, 
{kind: 1, offset: "yearday", len: 0, typ: NTI654311452, name: "yearday", sons: null}, 
{kind: 1, offset: "isDst", len: 0, typ: NTI33554466, name: "isDst", sons: null}, 
{kind: 1, offset: "timezone", len: 0, typ: NTI654311460, name: "timezone", sons: null}, 
{kind: 1, offset: "utcOffset", len: 0, typ: NTI33554456, name: "utcOffset", sons: null}]};
NTI654311455.node = NNI654311455;
NTI654311455.base = NTI33555083;
var NNI654311454 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI33554460, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI654311453, name: "nanosecond", sons: null}]};
NTI654311454.node = NNI654311454;
var NNI654311456 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI33554460, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI654311453, name: "nanosecond", sons: null}]};
NTI654311456.node = NNI654311456;
NTI654311448.base = NTI654311466;
var NNI654311441 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI654311441, name: "January", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI654311441, name: "February", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI654311441, name: "March", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI654311441, name: "April", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI654311441, name: "May", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI654311441, name: "June", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI654311441, name: "July", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI654311441, name: "August", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI654311441, name: "September", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI654311441, name: "October", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI654311441, name: "November", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI654311441, name: "December", len: 0, sons: null}}};
NTI654311441.node = NNI654311441;
var NNI654311615 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI654311448, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI654311441, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554456, name: "Field2", sons: null}]};
NTI654311615.node = NNI654311615;
var NNI654311461 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "time", len: 0, typ: NTI654311454, name: "time", sons: null}, 
{kind: 1, offset: "utcOffset", len: 0, typ: NTI33554456, name: "utcOffset", sons: null}, 
{kind: 1, offset: "isDst", len: 0, typ: NTI33554466, name: "isDst", sons: null}]};
NTI654311461.node = NNI654311461;
var NNI704643133 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554456, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI704643133.node = NNI704643133;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    throw e_33556667;

  
}

function genericReset(x_33557171, ti_33557172) {
  var result_33557173 = null;

    result_33557173 = null;
    switch (ti_33557172.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (isFatPointer_33557131(ti_33557172)) {
              result_33557173 = [null, 0];
      
      }
      
      break;
    case 19:
            result_33557173 = {};
    
      break;
    case 18:
    case 17:
      if ((ti_33557172.kind == 17)) {
      result_33557173 = {m_type: ti_33557172};
      }
      else {
        result_33557173 = {};
      }
      
      break;
    case 24:
    case 27:
    case 28:
            result_33557173 = [];
    
      break;
    case 4:
    case 16:
            result_33557173 = new Array(x_33557171.length);
      for (var i = 0; i < x_33557171.length; ++i) {
        result_33557173[i] = genericReset(x_33557171[i], ti_33557172.base);
      }
    
      break;
    default: 
      break;
    }

  return result_33557173;

}
var ConstSet2 = setConstr(4, 5);

function raiseFieldError2(f_33556778, discVal_33556779) {
    raiseException({message: (f_33556778 || []).concat(discVal_33556779 || [],makeNimstrLit("\'") || []), parent: null, m_type: NTI33555129, name: null, trace: [], up: null}, "FieldDefect");

  
}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}

function nimBoolToStr(x_33556514) {
  var result_33556515 = [];

    if (x_33556514) {
    result_33556515 = nimCopy(null, makeNimstrLit("true"), NTI33554439);
    }
    else {
      result_33556515 = nimCopy(null, makeNimstrLit("false"), NTI33554439);
    }
    

  return result_33556515;

}

function reprDiscriminant(e_33557409, typ_33557410) {
    var Temporary1;

  var result_33557411 = [];

    switch (typ_33557410.kind) {
    case 14:
      Temporary1 = reprEnum(e_33557409, typ_33557410);
      break;
    case 1:
      Temporary1 = nimBoolToStr(!((e_33557409 == 0)));
      break;
    default: 
      Temporary1 = HEX24_335544323(e_33557409);
      break;
    }
    result_33557411 = nimCopy(null, Temporary1, NTI33554439);

  return result_33557411;

}
var ConstSet3 = setConstr(4, 5);
var ConstSet4 = setConstr(4, 5);
var ConstSet5 = setConstr(4, 5);
var ConstSet6 = setConstr(4, 5);
var ConstSet7 = setConstr(4, 5);
var ConstSet8 = setConstr(4, 5);
var ConstSet9 = setConstr(4, 5);
var ConstSet10 = setConstr(4, 5);
var ConstSet11 = setConstr(4, 5);
var ConstSet12 = setConstr(4, 5);
var ConstSet13 = setConstr(4, 5);
var ConstSet14 = setConstr(4, 5);
var ConstSet15 = setConstr(4, 5);
var ConstSet16 = setConstr(4, 5);
var ConstSet17 = setConstr(4, 5);
var ConstSet18 = setConstr(4, 5);
var ConstSet19 = setConstr(4, 5);
var ConstSet20 = setConstr(1, 8);
var ConstSet21 = setConstr(1, 8);
var ConstSet22 = setConstr(1, 8);
var ConstSet23 = setConstr(2);
var ConstSet24 = setConstr(3);
var ConstSet25 = setConstr(6);
var ConstSet26 = setConstr(0);
var ConstSet27 = setConstr(9);
var ConstSet28 = setConstr(7);
var ConstSet29 = setConstr(7);
var ConstSet30 = setConstr(7);
var ConstSet31 = setConstr(1, 8);
var ConstSet32 = setConstr(1, 8);
var ConstSet33 = setConstr(1, 8);

function cstrToNimstr(c_33556804) {
      var ln = c_33556804.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556804.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556804.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
var ConstSet34 = setConstr(4, 5);
var ConstSet35 = setConstr(4, 5);

function isObj(obj_33557238, subclass_33557239) {
  var result_33557240 = false;

  BeforeRet: do {
    var x_33557241 = obj_33557238;
    if ((x_33557241 == subclass_33557239)) {
    result_33557240 = true;
    break BeforeRet;
    }
    
    Label1: do {
        Label2: while (true) {
        if (!!((x_33557241 == subclass_33557239))) break Label2;
          if ((x_33557241 == null)) {
          result_33557240 = false;
          break BeforeRet;
          }
          
          x_33557241 = x_33557241.base;
        }
    } while (false);
    result_33557240 = true;
    break BeforeRet;
  } while (false);

  return result_33557240;

}

function addChar(x_33557255, c_33557256) {
    x_33557255.push(c_33557256);

  
}

function reprAny(p_33557559, p_33557559_Idx, typ_33557560) {
  var result_33557561 = [[]];

    var cl_33557562 = [({recDepth: 0, indent: 0})];
    initReprClosure_33557468(cl_33557562[0]);
    reprAux_33557470(result_33557561, 0, p_33557559, p_33557559_Idx, typ_33557560, cl_33557562[0]);

  return result_33557561[0];

}

function reraiseException() {
    if ((lastJSError == null)) {
    raiseException({message: makeNimstrLit("no exception to reraise"), parent: null, m_type: NTI33555132, name: null, trace: [], up: null}, "ReraiseDefect");
    }
    else {
      if ((excHandler == 0)) {
      if (isNimException_33556519()) {
      unhandledException(lastJSError);
      }
      
      }
      
      throw lastJSError;
    }
    

  
}
var ConstSet36 = setConstr(0);
var ConstSet37 = setConstr(0);

function nimMin(a_33556994, b_33556995) {
    var Temporary1;

  var result_33556996 = 0;

  BeforeRet: do {
    if ((a_33556994 <= b_33556995)) {
    Temporary1 = a_33556994;
    }
    else {
    Temporary1 = b_33556995;
    }
    
    result_33556996 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33556996;

}
var ConstSet38 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet39 = setConstr([65, 90]);
    var unitWeights_654311570 = [1, 1000, 1000000, 1000000000, 60000000000, 3600000000000, 86400000000000, 604800000000000];
    var daysUntilMonthLeap_654311690 = new Int32Array([0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335]);
      var daysUntilMonth_654311689 = new Int32Array([0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]);
              var LevelNames_620757007 = [makeNimstrLit("DEBUG"), makeNimstrLit("DEBUG"), makeNimstrLit("INFO"), makeNimstrLit("NOTICE"), makeNimstrLit("WARN"), makeNimstrLit("ERROR"), makeNimstrLit("FATAL"), makeNimstrLit("NONE")];
if (globalThis.utcInstance_654312810 === undefined) {
  globalThis.utcInstance_654312810 = [null];
}
if (globalThis.localInstance_654312811 === undefined) {
  globalThis.localInstance_654312811 = [null];
}
if (globalThis.level_620757017 === undefined) {
  globalThis.level_620757017 = [0];
}
if (globalThis.handlers_620757018 === undefined) {
  globalThis.handlers_620757018 = [[]];
}
var objectID_1090519202 = [0];

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function newConsoleLogger_620757102(levelThreshold_620757103, fmtStr_620757104, useStderr_620757105) {
  var result_620757106 = null;

    result_620757106 = ({m_type: NTI620757005, useStderr: false, levelThreshold: 0, fmtStr: []});
    result_620757106.fmtStr = nimCopy(null, fmtStr_620757104, NTI33554439);
    result_620757106.levelThreshold = levelThreshold_620757103;
    result_620757106.useStderr = useStderr_620757105;

  return result_620757106;

}

function addHandler_620757179(handler_620757180) {
    handlers_620757018[0].push(handler_620757180);;

  
}
var consoleLog_486539276 = [newConsoleLogger_620757102(0, makeNimstrLit("$levelname "), false)];
addHandler_620757179(consoleLog_486539276[0]);
var bipfBufferSymbol_486539358 = [Symbol("nim_bipf_buffer")];
var BipfBuffer = {};

function isBipfBuffer_486539360(s_486539361) {
  var result_486539362 = false;

    result_486539362 = ((typeof(s_486539361) == "object") && s_486539361.hasOwnProperty(bipfBufferSymbol_486539358[0]));

  return result_486539362;

}
BipfBuffer.isBipfBuffer = isBipfBuffer_486539360;
var lastObjectVisited_486540983 = [null];
var lastBufferProduced_486540984 = [null];
var jsObjectFactory_486541027 = [0];
var seekKeyCache_486541400 = [{}];
var typesConstants_486542076 = [{}];
typesConstants_486542076[0]["object"] = 5;
typesConstants_486542076[0]["array"] = 4;
typesConstants_486542076[0]["string"] = 0;
typesConstants_486542076[0]["buffer"] = 1;
typesConstants_486542076[0]["int"] = 2;
typesConstants_486542076[0]["double"] = 3;
typesConstants_486542076[0]["boolnull"] = 6;
typesConstants_486542076[0]["extended"] = 7;

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function HEX5BHEX5D_1224736967(s_1224736969, i_1224736970) {
  var result_1224736971 = null;
  var result_1224736971_Idx = 0;

    result_1224736971 = s_1224736969; result_1224736971_Idx = ((s_1224736969).length - i_1224736970);

  return [result_1224736971, result_1224736971_Idx];

}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = (old_251658421 + n_251658420));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_486542380 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486542380 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_486542380;
            result_251658417[result_251658417_Idx][(old_251658421 + iHEX60gensym4_251658435)] = x_251658418.charCodeAt((start_251658419 + iHEX60gensym4_251658435));
            i_486542380 += 1;
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function reprEnum(e_33557385, typ_33557386) {
  var result_33557387 = [];

    var tmp_33557388 = false;
    var item_33557389 = typ_33557386.node.sons[e_33557385];
    tmp_33557388 = item_33557389 !== undefined
    if (tmp_33557388) {
    result_33557387 = nimCopy(null, makeNimstrLit(item_33557389.name), NTI33554439);
    }
    else {
      result_33557387 = nimCopy(null, (HEX24_335544323(e_33557385) || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI33554439);
    }
    

  return result_33557387;

}

function startArray_1224737061(b_1224737062, b_1224737062_Idx) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;

    var vHEX60gensym10_1224737083 = {tag: 4, size: 0, encodedSize: 0, str: [], cstr: null, buf: null, i: 0, d: 0.0, b: 0, ext: null};
    if (((b_1224737062[b_1224737062_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737062[b_1224737062_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    b_1224737062[b_1224737062_Idx].pointers.push((b_1224737062[b_1224737062_Idx].stack).length);;
    Temporary1 = vHEX60gensym10_1224737083;
    vHEX60gensym10_1224737083 = genericReset(vHEX60gensym10_1224737083, NTI1224736772);
    b_1224737062[b_1224737062_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym10_1224737120 = (Temporary2 = HEX5BHEX5D_1224736967(b_1224737062[b_1224737062_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224737062[b_1224737062_Idx].stack[pHEX60gensym10_1224737120].tag == 4)) {
      var Temporary3 = b_1224737062[b_1224737062_Idx].stack[pHEX60gensym10_1224737120];
      if (ConstSet2[Temporary3.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736771)); }
      Temporary3.size += 1;
      var addedHEX60gensym10_1224737129 = vHEX60gensym10_1224737083.encodedSize;
      b_1224737062[b_1224737062_Idx].pointers.push((b_1224737062[b_1224737062_Idx].stack).length);;
      b_1224737062[b_1224737062_Idx].stack[pHEX60gensym10_1224737120].encodedSize += addedHEX60gensym10_1224737129;
      Temporary4 = vHEX60gensym10_1224737083;
      vHEX60gensym10_1224737083 = genericReset(vHEX60gensym10_1224737083, NTI1224736772);
      b_1224737062[b_1224737062_Idx].stack.push(Temporary4);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function startArray_486540034(b_486540036, b_486540036_Idx, key_486540037) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;

    if (((b_486540036[b_486540036_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym101_486540066 = (Temporary1 = HEX5BHEX5D_1224736967(b_486540036[b_486540036_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_486540036[b_486540036_Idx].stack[pHEX60gensym101_486540066].tag == 5)) {
      var Temporary2 = b_486540036[b_486540036_Idx].stack[pHEX60gensym101_486540066];
      if (ConstSet3[Temporary2.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736771)); }
      Temporary2.size += 1;
      var kHEX60gensym101_486540075 = {tag: 9, cstr: key_486540037, encodedSize: Buffer.byteLength(key_486540037), str: [], buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym101_486540084 = {tag: 4, size: 0, encodedSize: 0, str: [], cstr: null, buf: null, i: 0, d: 0.0, b: 0, ext: null};
      var uHEX60gensym108_486540097 = (kHEX60gensym101_486540075.encodedSize << 3);
      if ((uHEX60gensym108_486540097 < 128)) {
      Temporary3 = 1;
      }
      else {
      if ((uHEX60gensym108_486540097 < 16384)) {
      Temporary3 = 2;
      }
      else {
      if ((uHEX60gensym108_486540097 < 2097152)) {
      Temporary3 = 3;
      }
      else {
      if ((uHEX60gensym108_486540097 < 268435456)) {
      Temporary3 = 4;
      }
      else {
      Temporary3 = 5;
      }
      }}}
      var addedHEX60gensym101_486540098 = ((kHEX60gensym101_486540075.encodedSize + vHEX60gensym101_486540084.encodedSize) + Temporary3);
      Temporary4 = kHEX60gensym101_486540075;
      kHEX60gensym101_486540075 = genericReset(kHEX60gensym101_486540075, NTI1224736772);
      b_486540036[b_486540036_Idx].stack.push(Temporary4);;
      b_486540036[b_486540036_Idx].pointers.push((b_486540036[b_486540036_Idx].stack).length);;
      b_486540036[b_486540036_Idx].stack[pHEX60gensym101_486540066].encodedSize += addedHEX60gensym101_486540098;
      Temporary5 = vHEX60gensym101_486540084;
      vHEX60gensym101_486540084 = genericReset(vHEX60gensym101_486540084, NTI1224736772);
      b_486540036[b_486540036_Idx].stack.push(Temporary5);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function toString_486539388(n_486539389) {
  var result_486539390 = null;

    result_486539390 = n_486539389;

  return result_486539390;

}

function pop_1224737802(s_1224737804, s_1224737804_Idx) {
  var result_1224737805 = 0;

    var L_1224737809 = ((s_1224737804[s_1224737804_Idx]).length - 1);
    result_1224737805 = s_1224737804[s_1224737804_Idx][L_1224737809];
    if (s_1224737804[s_1224737804_Idx].length < L_1224737809) { for (var i = s_1224737804[s_1224737804_Idx].length ; i < L_1224737809 ; ++i) s_1224737804[s_1224737804_Idx].push(0); }
               else { s_1224737804[s_1224737804_Idx].length = L_1224737809; };

  return result_1224737805;

}

function endArray_1224737789(b_1224737790, b_1224737790_Idx) {
      var Temporary1;
      var Temporary2;

    if (((b_1224737790[b_1224737790_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot end svtARRAY before starting it"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym114_1224737814 = pop_1224737802(b_1224737790[b_1224737790_Idx], "pointers");
      if (!((b_1224737790[b_1224737790_Idx].stack[pHEX60gensym114_1224737814].tag == 4))) {
      raiseException({message: makeNimstrLit("Cannot end svtARRAY before starting it"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
      if ((0 < (b_1224737790[b_1224737790_Idx].pointers).length)) {
      var parentPHEX60gensym114_1224737830 = (Temporary1 = HEX5BHEX5D_1224736967(b_1224737790[b_1224737790_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      var pEncodedSizeHEX60gensym114_1224737831 = b_1224737790[b_1224737790_Idx].stack[pHEX60gensym114_1224737814].encodedSize;
      var uHEX60gensym121_1224737844 = (pEncodedSizeHEX60gensym114_1224737831 << 3);
      if ((uHEX60gensym121_1224737844 < 128)) {
      Temporary2 = 1;
      }
      else {
      if ((uHEX60gensym121_1224737844 < 16384)) {
      Temporary2 = 2;
      }
      else {
      if ((uHEX60gensym121_1224737844 < 2097152)) {
      Temporary2 = 3;
      }
      else {
      if ((uHEX60gensym121_1224737844 < 268435456)) {
      Temporary2 = 4;
      }
      else {
      Temporary2 = 5;
      }
      }}}
      b_1224737790[b_1224737790_Idx].stack[parentPHEX60gensym114_1224737830].encodedSize += (pEncodedSizeHEX60gensym114_1224737831 + Temporary2);
      }
      
    }
    

  
}

function startMap_1224736884(b_1224736885, b_1224736885_Idx) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;

    var vHEX60gensym0_1224736907 = {tag: 5, size: 0, encodedSize: 0, str: [], cstr: null, buf: null, i: 0, d: 0.0, b: 0, ext: null};
    if (((b_1224736885[b_1224736885_Idx].pointers).length == 0)) {
    if ((0 < (b_1224736885[b_1224736885_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    b_1224736885[b_1224736885_Idx].pointers.push((b_1224736885[b_1224736885_Idx].stack).length);;
    Temporary1 = vHEX60gensym0_1224736907;
    vHEX60gensym0_1224736907 = genericReset(vHEX60gensym0_1224736907, NTI1224736772);
    b_1224736885[b_1224736885_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym0_1224736984 = (Temporary2 = HEX5BHEX5D_1224736967(b_1224736885[b_1224736885_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224736885[b_1224736885_Idx].stack[pHEX60gensym0_1224736984].tag == 4)) {
      var Temporary3 = b_1224736885[b_1224736885_Idx].stack[pHEX60gensym0_1224736984];
      if (ConstSet4[Temporary3.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736771)); }
      Temporary3.size += 1;
      var addedHEX60gensym0_1224736993 = vHEX60gensym0_1224736907.encodedSize;
      b_1224736885[b_1224736885_Idx].pointers.push((b_1224736885[b_1224736885_Idx].stack).length);;
      b_1224736885[b_1224736885_Idx].stack[pHEX60gensym0_1224736984].encodedSize += addedHEX60gensym0_1224736993;
      Temporary4 = vHEX60gensym0_1224736907;
      vHEX60gensym0_1224736907 = genericReset(vHEX60gensym0_1224736907, NTI1224736772);
      b_1224736885[b_1224736885_Idx].stack.push(Temporary4);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function startMap_486540277(b_486540279, b_486540279_Idx, key_486540280) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;

    if (((b_486540279[b_486540279_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym132_486540309 = (Temporary1 = HEX5BHEX5D_1224736967(b_486540279[b_486540279_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_486540279[b_486540279_Idx].stack[pHEX60gensym132_486540309].tag == 5)) {
      var Temporary2 = b_486540279[b_486540279_Idx].stack[pHEX60gensym132_486540309];
      if (ConstSet5[Temporary2.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736771)); }
      Temporary2.size += 1;
      var kHEX60gensym132_486540318 = {tag: 9, cstr: key_486540280, encodedSize: Buffer.byteLength(key_486540280), str: [], buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym132_486540327 = {tag: 5, size: 0, encodedSize: 0, str: [], cstr: null, buf: null, i: 0, d: 0.0, b: 0, ext: null};
      var uHEX60gensym139_486540340 = (kHEX60gensym132_486540318.encodedSize << 3);
      if ((uHEX60gensym139_486540340 < 128)) {
      Temporary3 = 1;
      }
      else {
      if ((uHEX60gensym139_486540340 < 16384)) {
      Temporary3 = 2;
      }
      else {
      if ((uHEX60gensym139_486540340 < 2097152)) {
      Temporary3 = 3;
      }
      else {
      if ((uHEX60gensym139_486540340 < 268435456)) {
      Temporary3 = 4;
      }
      else {
      Temporary3 = 5;
      }
      }}}
      var addedHEX60gensym132_486540341 = ((kHEX60gensym132_486540318.encodedSize + vHEX60gensym132_486540327.encodedSize) + Temporary3);
      Temporary4 = kHEX60gensym132_486540318;
      kHEX60gensym132_486540318 = genericReset(kHEX60gensym132_486540318, NTI1224736772);
      b_486540279[b_486540279_Idx].stack.push(Temporary4);;
      b_486540279[b_486540279_Idx].pointers.push((b_486540279[b_486540279_Idx].stack).length);;
      b_486540279[b_486540279_Idx].stack[pHEX60gensym132_486540309].encodedSize += addedHEX60gensym132_486540341;
      Temporary5 = vHEX60gensym132_486540327;
      vHEX60gensym132_486540327 = genericReset(vHEX60gensym132_486540327, NTI1224736772);
      b_486540279[b_486540279_Idx].stack.push(Temporary5);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function endMap_1224737849(b_1224737850, b_1224737850_Idx) {
      var Temporary1;
      var Temporary2;

    if (((b_1224737850[b_1224737850_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot end svtOBJECT before starting it"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym125_1224737865 = pop_1224737802(b_1224737850[b_1224737850_Idx], "pointers");
      if (!((b_1224737850[b_1224737850_Idx].stack[pHEX60gensym125_1224737865].tag == 5))) {
      raiseException({message: makeNimstrLit("Cannot end svtOBJECT before starting it"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
      if ((0 < (b_1224737850[b_1224737850_Idx].pointers).length)) {
      var parentPHEX60gensym125_1224737881 = (Temporary1 = HEX5BHEX5D_1224736967(b_1224737850[b_1224737850_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      var pEncodedSizeHEX60gensym125_1224737882 = b_1224737850[b_1224737850_Idx].stack[pHEX60gensym125_1224737865].encodedSize;
      var uHEX60gensym132_1224737895 = (pEncodedSizeHEX60gensym125_1224737882 << 3);
      if ((uHEX60gensym132_1224737895 < 128)) {
      Temporary2 = 1;
      }
      else {
      if ((uHEX60gensym132_1224737895 < 16384)) {
      Temporary2 = 2;
      }
      else {
      if ((uHEX60gensym132_1224737895 < 2097152)) {
      Temporary2 = 3;
      }
      else {
      if ((uHEX60gensym132_1224737895 < 268435456)) {
      Temporary2 = 4;
      }
      else {
      Temporary2 = 5;
      }
      }}}
      b_1224737850[b_1224737850_Idx].stack[parentPHEX60gensym125_1224737881].encodedSize += (pEncodedSizeHEX60gensym125_1224737882 + Temporary2);
      }
      
    }
    

  
}

function addNull_1224737587(b_1224737588, b_1224737588_Idx) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;

    var vHEX60gensym86_1224737605 = {tag: 6, b: 2, encodedSize: 0, str: [], cstr: null, buf: null, i: 0, d: 0.0, ext: null, size: 0};
    if (((b_1224737588[b_1224737588_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737588[b_1224737588_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary1 = vHEX60gensym86_1224737605;
    vHEX60gensym86_1224737605 = genericReset(vHEX60gensym86_1224737605, NTI1224736772);
    b_1224737588[b_1224737588_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym86_1224737627 = (Temporary2 = HEX5BHEX5D_1224736967(b_1224737588[b_1224737588_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224737588[b_1224737588_Idx].stack[pHEX60gensym86_1224737627].tag == 4)) {
      var Temporary3 = b_1224737588[b_1224737588_Idx].stack[pHEX60gensym86_1224737627];
      if (ConstSet6[Temporary3.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736771)); }
      Temporary3.size += 1;
      var addedHEX60gensym86_1224737636 = vHEX60gensym86_1224737605.encodedSize;
      var uHEX60gensym95_1224737649 = (vHEX60gensym86_1224737605.encodedSize << 3);
      if ((uHEX60gensym95_1224737649 < 128)) {
      Temporary4 = 1;
      }
      else {
      if ((uHEX60gensym95_1224737649 < 16384)) {
      Temporary4 = 2;
      }
      else {
      if ((uHEX60gensym95_1224737649 < 2097152)) {
      Temporary4 = 3;
      }
      else {
      if ((uHEX60gensym95_1224737649 < 268435456)) {
      Temporary4 = 4;
      }
      else {
      Temporary4 = 5;
      }
      }}}
      addedHEX60gensym86_1224737636 += Temporary4;
      b_1224737588[b_1224737588_Idx].stack[pHEX60gensym86_1224737627].encodedSize += addedHEX60gensym86_1224737636;
      Temporary5 = vHEX60gensym86_1224737605;
      vHEX60gensym86_1224737605 = genericReset(vHEX60gensym86_1224737605, NTI1224736772);
      b_1224737588[b_1224737588_Idx].stack.push(Temporary5);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addNull_486539462(b_486539464, b_486539464_Idx, k_486539465) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;

    if (((b_486539464[b_486539464_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym5_486539494 = (Temporary1 = HEX5BHEX5D_1224736967(b_486539464[b_486539464_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_486539464[b_486539464_Idx].stack[pHEX60gensym5_486539494].tag == 5)) {
      var Temporary2 = b_486539464[b_486539464_Idx].stack[pHEX60gensym5_486539494];
      if (ConstSet7[Temporary2.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736771)); }
      Temporary2.size += 1;
      var kHEX60gensym5_486539503 = {tag: 9, cstr: k_486539465, encodedSize: Buffer.byteLength(k_486539465), str: [], buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym5_486539508 = {tag: 6, b: 2, encodedSize: 0, str: [], cstr: null, buf: null, i: 0, d: 0.0, ext: null, size: 0};
      var uHEX60gensym12_486539521 = (kHEX60gensym5_486539503.encodedSize << 3);
      if ((uHEX60gensym12_486539521 < 128)) {
      Temporary3 = 1;
      }
      else {
      if ((uHEX60gensym12_486539521 < 16384)) {
      Temporary3 = 2;
      }
      else {
      if ((uHEX60gensym12_486539521 < 2097152)) {
      Temporary3 = 3;
      }
      else {
      if ((uHEX60gensym12_486539521 < 268435456)) {
      Temporary3 = 4;
      }
      else {
      Temporary3 = 5;
      }
      }}}
      var addedHEX60gensym5_486539522 = ((kHEX60gensym5_486539503.encodedSize + vHEX60gensym5_486539508.encodedSize) + Temporary3);
      Temporary4 = kHEX60gensym5_486539503;
      kHEX60gensym5_486539503 = genericReset(kHEX60gensym5_486539503, NTI1224736772);
      b_486539464[b_486539464_Idx].stack.push(Temporary4);;
      var uHEX60gensym16_486539542 = (vHEX60gensym5_486539508.encodedSize << 3);
      if ((uHEX60gensym16_486539542 < 128)) {
      Temporary5 = 1;
      }
      else {
      if ((uHEX60gensym16_486539542 < 16384)) {
      Temporary5 = 2;
      }
      else {
      if ((uHEX60gensym16_486539542 < 2097152)) {
      Temporary5 = 3;
      }
      else {
      if ((uHEX60gensym16_486539542 < 268435456)) {
      Temporary5 = 4;
      }
      else {
      Temporary5 = 5;
      }
      }}}
      addedHEX60gensym5_486539522 += Temporary5;
      b_486539464[b_486539464_Idx].stack[pHEX60gensym5_486539494].encodedSize += addedHEX60gensym5_486539522;
      Temporary6 = vHEX60gensym5_486539508;
      vHEX60gensym5_486539508 = genericReset(vHEX60gensym5_486539508, NTI1224736772);
      b_486539464[b_486539464_Idx].stack.push(Temporary6);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addString_486540155(b_486540157, b_486540157_Idx, s_486540158) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;

    var vHEX60gensym115_486540171 = {tag: 9, cstr: s_486540158, encodedSize: Buffer.byteLength(s_486540158), str: [], buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
    if (((b_486540157[b_486540157_Idx].pointers).length == 0)) {
    if ((0 < (b_486540157[b_486540157_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary1 = vHEX60gensym115_486540171;
    vHEX60gensym115_486540171 = genericReset(vHEX60gensym115_486540171, NTI1224736772);
    b_486540157[b_486540157_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym115_486540193 = (Temporary2 = HEX5BHEX5D_1224736967(b_486540157[b_486540157_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_486540157[b_486540157_Idx].stack[pHEX60gensym115_486540193].tag == 4)) {
      var Temporary3 = b_486540157[b_486540157_Idx].stack[pHEX60gensym115_486540193];
      if (ConstSet8[Temporary3.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736771)); }
      Temporary3.size += 1;
      var addedHEX60gensym115_486540202 = vHEX60gensym115_486540171.encodedSize;
      var uHEX60gensym124_486540215 = (vHEX60gensym115_486540171.encodedSize << 3);
      if ((uHEX60gensym124_486540215 < 128)) {
      Temporary4 = 1;
      }
      else {
      if ((uHEX60gensym124_486540215 < 16384)) {
      Temporary4 = 2;
      }
      else {
      if ((uHEX60gensym124_486540215 < 2097152)) {
      Temporary4 = 3;
      }
      else {
      if ((uHEX60gensym124_486540215 < 268435456)) {
      Temporary4 = 4;
      }
      else {
      Temporary4 = 5;
      }
      }}}
      addedHEX60gensym115_486540202 += Temporary4;
      b_486540157[b_486540157_Idx].stack[pHEX60gensym115_486540193].encodedSize += addedHEX60gensym115_486540202;
      Temporary5 = vHEX60gensym115_486540171;
      vHEX60gensym115_486540171 = genericReset(vHEX60gensym115_486540171, NTI1224736772);
      b_486540157[b_486540157_Idx].stack.push(Temporary5);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addString_486539845(b_486539848, b_486539848_Idx, k_486539849, s_486539850) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;

    if (((b_486539848[b_486539848_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym69_486539879 = (Temporary1 = HEX5BHEX5D_1224736967(b_486539848[b_486539848_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_486539848[b_486539848_Idx].stack[pHEX60gensym69_486539879].tag == 5)) {
      var Temporary2 = b_486539848[b_486539848_Idx].stack[pHEX60gensym69_486539879];
      if (ConstSet9[Temporary2.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736771)); }
      Temporary2.size += 1;
      var kHEX60gensym69_486539888 = {tag: 9, cstr: k_486539849, encodedSize: Buffer.byteLength(k_486539849), str: [], buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym69_486539889 = {tag: 9, cstr: s_486539850, encodedSize: Buffer.byteLength(s_486539850), str: [], buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var uHEX60gensym76_486539902 = (kHEX60gensym69_486539888.encodedSize << 3);
      if ((uHEX60gensym76_486539902 < 128)) {
      Temporary3 = 1;
      }
      else {
      if ((uHEX60gensym76_486539902 < 16384)) {
      Temporary3 = 2;
      }
      else {
      if ((uHEX60gensym76_486539902 < 2097152)) {
      Temporary3 = 3;
      }
      else {
      if ((uHEX60gensym76_486539902 < 268435456)) {
      Temporary3 = 4;
      }
      else {
      Temporary3 = 5;
      }
      }}}
      var addedHEX60gensym69_486539903 = ((kHEX60gensym69_486539888.encodedSize + vHEX60gensym69_486539889.encodedSize) + Temporary3);
      Temporary4 = kHEX60gensym69_486539888;
      kHEX60gensym69_486539888 = genericReset(kHEX60gensym69_486539888, NTI1224736772);
      b_486539848[b_486539848_Idx].stack.push(Temporary4);;
      var uHEX60gensym80_486539923 = (vHEX60gensym69_486539889.encodedSize << 3);
      if ((uHEX60gensym80_486539923 < 128)) {
      Temporary5 = 1;
      }
      else {
      if ((uHEX60gensym80_486539923 < 16384)) {
      Temporary5 = 2;
      }
      else {
      if ((uHEX60gensym80_486539923 < 2097152)) {
      Temporary5 = 3;
      }
      else {
      if ((uHEX60gensym80_486539923 < 268435456)) {
      Temporary5 = 4;
      }
      else {
      Temporary5 = 5;
      }
      }}}
      addedHEX60gensym69_486539903 += Temporary5;
      b_486539848[b_486539848_Idx].stack[pHEX60gensym69_486539879].encodedSize += addedHEX60gensym69_486539903;
      Temporary6 = vHEX60gensym69_486539889;
      vHEX60gensym69_486539889 = genericReset(vHEX60gensym69_486539889, NTI1224736772);
      b_486539848[b_486539848_Idx].stack.push(Temporary6);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addInt_1224737161(b_1224737162, b_1224737162_Idx, i_1224737163) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;

    var vHEX60gensym20_1224737176 = {tag: 2, i: i_1224737163, encodedSize: 4, str: [], cstr: null, buf: null, d: 0.0, b: 0, ext: null, size: 0};
    if (((b_1224737162[b_1224737162_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737162[b_1224737162_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary1 = vHEX60gensym20_1224737176;
    vHEX60gensym20_1224737176 = genericReset(vHEX60gensym20_1224737176, NTI1224736772);
    b_1224737162[b_1224737162_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym20_1224737198 = (Temporary2 = HEX5BHEX5D_1224736967(b_1224737162[b_1224737162_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224737162[b_1224737162_Idx].stack[pHEX60gensym20_1224737198].tag == 4)) {
      var Temporary3 = b_1224737162[b_1224737162_Idx].stack[pHEX60gensym20_1224737198];
      if (ConstSet10[Temporary3.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736771)); }
      Temporary3.size += 1;
      var addedHEX60gensym20_1224737207 = vHEX60gensym20_1224737176.encodedSize;
      var uHEX60gensym29_1224737220 = (vHEX60gensym20_1224737176.encodedSize << 3);
      if ((uHEX60gensym29_1224737220 < 128)) {
      Temporary4 = 1;
      }
      else {
      if ((uHEX60gensym29_1224737220 < 16384)) {
      Temporary4 = 2;
      }
      else {
      if ((uHEX60gensym29_1224737220 < 2097152)) {
      Temporary4 = 3;
      }
      else {
      if ((uHEX60gensym29_1224737220 < 268435456)) {
      Temporary4 = 4;
      }
      else {
      Temporary4 = 5;
      }
      }}}
      addedHEX60gensym20_1224737207 += Temporary4;
      b_1224737162[b_1224737162_Idx].stack[pHEX60gensym20_1224737198].encodedSize += addedHEX60gensym20_1224737207;
      Temporary5 = vHEX60gensym20_1224737176;
      vHEX60gensym20_1224737176 = genericReset(vHEX60gensym20_1224737176, NTI1224736772);
      b_1224737162[b_1224737162_Idx].stack.push(Temporary5);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function toInt_486539382(n_486539383) {
  var result_486539384 = 0;

    result_486539384 = n_486539383;

  return result_486539384;

}

function addInt_486539657(b_486539659, b_486539659_Idx, k_486539660, i_486539661) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;

    if (((b_486539659[b_486539659_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym37_486539690 = (Temporary1 = HEX5BHEX5D_1224736967(b_486539659[b_486539659_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_486539659[b_486539659_Idx].stack[pHEX60gensym37_486539690].tag == 5)) {
      var Temporary2 = b_486539659[b_486539659_Idx].stack[pHEX60gensym37_486539690];
      if (ConstSet11[Temporary2.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736771)); }
      Temporary2.size += 1;
      var kHEX60gensym37_486539699 = {tag: 9, cstr: k_486539660, encodedSize: Buffer.byteLength(k_486539660), str: [], buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym37_486539700 = {tag: 2, i: i_486539661, encodedSize: 4, str: [], cstr: null, buf: null, d: 0.0, b: 0, ext: null, size: 0};
      var uHEX60gensym44_486539713 = (kHEX60gensym37_486539699.encodedSize << 3);
      if ((uHEX60gensym44_486539713 < 128)) {
      Temporary3 = 1;
      }
      else {
      if ((uHEX60gensym44_486539713 < 16384)) {
      Temporary3 = 2;
      }
      else {
      if ((uHEX60gensym44_486539713 < 2097152)) {
      Temporary3 = 3;
      }
      else {
      if ((uHEX60gensym44_486539713 < 268435456)) {
      Temporary3 = 4;
      }
      else {
      Temporary3 = 5;
      }
      }}}
      var addedHEX60gensym37_486539714 = ((kHEX60gensym37_486539699.encodedSize + vHEX60gensym37_486539700.encodedSize) + Temporary3);
      Temporary4 = kHEX60gensym37_486539699;
      kHEX60gensym37_486539699 = genericReset(kHEX60gensym37_486539699, NTI1224736772);
      b_486539659[b_486539659_Idx].stack.push(Temporary4);;
      var uHEX60gensym48_486539734 = (vHEX60gensym37_486539700.encodedSize << 3);
      if ((uHEX60gensym48_486539734 < 128)) {
      Temporary5 = 1;
      }
      else {
      if ((uHEX60gensym48_486539734 < 16384)) {
      Temporary5 = 2;
      }
      else {
      if ((uHEX60gensym48_486539734 < 2097152)) {
      Temporary5 = 3;
      }
      else {
      if ((uHEX60gensym48_486539734 < 268435456)) {
      Temporary5 = 4;
      }
      else {
      Temporary5 = 5;
      }
      }}}
      addedHEX60gensym37_486539714 += Temporary5;
      b_486539659[b_486539659_Idx].stack[pHEX60gensym37_486539690].encodedSize += addedHEX60gensym37_486539714;
      Temporary6 = vHEX60gensym37_486539700;
      vHEX60gensym37_486539700 = genericReset(vHEX60gensym37_486539700, NTI1224736772);
      b_486539659[b_486539659_Idx].stack.push(Temporary6);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addDouble_1224737246(b_1224737247, b_1224737247_Idx, d_1224737248) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;

    var vHEX60gensym34_1224737261 = {tag: 3, d: d_1224737248, encodedSize: 8, str: [], cstr: null, buf: null, i: 0, b: 0, ext: null, size: 0};
    if (((b_1224737247[b_1224737247_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737247[b_1224737247_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary1 = vHEX60gensym34_1224737261;
    vHEX60gensym34_1224737261 = genericReset(vHEX60gensym34_1224737261, NTI1224736772);
    b_1224737247[b_1224737247_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym34_1224737283 = (Temporary2 = HEX5BHEX5D_1224736967(b_1224737247[b_1224737247_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224737247[b_1224737247_Idx].stack[pHEX60gensym34_1224737283].tag == 4)) {
      var Temporary3 = b_1224737247[b_1224737247_Idx].stack[pHEX60gensym34_1224737283];
      if (ConstSet12[Temporary3.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736771)); }
      Temporary3.size += 1;
      var addedHEX60gensym34_1224737292 = vHEX60gensym34_1224737261.encodedSize;
      var uHEX60gensym43_1224737305 = (vHEX60gensym34_1224737261.encodedSize << 3);
      if ((uHEX60gensym43_1224737305 < 128)) {
      Temporary4 = 1;
      }
      else {
      if ((uHEX60gensym43_1224737305 < 16384)) {
      Temporary4 = 2;
      }
      else {
      if ((uHEX60gensym43_1224737305 < 2097152)) {
      Temporary4 = 3;
      }
      else {
      if ((uHEX60gensym43_1224737305 < 268435456)) {
      Temporary4 = 4;
      }
      else {
      Temporary4 = 5;
      }
      }}}
      addedHEX60gensym34_1224737292 += Temporary4;
      b_1224737247[b_1224737247_Idx].stack[pHEX60gensym34_1224737283].encodedSize += addedHEX60gensym34_1224737292;
      Temporary5 = vHEX60gensym34_1224737261;
      vHEX60gensym34_1224737261 = genericReset(vHEX60gensym34_1224737261, NTI1224736772);
      b_1224737247[b_1224737247_Idx].stack.push(Temporary5);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function toDouble_486539385(n_486539386) {
  var result_486539387 = 0.0;

    result_486539387 = n_486539386;

  return result_486539387;

}

function addDouble_486539751(b_486539753, b_486539753_Idx, k_486539754, d_486539755) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;

    if (((b_486539753[b_486539753_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym53_486539784 = (Temporary1 = HEX5BHEX5D_1224736967(b_486539753[b_486539753_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_486539753[b_486539753_Idx].stack[pHEX60gensym53_486539784].tag == 5)) {
      var Temporary2 = b_486539753[b_486539753_Idx].stack[pHEX60gensym53_486539784];
      if (ConstSet13[Temporary2.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736771)); }
      Temporary2.size += 1;
      var kHEX60gensym53_486539793 = {tag: 9, cstr: k_486539754, encodedSize: Buffer.byteLength(k_486539754), str: [], buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym53_486539794 = {tag: 3, d: d_486539755, encodedSize: 8, str: [], cstr: null, buf: null, i: 0, b: 0, ext: null, size: 0};
      var uHEX60gensym60_486539807 = (kHEX60gensym53_486539793.encodedSize << 3);
      if ((uHEX60gensym60_486539807 < 128)) {
      Temporary3 = 1;
      }
      else {
      if ((uHEX60gensym60_486539807 < 16384)) {
      Temporary3 = 2;
      }
      else {
      if ((uHEX60gensym60_486539807 < 2097152)) {
      Temporary3 = 3;
      }
      else {
      if ((uHEX60gensym60_486539807 < 268435456)) {
      Temporary3 = 4;
      }
      else {
      Temporary3 = 5;
      }
      }}}
      var addedHEX60gensym53_486539808 = ((kHEX60gensym53_486539793.encodedSize + vHEX60gensym53_486539794.encodedSize) + Temporary3);
      Temporary4 = kHEX60gensym53_486539793;
      kHEX60gensym53_486539793 = genericReset(kHEX60gensym53_486539793, NTI1224736772);
      b_486539753[b_486539753_Idx].stack.push(Temporary4);;
      var uHEX60gensym64_486539828 = (vHEX60gensym53_486539794.encodedSize << 3);
      if ((uHEX60gensym64_486539828 < 128)) {
      Temporary5 = 1;
      }
      else {
      if ((uHEX60gensym64_486539828 < 16384)) {
      Temporary5 = 2;
      }
      else {
      if ((uHEX60gensym64_486539828 < 2097152)) {
      Temporary5 = 3;
      }
      else {
      if ((uHEX60gensym64_486539828 < 268435456)) {
      Temporary5 = 4;
      }
      else {
      Temporary5 = 5;
      }
      }}}
      addedHEX60gensym53_486539808 += Temporary5;
      b_486539753[b_486539753_Idx].stack[pHEX60gensym53_486539784].encodedSize += addedHEX60gensym53_486539808;
      Temporary6 = vHEX60gensym53_486539794;
      vHEX60gensym53_486539794 = genericReset(vHEX60gensym53_486539794, NTI1224736772);
      b_486539753[b_486539753_Idx].stack.push(Temporary6);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addBool_1224737488(b_1224737489, b_1224737489_Idx, v_1224737490) {
    var Temporary1;
    var Temporary2;
      var Temporary3;
    var Temporary4;
      var Temporary5;
      var Temporary6;
      var Temporary7;
      var Temporary8;

    if (v_1224737490) {
    Temporary1 = 0;
    }
    else {
    Temporary1 = 1;
    }
    
      if (v_1224737490) {
      Temporary3 = 0;
      }
      else {
      Temporary3 = 1;
      }
      
    if ((Temporary3 == 2)) {
    Temporary2 = 0;
    }
    else {
    Temporary2 = 1;
    }
    
    var vHEX60gensym72_1224737508 = {tag: 6, b: Temporary1, encodedSize: Temporary2, str: [], cstr: null, buf: null, i: 0, d: 0.0, ext: null, size: 0};
    if (((b_1224737489[b_1224737489_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737489[b_1224737489_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary4 = vHEX60gensym72_1224737508;
    vHEX60gensym72_1224737508 = genericReset(vHEX60gensym72_1224737508, NTI1224736772);
    b_1224737489[b_1224737489_Idx].stack.push(Temporary4);;
    }
    else {
      var pHEX60gensym72_1224737530 = (Temporary5 = HEX5BHEX5D_1224736967(b_1224737489[b_1224737489_Idx].pointers, 1), Temporary5)[0][Temporary5[1]];
      if ((b_1224737489[b_1224737489_Idx].stack[pHEX60gensym72_1224737530].tag == 4)) {
      var Temporary6 = b_1224737489[b_1224737489_Idx].stack[pHEX60gensym72_1224737530];
      if (ConstSet14[Temporary6.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary6.tag, NTI1224736771)); }
      Temporary6.size += 1;
      var addedHEX60gensym72_1224737539 = vHEX60gensym72_1224737508.encodedSize;
      var uHEX60gensym81_1224737552 = (vHEX60gensym72_1224737508.encodedSize << 3);
      if ((uHEX60gensym81_1224737552 < 128)) {
      Temporary7 = 1;
      }
      else {
      if ((uHEX60gensym81_1224737552 < 16384)) {
      Temporary7 = 2;
      }
      else {
      if ((uHEX60gensym81_1224737552 < 2097152)) {
      Temporary7 = 3;
      }
      else {
      if ((uHEX60gensym81_1224737552 < 268435456)) {
      Temporary7 = 4;
      }
      else {
      Temporary7 = 5;
      }
      }}}
      addedHEX60gensym72_1224737539 += Temporary7;
      b_1224737489[b_1224737489_Idx].stack[pHEX60gensym72_1224737530].encodedSize += addedHEX60gensym72_1224737539;
      Temporary8 = vHEX60gensym72_1224737508;
      vHEX60gensym72_1224737508 = genericReset(vHEX60gensym72_1224737508, NTI1224736772);
      b_1224737489[b_1224737489_Idx].stack.push(Temporary8);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function toBool_486539391(n_486539392) {
  var result_486539393 = false;

    result_486539393 = n_486539392;

  return result_486539393;

}

function addBool_486539559(b_486539561, b_486539561_Idx, k_486539562, v_486539563) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
        var Temporary5;
      var Temporary6;
      var Temporary7;
      var Temporary8;
      var Temporary9;

    if (((b_486539561[b_486539561_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym21_486539592 = (Temporary1 = HEX5BHEX5D_1224736967(b_486539561[b_486539561_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_486539561[b_486539561_Idx].stack[pHEX60gensym21_486539592].tag == 5)) {
      var Temporary2 = b_486539561[b_486539561_Idx].stack[pHEX60gensym21_486539592];
      if (ConstSet15[Temporary2.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736771)); }
      Temporary2.size += 1;
      var kHEX60gensym21_486539601 = {tag: 9, cstr: k_486539562, encodedSize: Buffer.byteLength(k_486539562), str: [], buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      if (v_486539563) {
      Temporary3 = 0;
      }
      else {
      Temporary3 = 1;
      }
      
        if (v_486539563) {
        Temporary5 = 0;
        }
        else {
        Temporary5 = 1;
        }
        
      if ((Temporary5 == 2)) {
      Temporary4 = 0;
      }
      else {
      Temporary4 = 1;
      }
      
      var vHEX60gensym21_486539606 = {tag: 6, b: Temporary3, encodedSize: Temporary4, str: [], cstr: null, buf: null, i: 0, d: 0.0, ext: null, size: 0};
      var uHEX60gensym28_486539619 = (kHEX60gensym21_486539601.encodedSize << 3);
      if ((uHEX60gensym28_486539619 < 128)) {
      Temporary6 = 1;
      }
      else {
      if ((uHEX60gensym28_486539619 < 16384)) {
      Temporary6 = 2;
      }
      else {
      if ((uHEX60gensym28_486539619 < 2097152)) {
      Temporary6 = 3;
      }
      else {
      if ((uHEX60gensym28_486539619 < 268435456)) {
      Temporary6 = 4;
      }
      else {
      Temporary6 = 5;
      }
      }}}
      var addedHEX60gensym21_486539620 = ((kHEX60gensym21_486539601.encodedSize + vHEX60gensym21_486539606.encodedSize) + Temporary6);
      Temporary7 = kHEX60gensym21_486539601;
      kHEX60gensym21_486539601 = genericReset(kHEX60gensym21_486539601, NTI1224736772);
      b_486539561[b_486539561_Idx].stack.push(Temporary7);;
      var uHEX60gensym32_486539640 = (vHEX60gensym21_486539606.encodedSize << 3);
      if ((uHEX60gensym32_486539640 < 128)) {
      Temporary8 = 1;
      }
      else {
      if ((uHEX60gensym32_486539640 < 16384)) {
      Temporary8 = 2;
      }
      else {
      if ((uHEX60gensym32_486539640 < 2097152)) {
      Temporary8 = 3;
      }
      else {
      if ((uHEX60gensym32_486539640 < 268435456)) {
      Temporary8 = 4;
      }
      else {
      Temporary8 = 5;
      }
      }}}
      addedHEX60gensym21_486539620 += Temporary8;
      b_486539561[b_486539561_Idx].stack[pHEX60gensym21_486539592].encodedSize += addedHEX60gensym21_486539620;
      Temporary9 = vHEX60gensym21_486539606;
      vHEX60gensym21_486539606 = genericReset(vHEX60gensym21_486539606, NTI1224736772);
      b_486539561[b_486539561_Idx].stack.push(Temporary9);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addBuffer_1224737335(b_1224737336, b_1224737336_Idx, buff_1224737337) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;

    var vHEX60gensym48_1224737350 = {tag: 1, buf: buff_1224737337, encodedSize: buff_1224737337.length, str: [], cstr: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
    if (((b_1224737336[b_1224737336_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737336[b_1224737336_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary1 = vHEX60gensym48_1224737350;
    vHEX60gensym48_1224737350 = genericReset(vHEX60gensym48_1224737350, NTI1224736772);
    b_1224737336[b_1224737336_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym48_1224737372 = (Temporary2 = HEX5BHEX5D_1224736967(b_1224737336[b_1224737336_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224737336[b_1224737336_Idx].stack[pHEX60gensym48_1224737372].tag == 4)) {
      var Temporary3 = b_1224737336[b_1224737336_Idx].stack[pHEX60gensym48_1224737372];
      if (ConstSet16[Temporary3.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736771)); }
      Temporary3.size += 1;
      var addedHEX60gensym48_1224737381 = vHEX60gensym48_1224737350.encodedSize;
      var uHEX60gensym57_1224737394 = (vHEX60gensym48_1224737350.encodedSize << 3);
      if ((uHEX60gensym57_1224737394 < 128)) {
      Temporary4 = 1;
      }
      else {
      if ((uHEX60gensym57_1224737394 < 16384)) {
      Temporary4 = 2;
      }
      else {
      if ((uHEX60gensym57_1224737394 < 2097152)) {
      Temporary4 = 3;
      }
      else {
      if ((uHEX60gensym57_1224737394 < 268435456)) {
      Temporary4 = 4;
      }
      else {
      Temporary4 = 5;
      }
      }}}
      addedHEX60gensym48_1224737381 += Temporary4;
      b_1224737336[b_1224737336_Idx].stack[pHEX60gensym48_1224737372].encodedSize += addedHEX60gensym48_1224737381;
      Temporary5 = vHEX60gensym48_1224737350;
      vHEX60gensym48_1224737350 = genericReset(vHEX60gensym48_1224737350, NTI1224736772);
      b_1224737336[b_1224737336_Idx].stack.push(Temporary5);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function toBuffer_486539394(n_486539395) {
  var result_486539396 = null;

    result_486539396 = n_486539395;

  return result_486539396;

}

function addBuffer_486539940(b_486539942, b_486539942_Idx, k_486539943, buf_486539944) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;

    if (((b_486539942[b_486539942_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym85_486539973 = (Temporary1 = HEX5BHEX5D_1224736967(b_486539942[b_486539942_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_486539942[b_486539942_Idx].stack[pHEX60gensym85_486539973].tag == 5)) {
      var Temporary2 = b_486539942[b_486539942_Idx].stack[pHEX60gensym85_486539973];
      if (ConstSet17[Temporary2.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736771)); }
      Temporary2.size += 1;
      var kHEX60gensym85_486539982 = {tag: 9, cstr: k_486539943, encodedSize: Buffer.byteLength(k_486539943), str: [], buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym85_486539983 = {tag: 1, buf: buf_486539944, encodedSize: buf_486539944.length, str: [], cstr: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var uHEX60gensym92_486539996 = (kHEX60gensym85_486539982.encodedSize << 3);
      if ((uHEX60gensym92_486539996 < 128)) {
      Temporary3 = 1;
      }
      else {
      if ((uHEX60gensym92_486539996 < 16384)) {
      Temporary3 = 2;
      }
      else {
      if ((uHEX60gensym92_486539996 < 2097152)) {
      Temporary3 = 3;
      }
      else {
      if ((uHEX60gensym92_486539996 < 268435456)) {
      Temporary3 = 4;
      }
      else {
      Temporary3 = 5;
      }
      }}}
      var addedHEX60gensym85_486539997 = ((kHEX60gensym85_486539982.encodedSize + vHEX60gensym85_486539983.encodedSize) + Temporary3);
      Temporary4 = kHEX60gensym85_486539982;
      kHEX60gensym85_486539982 = genericReset(kHEX60gensym85_486539982, NTI1224736772);
      b_486539942[b_486539942_Idx].stack.push(Temporary4);;
      var uHEX60gensym96_486540017 = (vHEX60gensym85_486539983.encodedSize << 3);
      if ((uHEX60gensym96_486540017 < 128)) {
      Temporary5 = 1;
      }
      else {
      if ((uHEX60gensym96_486540017 < 16384)) {
      Temporary5 = 2;
      }
      else {
      if ((uHEX60gensym96_486540017 < 2097152)) {
      Temporary5 = 3;
      }
      else {
      if ((uHEX60gensym96_486540017 < 268435456)) {
      Temporary5 = 4;
      }
      else {
      Temporary5 = 5;
      }
      }}}
      addedHEX60gensym85_486539997 += Temporary5;
      b_486539942[b_486539942_Idx].stack[pHEX60gensym85_486539973].encodedSize += addedHEX60gensym85_486539997;
      Temporary6 = vHEX60gensym85_486539983;
      vHEX60gensym85_486539983 = genericReset(vHEX60gensym85_486539983, NTI1224736772);
      b_486539942[b_486539942_Idx].stack.push(Temporary6);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addExtended_1224737666(b_1224737667, b_1224737667_Idx, ext_1224737668) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;

    var vHEX60gensym100_1224737681 = {tag: 7, ext: ext_1224737668, encodedSize: 0, str: [], cstr: null, buf: null, i: 0, d: 0.0, b: 0, size: 0};
    if (((b_1224737667[b_1224737667_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737667[b_1224737667_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary1 = vHEX60gensym100_1224737681;
    vHEX60gensym100_1224737681 = genericReset(vHEX60gensym100_1224737681, NTI1224736772);
    b_1224737667[b_1224737667_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym100_1224737703 = (Temporary2 = HEX5BHEX5D_1224736967(b_1224737667[b_1224737667_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224737667[b_1224737667_Idx].stack[pHEX60gensym100_1224737703].tag == 4)) {
      var Temporary3 = b_1224737667[b_1224737667_Idx].stack[pHEX60gensym100_1224737703];
      if (ConstSet18[Temporary3.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736771)); }
      Temporary3.size += 1;
      var addedHEX60gensym100_1224737712 = vHEX60gensym100_1224737681.encodedSize;
      var uHEX60gensym109_1224737725 = (vHEX60gensym100_1224737681.encodedSize << 3);
      if ((uHEX60gensym109_1224737725 < 128)) {
      Temporary4 = 1;
      }
      else {
      if ((uHEX60gensym109_1224737725 < 16384)) {
      Temporary4 = 2;
      }
      else {
      if ((uHEX60gensym109_1224737725 < 2097152)) {
      Temporary4 = 3;
      }
      else {
      if ((uHEX60gensym109_1224737725 < 268435456)) {
      Temporary4 = 4;
      }
      else {
      Temporary4 = 5;
      }
      }}}
      addedHEX60gensym100_1224737712 += Temporary4;
      b_1224737667[b_1224737667_Idx].stack[pHEX60gensym100_1224737703].encodedSize += addedHEX60gensym100_1224737712;
      Temporary5 = vHEX60gensym100_1224737681;
      vHEX60gensym100_1224737681 = genericReset(vHEX60gensym100_1224737681, NTI1224736772);
      b_1224737667[b_1224737667_Idx].stack.push(Temporary5);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addExtended_486540830(b_486540832, b_486540832_Idx, k_486540833, ext_486540834) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;

    if (((b_486540832[b_486540832_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym187_486540863 = (Temporary1 = HEX5BHEX5D_1224736967(b_486540832[b_486540832_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_486540832[b_486540832_Idx].stack[pHEX60gensym187_486540863].tag == 5)) {
      var Temporary2 = b_486540832[b_486540832_Idx].stack[pHEX60gensym187_486540863];
      if (ConstSet19[Temporary2.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736771)); }
      Temporary2.size += 1;
      var kHEX60gensym187_486540872 = {tag: 9, cstr: k_486540833, encodedSize: Buffer.byteLength(k_486540833), str: [], buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym187_486540873 = {tag: 7, ext: ext_486540834, encodedSize: 0, str: [], cstr: null, buf: null, i: 0, d: 0.0, b: 0, size: 0};
      var uHEX60gensym194_486540886 = (kHEX60gensym187_486540872.encodedSize << 3);
      if ((uHEX60gensym194_486540886 < 128)) {
      Temporary3 = 1;
      }
      else {
      if ((uHEX60gensym194_486540886 < 16384)) {
      Temporary3 = 2;
      }
      else {
      if ((uHEX60gensym194_486540886 < 2097152)) {
      Temporary3 = 3;
      }
      else {
      if ((uHEX60gensym194_486540886 < 268435456)) {
      Temporary3 = 4;
      }
      else {
      Temporary3 = 5;
      }
      }}}
      var addedHEX60gensym187_486540887 = ((kHEX60gensym187_486540872.encodedSize + vHEX60gensym187_486540873.encodedSize) + Temporary3);
      Temporary4 = kHEX60gensym187_486540872;
      kHEX60gensym187_486540872 = genericReset(kHEX60gensym187_486540872, NTI1224736772);
      b_486540832[b_486540832_Idx].stack.push(Temporary4);;
      var uHEX60gensym198_486540907 = (vHEX60gensym187_486540873.encodedSize << 3);
      if ((uHEX60gensym198_486540907 < 128)) {
      Temporary5 = 1;
      }
      else {
      if ((uHEX60gensym198_486540907 < 16384)) {
      Temporary5 = 2;
      }
      else {
      if ((uHEX60gensym198_486540907 < 2097152)) {
      Temporary5 = 3;
      }
      else {
      if ((uHEX60gensym198_486540907 < 268435456)) {
      Temporary5 = 4;
      }
      else {
      Temporary5 = 5;
      }
      }}}
      addedHEX60gensym187_486540887 += Temporary5;
      b_486540832[b_486540832_Idx].stack[pHEX60gensym187_486540863].encodedSize += addedHEX60gensym187_486540887;
      Temporary6 = vHEX60gensym187_486540873;
      vHEX60gensym187_486540873 = genericReset(vHEX60gensym187_486540873, NTI1224736772);
      b_486540832[b_486540832_Idx].stack.push(Temporary6);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function encodingSize_1224737924(b_1224737925, b_1224737925_Idx) {
    var Temporary1;

  var result_1224737926 = 0;

    if (((b_1224737925[b_1224737925_Idx].stack).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot get encoding size before adding any value"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    if ((0 < (b_1224737925[b_1224737925_Idx].pointers).length)) {
    raiseException({message: makeNimstrLit("Cannot get encoding size before ending all arrays and maps"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    var uHEX60gensym139_1224737947 = (b_1224737925[b_1224737925_Idx].stack[0].encodedSize << 3);
    if ((uHEX60gensym139_1224737947 < 128)) {
    Temporary1 = 1;
    }
    else {
    if ((uHEX60gensym139_1224737947 < 16384)) {
    Temporary1 = 2;
    }
    else {
    if ((uHEX60gensym139_1224737947 < 2097152)) {
    Temporary1 = 3;
    }
    else {
    if ((uHEX60gensym139_1224737947 < 268435456)) {
    Temporary1 = 4;
    }
    else {
    Temporary1 = 5;
    }
    }}}
    result_1224737926 = (b_1224737925[b_1224737925_Idx].stack[0].encodedSize + Temporary1);

  return result_1224737926;

}

function writeVaruint32_1224738003(buf_1224738005, buf_1224738005_Idx, v_1224738006, p_1224738007, p_1224738007_Idx) {
    if ((v_1224738006 < 128)) {
    buf_1224738005[buf_1224738005_Idx][p_1224738007[p_1224738007_Idx]] = v_1224738006;
    p_1224738007[p_1224738007_Idx] += 1;
    }
    else {
    if ((v_1224738006 < 16384)) {
    buf_1224738005[buf_1224738005_Idx][p_1224738007[p_1224738007_Idx]] = (v_1224738006 | 128);
    buf_1224738005[buf_1224738005_Idx][(p_1224738007[p_1224738007_Idx] + 1)] = (v_1224738006 >>> 7);
    p_1224738007[p_1224738007_Idx] += 2;
    }
    else {
    if ((v_1224738006 < 2097152)) {
    buf_1224738005[buf_1224738005_Idx][p_1224738007[p_1224738007_Idx]] = (v_1224738006 | 128);
    buf_1224738005[buf_1224738005_Idx][(p_1224738007[p_1224738007_Idx] + 1)] = ((v_1224738006 >>> 7) | 128);
    buf_1224738005[buf_1224738005_Idx][(p_1224738007[p_1224738007_Idx] + 2)] = (v_1224738006 >>> 14);
    p_1224738007[p_1224738007_Idx] += 3;
    }
    else {
    if ((v_1224738006 < 268435456)) {
    buf_1224738005[buf_1224738005_Idx][p_1224738007[p_1224738007_Idx]] = (v_1224738006 | 128);
    buf_1224738005[buf_1224738005_Idx][(p_1224738007[p_1224738007_Idx] + 1)] = ((v_1224738006 >>> 7) | 128);
    buf_1224738005[buf_1224738005_Idx][(p_1224738007[p_1224738007_Idx] + 2)] = ((v_1224738006 >>> 14) | 128);
    buf_1224738005[buf_1224738005_Idx][(p_1224738007[p_1224738007_Idx] + 3)] = (v_1224738006 >>> 21);
    p_1224738007[p_1224738007_Idx] += 4;
    }
    else {
      buf_1224738005[buf_1224738005_Idx][p_1224738007[p_1224738007_Idx]] = (v_1224738006 | 128);
      buf_1224738005[buf_1224738005_Idx][(p_1224738007[p_1224738007_Idx] + 1)] = ((v_1224738006 >>> 7) | 128);
      buf_1224738005[buf_1224738005_Idx][(p_1224738007[p_1224738007_Idx] + 2)] = ((v_1224738006 >>> 14) | 128);
      buf_1224738005[buf_1224738005_Idx][(p_1224738007[p_1224738007_Idx] + 3)] = ((v_1224738006 >>> 21) | 128);
      buf_1224738005[buf_1224738005_Idx][(p_1224738007[p_1224738007_Idx] + 4)] = (v_1224738006 >>> 28);
      p_1224738007[p_1224738007_Idx] += 5;
    }
    }}}

  
}

function finish_1224737961(b_1224737963, b_1224737963_Idx, buffer_1224737964, buffer_1224737964_Idx) {
              var Temporary4;
              var Temporary5;
              var Temporary6;
              var Temporary7;
                var Temporary8;
                var Temporary9;
                var Temporary10;
                var Temporary11;
                var Temporary12;
                  var Temporary13;
                  var Temporary14;
                  var Temporary15;
                  var Temporary16;
                  var Temporary17;
                  var Temporary18;

    var p_1224737965 = [0];
    Label1: do {
      var sv_1224737984 = ({encodedSize: 0, tag: 0, str: [], cstr: null, buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0});
      var i_486542384 = 0;
      var L_486542385 = (b_1224737963[b_1224737963_Idx].stack).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486542384 < L_486542385)) break Label3;
            sv_1224737984 = b_1224737963[b_1224737963_Idx].stack[i_486542384];
            if ((sv_1224737984.tag == 8)) {
              var Temporary4 = sv_1224737984;
              if (ConstSet20[Temporary4.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'buf\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary4.tag, NTI1224736771)); }
            if ((Temporary4.buf.length == 0)) {
            }
            else {
              var Temporary5 = sv_1224737984;
              if (ConstSet21[Temporary5.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'buf\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary5.tag, NTI1224736771)); }
              buffer_1224737964[buffer_1224737964_Idx].set(Temporary5.buf,p_1224737965[0]);;
              var Temporary6 = sv_1224737984;
              if (ConstSet22[Temporary6.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'buf\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary6.tag, NTI1224736771)); }
              p_1224737965[0] += Temporary6.buf.length;
            }
            
            }
            else {
              if ((sv_1224737984.tag == 9)) {
              Temporary7 = 0;
              }
              else {
              Temporary7 = sv_1224737984.tag;
              }
              
              var tagCode_1224737997 = Temporary7;
              var tag_1224738002 = ((tagCode_1224737997 + (sv_1224737984.encodedSize << 3)) >>> 0);
              writeVaruint32_1224738003(buffer_1224737964, buffer_1224737964_Idx, tag_1224738002, p_1224737965, 0);
              switch (sv_1224737984.tag) {
              case 5:
              case 4:
                break;
              case 2:
                var Temporary8 = sv_1224737984;
                if (ConstSet23[Temporary8.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'i\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary8.tag, NTI1224736771)); }
                buffer_1224737964[buffer_1224737964_Idx].writeInt32LE(Temporary8.i, p_1224737965[0]);
                p_1224737965[0] += 4;
                break;
              case 3:
                var Temporary9 = sv_1224737984;
                if (ConstSet24[Temporary9.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'d\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary9.tag, NTI1224736771)); }
                buffer_1224737964[buffer_1224737964_Idx].writeDoubleLE(Temporary9.d, p_1224737965[0]);
                p_1224737965[0] += 8;
                break;
              case 6:
                var Temporary10 = sv_1224737984;
                if (ConstSet25[Temporary10.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'b\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary10.tag, NTI1224736771)); }
                switch (Temporary10.b) {
                case 0:
                  buffer_1224737964[buffer_1224737964_Idx][p_1224737965[0]] = 1;
                  p_1224737965[0] += 1;
                  break;
                case 1:
                  buffer_1224737964[buffer_1224737964_Idx][p_1224737965[0]] = 0;
                  p_1224737965[0] += 1;
                  break;
                case 2:
                  break;
                }
                break;
              case 0:
                var Temporary11 = sv_1224737984;
                if (ConstSet26[Temporary11.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary11.tag, NTI1224736771)); }
                p_1224737965[0] += (Temporary11.str).length;
                break;
              case 9:
                var Temporary12 = sv_1224737984;
                if (ConstSet27[Temporary12.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'cstr\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary12.tag, NTI1224736771)); }
                p_1224737965[0] += buffer_1224737964[buffer_1224737964_Idx].write(Temporary12.cstr, p_1224737965[0]);
                break;
              case 7:
                  var Temporary13 = sv_1224737984;
                  if (ConstSet28[Temporary13.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'ext\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary13.tag, NTI1224736771)); }
                if ((Temporary13.ext.length == 0)) {
                }
                else {
                  var Temporary14 = sv_1224737984;
                  if (ConstSet29[Temporary14.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'ext\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary14.tag, NTI1224736771)); }
                  buffer_1224737964[buffer_1224737964_Idx].set(Temporary14.ext,p_1224737965[0]);;
                  var Temporary15 = sv_1224737984;
                  if (ConstSet30[Temporary15.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'ext\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary15.tag, NTI1224736771)); }
                  p_1224737965[0] += Temporary15.ext.length;
                }
                
                break;
              case 1:
                  var Temporary16 = sv_1224737984;
                  if (ConstSet31[Temporary16.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'buf\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary16.tag, NTI1224736771)); }
                if ((Temporary16.buf.length == 0)) {
                }
                else {
                  var Temporary17 = sv_1224737984;
                  if (ConstSet32[Temporary17.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'buf\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary17.tag, NTI1224736771)); }
                  buffer_1224737964[buffer_1224737964_Idx].set(Temporary17.buf,p_1224737965[0]);;
                  var Temporary18 = sv_1224737984;
                  if (ConstSet33[Temporary18.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'buf\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary18.tag, NTI1224736771)); }
                  p_1224737965[0] += Temporary18.buf.length;
                }
                
                break;
              case 8:
                break;
              }
            }
            
            i_486542384 += 1;
          }
      } while (false);
    } while (false);

  
}

function finish_1224737956(b_1224737957, b_1224737957_Idx) {
  var result_1224737958 = null;

    var encodedSize_1224737959 = encodingSize_1224737924(b_1224737957, b_1224737957_Idx);
    var r_1224737960 = [Buffer.allocUnsafe(encodedSize_1224737959)];
    finish_1224737961(b_1224737957, b_1224737957_Idx, r_1224737960, 0);
    result_1224737958 = r_1224737960[0];

  return result_1224737958;

}

function newBipfBuilder_486540526() {

function HEX3Aanonymous_486540532(thisHEX60gensym158_486540533, arg0HEX60gensym158_486540534) {
    var thatHEX60gensym158_486540535 = [thisHEX60gensym158_486540533];
    if ((arg0HEX60gensym158_486540534 === undefined)) {
    startArray_1224737061(thatHEX60gensym158_486540535, 0);
    }
    else {
    startArray_486540034(thatHEX60gensym158_486540535, 0, toString_486539388(arg0HEX60gensym158_486540534));
    }
    

  
}
    
function HEX3Aanonymous_486540551(arg0HEX60gensym158_486540552) {
        HEX3Aanonymous_486540532(this, arg0HEX60gensym158_486540552);

      
    }

function HEX3Aanonymous_486540565(this_486540566) {
    var that_486540567 = [this_486540566];
    endArray_1224737789(that_486540567, 0);

  
}
    
function HEX3Aanonymous_486540568() {
        HEX3Aanonymous_486540565(this);

      
    }

function HEX3Aanonymous_486540584(thisHEX60gensym163_486540585, arg0HEX60gensym163_486540586) {
    var thatHEX60gensym163_486540587 = [thisHEX60gensym163_486540585];
    if ((arg0HEX60gensym163_486540586 === undefined)) {
    startMap_1224736884(thatHEX60gensym163_486540587, 0);
    }
    else {
    startMap_486540277(thatHEX60gensym163_486540587, 0, toString_486539388(arg0HEX60gensym163_486540586));
    }
    

  
}
    
function HEX3Aanonymous_486540595(arg0HEX60gensym163_486540596) {
        HEX3Aanonymous_486540584(this, arg0HEX60gensym163_486540596);

      
    }

function HEX3Aanonymous_486540609(this_486540610) {
    var that_486540611 = [this_486540610];
    endMap_1224737849(that_486540611, 0);

  
}
    
function HEX3Aanonymous_486540612() {
        HEX3Aanonymous_486540609(this);

      
    }

function HEX3Aanonymous_486540628(thisHEX60gensym168_486540629, arg0HEX60gensym168_486540630) {
    var thatHEX60gensym168_486540631 = [thisHEX60gensym168_486540629];
    if ((arg0HEX60gensym168_486540630 === undefined)) {
    addNull_1224737587(thatHEX60gensym168_486540631, 0);
    }
    else {
    addNull_486539462(thatHEX60gensym168_486540631, 0, toString_486539388(arg0HEX60gensym168_486540630));
    }
    

  
}
    
function HEX3Aanonymous_486540639(arg0HEX60gensym168_486540640) {
        HEX3Aanonymous_486540628(this, arg0HEX60gensym168_486540640);

      
    }

function HEX3Aanonymous_486540657(thisHEX60gensym171_486540658, arg0HEX60gensym171_486540659, arg1HEX60gensym171_486540660) {
    var thatHEX60gensym171_486540661 = [thisHEX60gensym171_486540658];
    if ((arg1HEX60gensym171_486540660 === undefined)) {
    addString_486540155(thatHEX60gensym171_486540661, 0, toString_486539388(arg0HEX60gensym171_486540659));
    }
    else {
    addString_486539845(thatHEX60gensym171_486540661, 0, toString_486539388(arg0HEX60gensym171_486540659), toString_486539388(arg1HEX60gensym171_486540660));
    }
    

  
}
    
function HEX3Aanonymous_486540675(arg0HEX60gensym171_486540676, arg1HEX60gensym171_486540677) {
        HEX3Aanonymous_486540657(this, arg0HEX60gensym171_486540676, arg1HEX60gensym171_486540677);

      
    }

function HEX3Aanonymous_486540694(thisHEX60gensym174_486540695, arg0HEX60gensym174_486540696, arg1HEX60gensym174_486540697) {
    var thatHEX60gensym174_486540698 = [thisHEX60gensym174_486540695];
    if ((arg1HEX60gensym174_486540697 === undefined)) {
    addInt_1224737161(thatHEX60gensym174_486540698, 0, toInt_486539382(arg0HEX60gensym174_486540696));
    }
    else {
    addInt_486539657(thatHEX60gensym174_486540698, 0, toString_486539388(arg0HEX60gensym174_486540696), toInt_486539382(arg1HEX60gensym174_486540697));
    }
    

  
}
    
function HEX3Aanonymous_486540707(arg0HEX60gensym174_486540708, arg1HEX60gensym174_486540709) {
        HEX3Aanonymous_486540694(this, arg0HEX60gensym174_486540708, arg1HEX60gensym174_486540709);

      
    }

function HEX3Aanonymous_486540726(thisHEX60gensym177_486540727, arg0HEX60gensym177_486540728, arg1HEX60gensym177_486540729) {
    var thatHEX60gensym177_486540730 = [thisHEX60gensym177_486540727];
    if ((arg1HEX60gensym177_486540729 === undefined)) {
    addDouble_1224737246(thatHEX60gensym177_486540730, 0, toDouble_486539385(arg0HEX60gensym177_486540728));
    }
    else {
    addDouble_486539751(thatHEX60gensym177_486540730, 0, toString_486539388(arg0HEX60gensym177_486540728), toDouble_486539385(arg1HEX60gensym177_486540729));
    }
    

  
}
    
function HEX3Aanonymous_486540739(arg0HEX60gensym177_486540740, arg1HEX60gensym177_486540741) {
        HEX3Aanonymous_486540726(this, arg0HEX60gensym177_486540740, arg1HEX60gensym177_486540741);

      
    }

function HEX3Aanonymous_486540758(thisHEX60gensym180_486540759, arg0HEX60gensym180_486540760, arg1HEX60gensym180_486540761) {
    var thatHEX60gensym180_486540762 = [thisHEX60gensym180_486540759];
    if ((arg1HEX60gensym180_486540761 === undefined)) {
    addBool_1224737488(thatHEX60gensym180_486540762, 0, toBool_486539391(arg0HEX60gensym180_486540760));
    }
    else {
    addBool_486539559(thatHEX60gensym180_486540762, 0, toString_486539388(arg0HEX60gensym180_486540760), toBool_486539391(arg1HEX60gensym180_486540761));
    }
    

  
}
    
function HEX3Aanonymous_486540771(arg0HEX60gensym180_486540772, arg1HEX60gensym180_486540773) {
        HEX3Aanonymous_486540758(this, arg0HEX60gensym180_486540772, arg1HEX60gensym180_486540773);

      
    }

function HEX3Aanonymous_486540790(thisHEX60gensym183_486540791, arg0HEX60gensym183_486540792, arg1HEX60gensym183_486540793) {
    var thatHEX60gensym183_486540794 = [thisHEX60gensym183_486540791];
    if ((arg1HEX60gensym183_486540793 === undefined)) {
    addBuffer_1224737335(thatHEX60gensym183_486540794, 0, toBuffer_486539394(arg0HEX60gensym183_486540792));
    }
    else {
    addBuffer_486539940(thatHEX60gensym183_486540794, 0, toString_486539388(arg0HEX60gensym183_486540792), toBuffer_486539394(arg1HEX60gensym183_486540793));
    }
    

  
}
    
function HEX3Aanonymous_486540803(arg0HEX60gensym183_486540804, arg1HEX60gensym183_486540805) {
        HEX3Aanonymous_486540790(this, arg0HEX60gensym183_486540804, arg1HEX60gensym183_486540805);

      
    }

function HEX3Aanonymous_486540822(thisHEX60gensym186_486540823, arg0HEX60gensym186_486540824, arg1HEX60gensym186_486540825) {
    var thatHEX60gensym186_486540826 = [thisHEX60gensym186_486540823];
    if ((arg1HEX60gensym186_486540825 === undefined)) {
    addExtended_1224737666(thatHEX60gensym186_486540826, 0, toBuffer_486539394(arg0HEX60gensym186_486540824));
    }
    else {
    addExtended_486540830(thatHEX60gensym186_486540826, 0, toString_486539388(arg0HEX60gensym186_486540824), toBuffer_486539394(arg1HEX60gensym186_486540825));
    }
    

  
}
    
function HEX3Aanonymous_486540924(arg0HEX60gensym186_486540925, arg1HEX60gensym186_486540926) {
        HEX3Aanonymous_486540822(this, arg0HEX60gensym186_486540925, arg1HEX60gensym186_486540926);

      
    }

function HEX3Aanonymous_486540939(this_486540940) {
  var result_486540941 = null;

    var that_486540942 = [this_486540940];
    result_486540941 = finish_1224737956(that_486540942, 0);
    (result_486540941)[bipfBufferSymbol_486539358[0]] = true;

  return result_486540941;

}
    
function HEX3Aanonymous_486540951() {
      var result_486540952 = null;

        result_486540952 = HEX3Aanonymous_486540939(this);

      return result_486540952;

    }

  var result_486540527 = null;

    result_486540527 = {stack: [], pointers: []};
    var prototype_486540528 = result_486540527;
    prototype_486540528.startArray = HEX3Aanonymous_486540551;
    prototype_486540528.endArray = HEX3Aanonymous_486540568;
    prototype_486540528.startMap = HEX3Aanonymous_486540595;
    prototype_486540528.endMap = HEX3Aanonymous_486540612;
    prototype_486540528.addNull = HEX3Aanonymous_486540639;
    prototype_486540528.addString = HEX3Aanonymous_486540675;
    prototype_486540528.addInt = HEX3Aanonymous_486540707;
    prototype_486540528.addDouble = HEX3Aanonymous_486540739;
    prototype_486540528.addBool = HEX3Aanonymous_486540771;
    prototype_486540528.addBuffer = HEX3Aanonymous_486540803;
    prototype_486540528.addExtended = HEX3Aanonymous_486540924;
    prototype_486540528.finish = HEX3Aanonymous_486540951;

  return result_486540527;

}

function dnKind_486539400(obj_486539401) {
      var Temporary1;
      var Temporary2;

  var result_486539402 = 0;

    var jsType_486539403 = typeof(obj_486539401);
    if ((jsType_486539403 == "undefined")) {
    result_486539402 = 0;
    }
    else {
    if ((jsType_486539403 == "boolean")) {
    result_486539402 = 2;
    }
    else {
    if ((jsType_486539403 == "number")) {
      if (!(Number.isSafeInteger(obj_486539401))) Temporary2 = false; else {        Temporary2 = (-2147483648 <= toInt_486539382(obj_486539401));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (toInt_486539382(obj_486539401) <= 2147483647);      }    if (Temporary1) {
    result_486539402 = 3;
    }
    else {
    if ((Number.isFinite(obj_486539401))) {
    result_486539402 = 4;
    }
    else {
      raiseException({message: makeNimstrLit("Unsupported number (formely \'unknown type\' error)"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    }
    }
    else {
    if ((jsType_486539403 == "string")) {
    result_486539402 = 5;
    }
    else {
    if ((jsType_486539403 == "object")) {
    if ((obj_486539401 === null)) {
    result_486539402 = 1;
    }
    else {
    if ((obj_486539401 instanceof Uint8Array)) {
    if (isBipfBuffer_486539360(obj_486539401)) {
    result_486539402 = 7;
    }
    else {
      result_486539402 = 6;
    }
    
    }
    else {
    if ((Array.isArray(obj_486539401))) {
    result_486539402 = 8;
    }
    else {
      result_486539402 = 9;
    }
    }}
    }
    else {
      raiseException({message: (makeNimstrLit("Unsupported type (formely \'unknown type\'): ") || []).concat(cstrToNimstr(jsType_486539403) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    }}}}

  return result_486539402;

}

function addBipfBuffer_486540400(b_486540402, b_486540402_Idx, k_486540403, buf_486540404) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;

    if (((b_486540402[b_486540402_Idx].pointers).length == 0)) {
    raiseException({message: makeNimstrLit("Cannot add value with a key at root"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    else {
      var pHEX60gensym145_486540433 = (Temporary1 = HEX5BHEX5D_1224736967(b_486540402[b_486540402_Idx].pointers, 1), Temporary1)[0][Temporary1[1]];
      if ((b_486540402[b_486540402_Idx].stack[pHEX60gensym145_486540433].tag == 5)) {
      var Temporary2 = b_486540402[b_486540402_Idx].stack[pHEX60gensym145_486540433];
      if (ConstSet34[Temporary2.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary2.tag, NTI1224736771)); }
      Temporary2.size += 1;
      var kHEX60gensym145_486540442 = {tag: 9, cstr: k_486540403, encodedSize: Buffer.byteLength(k_486540403), str: [], buf: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var vHEX60gensym145_486540443 = {tag: 8, buf: buf_486540404, encodedSize: buf_486540404.length, str: [], cstr: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
      var uHEX60gensym152_486540456 = (kHEX60gensym145_486540442.encodedSize << 3);
      if ((uHEX60gensym152_486540456 < 128)) {
      Temporary3 = 1;
      }
      else {
      if ((uHEX60gensym152_486540456 < 16384)) {
      Temporary3 = 2;
      }
      else {
      if ((uHEX60gensym152_486540456 < 2097152)) {
      Temporary3 = 3;
      }
      else {
      if ((uHEX60gensym152_486540456 < 268435456)) {
      Temporary3 = 4;
      }
      else {
      Temporary3 = 5;
      }
      }}}
      var addedHEX60gensym145_486540457 = ((kHEX60gensym145_486540442.encodedSize + vHEX60gensym145_486540443.encodedSize) + Temporary3);
      Temporary4 = kHEX60gensym145_486540442;
      kHEX60gensym145_486540442 = genericReset(kHEX60gensym145_486540442, NTI1224736772);
      b_486540402[b_486540402_Idx].stack.push(Temporary4);;
      b_486540402[b_486540402_Idx].stack[pHEX60gensym145_486540433].encodedSize += addedHEX60gensym145_486540457;
      Temporary5 = vHEX60gensym145_486540443;
      vHEX60gensym145_486540443 = genericReset(vHEX60gensym145_486540443, NTI1224736772);
      b_486540402[b_486540402_Idx].stack.push(Temporary5);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value with a key in an array"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function toBipfBuffer_486539397(n_486539398) {
  var result_486539399 = null;

    result_486539399 = n_486539398;

  return result_486539399;

}

function addNodeWithKey_486539455(builder_486539458, builder_486539458_Idx, key_486539459, obj_486539460) {
    var nodeKind_486539461 = dnKind_486539400(obj_486539460);
    switch (nodeKind_486539461) {
    case 0:
      break;
    case 1:
      addNull_486539462(builder_486539458, builder_486539458_Idx, key_486539459);
      break;
    case 2:
      addBool_486539559(builder_486539458, builder_486539458_Idx, key_486539459, toBool_486539391(obj_486539460));
      break;
    case 3:
      addInt_486539657(builder_486539458, builder_486539458_Idx, key_486539459, toInt_486539382(obj_486539460));
      break;
    case 4:
      addDouble_486539751(builder_486539458, builder_486539458_Idx, key_486539459, toDouble_486539385(obj_486539460));
      break;
    case 5:
      addString_486539845(builder_486539458, builder_486539458_Idx, key_486539459, toString_486539388(obj_486539460));
      break;
    case 6:
      addBuffer_486539940(builder_486539458, builder_486539458_Idx, key_486539459, toBuffer_486539394(obj_486539460));
      break;
    case 8:
      startArray_486540034(builder_486539458, builder_486539458_Idx, key_486539459);
      Label1: do {
        var value_486540133 = null;
        var v_486542399 = null;
        for (var k in obj_486539460) {
          if (!obj_486539460.hasOwnProperty(k)) continue;
          v_486542399=obj_486539460[k];
        value_486540133 = v_486542399;
        addNode_486540150(builder_486539458, builder_486539458_Idx, value_486540133);
        }
      } while (false);
      endArray_1224737789(builder_486539458, builder_486539458_Idx);
      break;
    case 9:
      startMap_486540277(builder_486539458, builder_486539458_Idx, key_486539459);
      Label2: do {
        var key_486540376 = null;
        var value_486540377 = null;
        Label3: do {
          var key_486542402 = null;
          var value_486542403 = null;
          var k_486542404 = null;
          var v_486542405 = null;
          for (var k_486542404 in obj_486539460) {
            if (!obj_486539460.hasOwnProperty(k_486542404)) continue;
            v_486542405=obj_486539460[k_486542404];
          key_486542402 = k_486542404;
          value_486542403 = v_486542405;
          key_486540376 = key_486542402;
          value_486540377 = (value_486542403);
          addNodeWithKey_486539455(builder_486539458, builder_486539458_Idx, key_486540376, value_486540377);
          }
        } while (false);
      } while (false);
      endMap_1224737849(builder_486539458, builder_486539458_Idx);
      break;
    case 7:
      addBipfBuffer_486540400(builder_486539458, builder_486539458_Idx, key_486539459, toBipfBuffer_486539397(obj_486539460));
      break;
    }

  
}

function addBipfBuffer_1224737420(b_1224737421, b_1224737421_Idx, buff_1224737422) {
    var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;

    var vHEX60gensym62_1224737435 = {tag: 8, buf: buff_1224737422, encodedSize: buff_1224737422.length, str: [], cstr: null, i: 0, d: 0.0, b: 0, ext: null, size: 0};
    if (((b_1224737421[b_1224737421_Idx].pointers).length == 0)) {
    if ((0 < (b_1224737421[b_1224737421_Idx].stack).length)) {
    raiseException({message: makeNimstrLit("Cannot add value at root when root is not empty"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    Temporary1 = vHEX60gensym62_1224737435;
    vHEX60gensym62_1224737435 = genericReset(vHEX60gensym62_1224737435, NTI1224736772);
    b_1224737421[b_1224737421_Idx].stack.push(Temporary1);;
    }
    else {
      var pHEX60gensym62_1224737457 = (Temporary2 = HEX5BHEX5D_1224736967(b_1224737421[b_1224737421_Idx].pointers, 1), Temporary2)[0][Temporary2[1]];
      if ((b_1224737421[b_1224737421_Idx].stack[pHEX60gensym62_1224737457].tag == 4)) {
      var Temporary3 = b_1224737421[b_1224737421_Idx].stack[pHEX60gensym62_1224737457];
      if (ConstSet35[Temporary3.tag]===undefined) { raiseFieldError2(makeNimstrLit("field \'size\' is not accessible for type \'StackValue\' using \'tag = "), reprDiscriminant(Temporary3.tag, NTI1224736771)); }
      Temporary3.size += 1;
      var addedHEX60gensym62_1224737466 = vHEX60gensym62_1224737435.encodedSize;
      b_1224737421[b_1224737421_Idx].stack[pHEX60gensym62_1224737457].encodedSize += addedHEX60gensym62_1224737466;
      Temporary4 = vHEX60gensym62_1224737435;
      vHEX60gensym62_1224737435 = genericReset(vHEX60gensym62_1224737435, NTI1224736772);
      b_1224737421[b_1224737421_Idx].stack.push(Temporary4);;
      }
      else {
        raiseException({message: makeNimstrLit("Cannot add a value in a map without a key"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
      }
      
    }
    

  
}

function addNode_486540150(builder_486540152, builder_486540152_Idx, obj_486540153) {
    var nodeKind_486540154 = dnKind_486539400(obj_486540153);
    switch (nodeKind_486540154) {
    case 0:
      break;
    case 1:
      addNull_1224737587(builder_486540152, builder_486540152_Idx);
      break;
    case 2:
      addBool_1224737488(builder_486540152, builder_486540152_Idx, toBool_486539391(obj_486540153));
      break;
    case 3:
      addInt_1224737161(builder_486540152, builder_486540152_Idx, toInt_486539382(obj_486540153));
      break;
    case 4:
      addDouble_1224737246(builder_486540152, builder_486540152_Idx, toDouble_486539385(obj_486540153));
      break;
    case 5:
      addString_486540155(builder_486540152, builder_486540152_Idx, toString_486539388(obj_486540153));
      break;
    case 6:
      addBuffer_1224737335(builder_486540152, builder_486540152_Idx, toBuffer_486539394(obj_486540153));
      break;
    case 8:
      startArray_1224737061(builder_486540152, builder_486540152_Idx);
      Label1: do {
        var value_486540232 = null;
        var v_486542388 = null;
        for (var k in obj_486540153) {
          if (!obj_486540153.hasOwnProperty(k)) continue;
          v_486542388=obj_486540153[k];
        value_486540232 = v_486542388;
        addNode_486540150(builder_486540152, builder_486540152_Idx, value_486540232);
        }
      } while (false);
      endArray_1224737789(builder_486540152, builder_486540152_Idx);
      break;
    case 9:
      startMap_1224736884(builder_486540152, builder_486540152_Idx);
      Label2: do {
        var key_486540253 = null;
        var value_486540254 = null;
        Label3: do {
          var key_486542394 = null;
          var value_486542395 = null;
          var k_486542396 = null;
          var v_486542397 = null;
          for (var k_486542396 in obj_486540153) {
            if (!obj_486540153.hasOwnProperty(k_486542396)) continue;
            v_486542397=obj_486540153[k_486542396];
          key_486542394 = k_486542396;
          value_486542395 = v_486542397;
          key_486540253 = key_486542394;
          value_486540254 = (value_486542395);
          addNodeWithKey_486539455(builder_486540152, builder_486540152_Idx, key_486540253, value_486540254);
          }
        } while (false);
      } while (false);
      endMap_1224737849(builder_486540152, builder_486540152_Idx);
      break;
    case 7:
      addBipfBuffer_1224737420(builder_486540152, builder_486540152_Idx, toBipfBuffer_486539397(obj_486540153));
      break;
    }

  
}

function addJsObject_486540486(b_486540487, b_486540487_Idx, node_486540488) {
    addNode_486540150(b_486540487, b_486540487_Idx, node_486540488);

  
}

function isNimException_33556519() {
    return lastJSError && lastJSError.m_type;

  
}

function getCurrentException() {
  var result_33556522 = null;

    if (isNimException_33556519()) {
    result_33556522 = lastJSError;
    }
    

  return result_33556522;

}

function initReprClosure_33557468(cl_33557469) {
    cl_33557469.recDepth = -1;
    cl_33557469.indent = 0;

  
}

function HEX24_335544326(x_335544327) {
  var result_335544328 = [[]];

    addInt_251658436(result_335544328, 0, x_335544327);

  return result_335544328[0];

}

function reprInt(x_33557363) {
  var result_33557364 = [];

    result_33557364 = nimCopy(null, HEX24_335544326(x_33557363), NTI33554439);

  return result_33557364;

}

function reprChar(x_33557413) {
  var result_33557414 = [];

    result_33557414 = nimCopy(null, makeNimstrLit("\'"), NTI33554439);
    switch (x_33557413) {
    case 34:
      result_33557414.push.apply(result_33557414, makeNimstrLit("\\\""));;
      break;
    case 92:
      result_33557414.push.apply(result_33557414, makeNimstrLit("\\\\"));;
      break;
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      result_33557414.push.apply(result_33557414, (makeNimstrLit("\\") || []).concat(reprInt(x_33557413) || []));;
      break;
    default: 
      addChar(result_33557414, x_33557413);;
      break;
    }
    result_33557414.push.apply(result_33557414, makeNimstrLit("\'"));;

  return result_33557414;

}

function reprBool(x_33557382) {
  var result_33557383 = [];

    if (x_33557382) {
    result_33557383 = nimCopy(null, makeNimstrLit("true"), NTI33554439);
    }
    else {
      result_33557383 = nimCopy(null, makeNimstrLit("false"), NTI33554439);
    }
    

  return result_33557383;

}

function nimFloatToString_352321662(a_352321663) {
  var result_352321664 = null;

        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_352321663))
      result_352321664 = a_352321663 === 0 && 1 / a_352321663 < 0 ? "-0.0" : a_352321663+".0"
    else {
      result_352321664 = a_352321663+""
      if(nimOnlyDigitsOrMinus(result_352321664)){
        result_352321664 = a_352321663+".0"
      }
    }
  

  return result_352321664;

}

function addFloat_33557372(result_33557374, result_33557374_Idx, x_33557375) {
    add_33556419(result_33557374, result_33557374_Idx, nimFloatToString_352321662(x_33557375));

  
}

function HEX24_33557368(x_33557370) {
  var result_33557371 = [[]];

    addFloat_33557372(result_33557371, 0, x_33557370);

  return result_33557371[0];

}

function reprFloat(x_33557366) {
  var result_33557367 = [];

    result_33557367 = nimCopy(null, HEX24_33557368(x_33557366), NTI33554439);

  return result_33557367;

}

function reprStrAux_33557428(result_33557430, result_33557430_Idx, s_33557431, len_33557432) {
    result_33557430[result_33557430_Idx].push.apply(result_33557430[result_33557430_Idx], makeNimstrLit("\""));;
    Label1: do {
      var i_33557437 = 0;
      var colontmp__486542408 = 0;
      colontmp__486542408 = (len_33557432 - 1);
      var res_486542409 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_486542409 <= colontmp__486542408)) break Label3;
            i_33557437 = res_486542409;
            var c_33557438 = s_33557431[i_33557437];
            switch (c_33557438) {
            case 34:
              result_33557430[result_33557430_Idx].push.apply(result_33557430[result_33557430_Idx], makeNimstrLit("\\\""));;
              break;
            case 92:
              result_33557430[result_33557430_Idx].push.apply(result_33557430[result_33557430_Idx], makeNimstrLit("\\\\"));;
              break;
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
              result_33557430[result_33557430_Idx].push.apply(result_33557430[result_33557430_Idx], (makeNimstrLit("\\") || []).concat(reprInt(c_33557438) || []));;
              break;
            default: 
              addChar(result_33557430[result_33557430_Idx], c_33557438);;
              break;
            }
            res_486542409 += 1;
          }
      } while (false);
    } while (false);
    result_33557430[result_33557430_Idx].push.apply(result_33557430[result_33557430_Idx], makeNimstrLit("\""));;

  
}

function reprStr(s_33557426) {
  var result_33557427 = [[]];

    reprStrAux_33557428(result_33557427, 0, s_33557426, (s_33557426).length);

  return result_33557427[0];

}

function reprStrAux_33557538(result_33557540, result_33557540_Idx, s_33557541, len_33557542) {
    result_33557540[result_33557540_Idx].push.apply(result_33557540[result_33557540_Idx], makeNimstrLit("\""));;
    Label1: do {
      var i_33557547 = 0;
      var colontmp__486542412 = 0;
      colontmp__486542412 = (len_33557542 - 1);
      var res_486542413 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_486542413 <= colontmp__486542412)) break Label3;
            i_33557547 = res_486542413;
            var c_33557548 = s_33557541.charCodeAt(i_33557547);
            switch (c_33557548) {
            case 34:
              result_33557540[result_33557540_Idx].push.apply(result_33557540[result_33557540_Idx], makeNimstrLit("\\\""));;
              break;
            case 92:
              result_33557540[result_33557540_Idx].push.apply(result_33557540[result_33557540_Idx], makeNimstrLit("\\\\"));;
              break;
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
              result_33557540[result_33557540_Idx].push.apply(result_33557540[result_33557540_Idx], (makeNimstrLit("\\") || []).concat(reprInt(c_33557548) || []));;
              break;
            default: 
              addChar(result_33557540[result_33557540_Idx], c_33557548);;
              break;
            }
            res_486542413 += 1;
          }
      } while (false);
    } while (false);
    result_33557540[result_33557540_Idx].push.apply(result_33557540[result_33557540_Idx], makeNimstrLit("\""));;

  
}

function addSetElem_33557442(result_33557443, result_33557443_Idx, elem_33557444, typ_33557445) {
    switch (typ_33557445.kind) {
    case 14:
      result_33557443[result_33557443_Idx].push.apply(result_33557443[result_33557443_Idx], reprEnum(elem_33557444, typ_33557445));;
      break;
    case 1:
      result_33557443[result_33557443_Idx].push.apply(result_33557443[result_33557443_Idx], reprBool((!!(elem_33557444))));;
      break;
    case 2:
      result_33557443[result_33557443_Idx].push.apply(result_33557443[result_33557443_Idx], reprChar(elem_33557444));;
      break;
    case 20:
      addSetElem_33557442(result_33557443, result_33557443_Idx, elem_33557444, typ_33557445.base);
      break;
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 41:
    case 42:
      result_33557443[result_33557443_Idx].push.apply(result_33557443[result_33557443_Idx], reprInt(elem_33557444));;
      break;
    default: 
      result_33557443[result_33557443_Idx].push.apply(result_33557443[result_33557443_Idx], makeNimstrLit(" (invalid data!)"));;
      break;
    }

  
}

function reprSetAux_33557455(result_33557456, result_33557456_Idx, s_33557457, typ_33557458) {
    result_33557456[result_33557456_Idx].push.apply(result_33557456[result_33557456_Idx], makeNimstrLit("{"));;
    var first_33557459 = true;
    Label1: do {
      var el_33557460 = 0;
      var len_486542417 = 0;
      var yieldRes_486542418 = 0;
      var i_486542419 = 0;
        var setObjKeys = Object.getOwnPropertyNames(s_33557457);
  len_486542417 = setObjKeys.length;
  
      Label2: do {
          Label3: while (true) {
          if (!(i_486542419 < len_486542417)) break Label3;
            yieldRes_486542418 = parseInt(setObjKeys[i_486542419],10);

            el_33557460 = yieldRes_486542418;
            if (first_33557459) {
            first_33557459 = false;
            }
            else {
            result_33557456[result_33557456_Idx].push.apply(result_33557456[result_33557456_Idx], makeNimstrLit(", "));;
            }
            
            addSetElem_33557442(result_33557456, result_33557456_Idx, el_33557460, typ_33557458.base);
            i_486542419 += 1;
          }
      } while (false);
    } while (false);
    result_33557456[result_33557456_Idx].push.apply(result_33557456[result_33557456_Idx], makeNimstrLit("}"));;

  
}

function reprSet(e_33557462, typ_33557463) {
  var result_33557464 = [[]];

    reprSetAux_33557455(result_33557464, 0, e_33557462, typ_33557463);

  return result_33557464[0];

}

function reprRecordAux_33557504(result_33557505, result_33557505_Idx, o_33557506, o_33557506_Idx, typ_33557507, cl_33557508) {
    result_33557505[result_33557505_Idx].push.apply(result_33557505[result_33557505_Idx], makeNimstrLit("["));;
    var first_33557509 = true;
    var val_33557510 = o_33557506, val_33557510_Idx = o_33557506_Idx;
    if ((typ_33557507.node.len == 0)) {
    var key_33557511 = typ_33557507.node.name;
    result_33557505[result_33557505_Idx].push.apply(result_33557505[result_33557505_Idx], (cstrToNimstr(key_33557511) || []).concat(makeNimstrLit(" = ") || []));;
    val_33557510 = o_33557506[key_33557511];

    reprAux_33557470(result_33557505, result_33557505_Idx, val_33557510, val_33557510_Idx, typ_33557507.node.typ, cl_33557508);
    }
    else {
      Label1: do {
        var i_33557516 = 0;
        var colontmp__486542422 = 0;
        colontmp__486542422 = (typ_33557507.node.len - 1);
        var res_486542423 = 0;
        Label2: do {
            Label3: while (true) {
            if (!(res_486542423 <= colontmp__486542422)) break Label3;
              i_33557516 = res_486542423;
              if (first_33557509) {
              first_33557509 = false;
              }
              else {
              result_33557505[result_33557505_Idx].push.apply(result_33557505[result_33557505_Idx], makeNimstrLit(",\x0A"));;
              }
              
              var key_33557517 = typ_33557507.node.sons[i_33557516].name;
              result_33557505[result_33557505_Idx].push.apply(result_33557505[result_33557505_Idx], (cstrToNimstr(key_33557517) || []).concat(makeNimstrLit(" = ") || []));;
              val_33557510 = o_33557506[key_33557517];

              reprAux_33557470(result_33557505, result_33557505_Idx, val_33557510, val_33557510_Idx, typ_33557507.node.sons[i_33557516].typ, cl_33557508);
              res_486542423 += 1;
            }
        } while (false);
      } while (false);
    }
    
    result_33557505[result_33557505_Idx].push.apply(result_33557505[result_33557505_Idx], makeNimstrLit("]"));;

  
}

function reprRecord(o_33557519, o_33557519_Idx, typ_33557520, cl_33557521) {
  var result_33557522 = [[]];

    reprRecordAux_33557504(result_33557522, 0, o_33557519, o_33557519_Idx, typ_33557520, cl_33557521);

  return result_33557522[0];

}

function reprArray(a_33557476, a_33557476_Idx, typ_33557477, cl_33557478) {
    var Temporary1;

  var result_33557479 = [[]];

    if ((typ_33557477.kind == 24)) {
    Temporary1 = makeNimstrLit("@[");
    }
    else {
    Temporary1 = makeNimstrLit("[");
    }
    
    result_33557479[0] = nimCopy(null, Temporary1, NTI33554439);
    var len_33557484 = 0;
    var i_33557485 = 0;
    len_33557484 = a_33557476.length;

    var dereffed_33557486 = a_33557476, dereffed_33557486_Idx = a_33557476_Idx;
    Label2: do {
      var i_33557491 = 0;
      var colontmp__486542426 = 0;
      colontmp__486542426 = (len_33557484 - 1);
      var res_486542427 = 0;
      Label3: do {
          Label4: while (true) {
          if (!(res_486542427 <= colontmp__486542426)) break Label4;
            i_33557491 = res_486542427;
            if ((0 < i_33557491)) {
            result_33557479[0].push.apply(result_33557479[0], makeNimstrLit(", "));;
            }
            
                dereffed_33557486_Idx = i_33557491;
    dereffed_33557486 = a_33557476[dereffed_33557486_Idx];
    
            reprAux_33557470(result_33557479, 0, dereffed_33557486, dereffed_33557486_Idx, typ_33557477.base, cl_33557478);
            res_486542427 += 1;
          }
      } while (false);
    } while (false);
    result_33557479[0].push.apply(result_33557479[0], makeNimstrLit("]"));;

  return result_33557479[0];

}

function reprPointer(p_33557378, p_33557378_Idx) {
  var result_33557379 = [];

    var tmp_33557380 = 0;
    tmp_33557380 = p_33557378_Idx || 0;
    result_33557379 = nimCopy(null, HEX24_335544323(tmp_33557380), NTI33554439);

  return result_33557379;

}

function isPointedToNil_33557492(p_33557493, p_33557493_Idx) {
  var result_33557494 = false;

    if (p_33557493 === null) {result_33557494 = true};


  return result_33557494;

}

function reprRef_33557495(result_33557496, result_33557496_Idx, p_33557497, p_33557497_Idx, typ_33557498, cl_33557499) {
  BeforeRet: do {
    if (isPointedToNil_33557492(p_33557497, p_33557497_Idx)) {
    result_33557496[result_33557496_Idx].push.apply(result_33557496[result_33557496_Idx], makeNimstrLit("nil"));;
    break BeforeRet;
    }
    
    result_33557496[result_33557496_Idx].push.apply(result_33557496[result_33557496_Idx], (makeNimstrLit("ref ") || []).concat(reprPointer(p_33557497, p_33557497_Idx) || []));;
    result_33557496[result_33557496_Idx].push.apply(result_33557496[result_33557496_Idx], makeNimstrLit(" --> "));;
    if (!((typ_33557498.base.kind == 16))) {
        if (p_33557497 != null && p_33557497.length > 0) {
      p_33557497 = p_33557497[p_33557497_Idx];
    }
    
    }
    
    reprAux_33557470(result_33557496, result_33557496_Idx, p_33557497, p_33557497_Idx, typ_33557498.base, cl_33557499);
  } while (false);

  
}

function reprJsonStringify(p_33557524) {
  var result_33557525 = [];

    var tmp_33557526 = null;
    tmp_33557526 = JSON.stringify(p_33557524);

    result_33557525 = nimCopy(null, cstrToNimstr(tmp_33557526), NTI33554439);

  return result_33557525;

}

function reprAux_33557470(result_33557471, result_33557471_Idx, p_33557472, p_33557472_Idx, typ_33557473, cl_33557474) {
  BeforeRet: do {
    if ((cl_33557474.recDepth == 0)) {
    result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], makeNimstrLit("..."));;
    break BeforeRet;
    }
    
    cl_33557474.recDepth -= 1;
    switch (typ_33557473.kind) {
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprInt(p_33557472, p_33557472_Idx));;
      break;
    case 2:
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprChar(p_33557472, p_33557472_Idx));;
      break;
    case 1:
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprBool(p_33557472, p_33557472_Idx));;
      break;
    case 36:
    case 37:
    case 38:
    case 39:
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprFloat(p_33557472, p_33557472_Idx));;
      break;
    case 28:
      var fp_33557536 = 0;
      fp_33557536 = p_33557472;

      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprStr(p_33557472, p_33557472_Idx));;
      break;
    case 29:
      var fp_33557537 = null;
      fp_33557537 = p_33557472;

      if ((fp_33557537 == null)) {
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], makeNimstrLit("nil"));;
      }
      else {
      reprStrAux_33557538(result_33557471, result_33557471_Idx, fp_33557537, ((fp_33557537) == null ? 0 : (fp_33557537).length));
      }
      
      break;
    case 14:
    case 15:
      var fp_33557552 = 0;
      fp_33557552 = p_33557472;

      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprEnum(fp_33557552, typ_33557473));;
      break;
    case 19:
      var fp_33557553 = 0;
      fp_33557553 = p_33557472;

      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprSet(fp_33557553, typ_33557473));;
      break;
    case 20:
      reprAux_33557470(result_33557471, result_33557471_Idx, p_33557472, p_33557472_Idx, typ_33557473.base, cl_33557474);
      break;
    case 17:
    case 18:
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprRecord(p_33557472, p_33557472_Idx, typ_33557473, cl_33557474));;
      break;
    case 16:
    case 4:
    case 24:
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprArray(p_33557472, p_33557472_Idx, typ_33557473, cl_33557474));;
      break;
    case 26:
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprPointer(p_33557472, p_33557472_Idx));;
      break;
    case 21:
    case 22:
      reprRef_33557495(result_33557471, result_33557471_Idx, p_33557472, p_33557472_Idx, typ_33557473, cl_33557474);
      break;
    case 25:
      if (isPointedToNil_33557492(p_33557472, p_33557472_Idx)) {
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], makeNimstrLit("nil"));;
      }
      else {
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], reprPointer(p_33557472, p_33557472_Idx));;
      }
      
      break;
    default: 
      result_33557471[result_33557471_Idx].push.apply(result_33557471[result_33557471_Idx], (makeNimstrLit("(invalid data!)") || []).concat(reprJsonStringify(p_33557472, p_33557472_Idx) || []));;
      break;
    }
    cl_33557474.recDepth += 1;
  } while (false);

  
}

function serialize_486540965(obj_486540966) {
    var Temporary2;

  var result_486540967 = null;

    var builder_486540968 = [newBipfBuilder_486540526()];
++excHandler;
    Temporary2 = framePtr;
    try {
    addJsObject_486540486(builder_486540968, 0, obj_486540966);
    result_486540967 = finish_1224737956(builder_486540968, 0);
    (result_486540967)[bipfBufferSymbol_486539358[0]] = true;
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = Temporary2;
    if (lastJSError && (isObj(lastJSError.m_type, NTI33555112))) {
    var e_486540977 = getCurrentException();
    raiseException({message: (makeNimstrLit("Error while serializing object: ") || []).concat(e_486540977.message || [],makeNimstrLit(" obj:") || [],reprAny(obj_486540966, null, NTI1056964681) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = Temporary2;
    }

  return result_486540967;

}

function deserializeNext_486541084(factory_486541088, factory_486541088_Idx, buffer_486541089, p_486541090, p_486541090_Idx) {
    var Temporary1;
      var Temporary11;
      var Temporary12;

  var result_486541091 = null;

    var bHEX60gensym215_486541095 = buffer_486541089[p_486541090[p_486541090_Idx]];
    var resultHEX60gensym215_486541096 = ((bHEX60gensym215_486541095 & 127) >>> 0);
    p_486541090[p_486541090_Idx] += 1;
    if (!(((bHEX60gensym215_486541095 & 128) == 0))) {
    bHEX60gensym215_486541095 = buffer_486541089[p_486541090[p_486541090_Idx]];
    resultHEX60gensym215_486541096 = ((resultHEX60gensym215_486541096 + (((bHEX60gensym215_486541095 & 127) >>> 0) << 7)) >>> 0);
    p_486541090[p_486541090_Idx] += 1;
    if (!(((bHEX60gensym215_486541095 & 128) == 0))) {
    bHEX60gensym215_486541095 = buffer_486541089[p_486541090[p_486541090_Idx]];
    resultHEX60gensym215_486541096 = ((resultHEX60gensym215_486541096 + (((bHEX60gensym215_486541095 & 127) >>> 0) << 14)) >>> 0);
    p_486541090[p_486541090_Idx] += 1;
    if (!(((bHEX60gensym215_486541095 & 128) == 0))) {
    bHEX60gensym215_486541095 = buffer_486541089[p_486541090[p_486541090_Idx]];
    resultHEX60gensym215_486541096 = ((resultHEX60gensym215_486541096 + (((bHEX60gensym215_486541095 & 127) >>> 0) << 21)) >>> 0);
    p_486541090[p_486541090_Idx] += 1;
    if (!(((bHEX60gensym215_486541095 & 128) == 0))) {
    bHEX60gensym215_486541095 = buffer_486541089[p_486541090[p_486541090_Idx]];
    resultHEX60gensym215_486541096 = ((resultHEX60gensym215_486541096 + (((bHEX60gensym215_486541095 & 127) >>> 0) << 28)) >>> 0);
    p_486541090[p_486541090_Idx] += 1;
    if (!(((bHEX60gensym215_486541095 & 128) == 0))) {
    raiseException({message: makeNimstrLit("Malformed Varint"), parent: null, m_type: NTI33555112, name: null, trace: [], up: null}, "Exception");
    }
    
    }
    
    }
    
    }
    
    }
    
    var prefix_486541150 = resultHEX60gensym215_486541096;
    var size_486541155 = (prefix_486541150 >>> 3);
    var tag_486541156 = (prefix_486541150 & 7);
    switch (tag_486541156) {
    case 0:
      Label2: do {
        var pendHEX60gensym224_486541159 = (p_486541090[p_486541090_Idx] + size_486541155);
        var resultHEX60gensym224_486541163 = (buffer_486541089.toString('utf8', p_486541090[p_486541090_Idx], pendHEX60gensym224_486541159));
        p_486541090[p_486541090_Idx] = pendHEX60gensym224_486541159;
      } while (false);
      Temporary1 = resultHEX60gensym224_486541163;
      break;
    case 1:
      Label3: do {
        var pendHEX60gensym225_486541166 = (p_486541090[p_486541090_Idx] + size_486541155);
        var resultHEX60gensym225_486541170 = (buffer_486541089.subarray(p_486541090[p_486541090_Idx], pendHEX60gensym225_486541166));
        p_486541090[p_486541090_Idx] = pendHEX60gensym225_486541166;
      } while (false);
      Temporary1 = resultHEX60gensym225_486541170;
      break;
    case 2:
      Label4: do {
        var resultHEX60gensym226_486541175 = (buffer_486541089.readInt32LE(p_486541090[p_486541090_Idx]));
        p_486541090[p_486541090_Idx] += size_486541155;
      } while (false);
      Temporary1 = resultHEX60gensym226_486541175;
      break;
    case 3:
      Label5: do {
        var resultHEX60gensym227_486541184 = (buffer_486541089.readDoubleLE(p_486541090[p_486541090_Idx]));
        p_486541090[p_486541090_Idx] += size_486541155;
      } while (false);
      Temporary1 = resultHEX60gensym227_486541184;
      break;
    case 4:
      var stackHEX60gensym228_486541198 = [];
      var endOffsetHEX60gensym228_486541199 = (p_486541090[p_486541090_Idx] + size_486541155);
      Label6: do {
          Label7: while (true) {
          if (!(p_486541090[p_486541090_Idx] < endOffsetHEX60gensym228_486541199)) break Label7;
            stackHEX60gensym228_486541198.push(deserializeNext_486541084(factory_486541088, factory_486541088_Idx, buffer_486541089, p_486541090, p_486541090_Idx));;
          }
      } while (false);
      Temporary1 = (stackHEX60gensym228_486541198);
      break;
    case 5:
      var resultHEX60gensym230_486541222 = {};
      var endOffsetHEX60gensym230_486541223 = (p_486541090[p_486541090_Idx] + size_486541155);
      Label8: do {
          Label9: while (true) {
          if (!(p_486541090[p_486541090_Idx] < endOffsetHEX60gensym230_486541223)) break Label9;
            var bHEX60gensym233_486541227 = buffer_486541089[p_486541090[p_486541090_Idx]];
            var resultHEX60gensym233_486541228 = ((bHEX60gensym233_486541227 & 127) >>> 0);
            p_486541090[p_486541090_Idx] += 1;
            if (!(((bHEX60gensym233_486541227 & 128) == 0))) {
            bHEX60gensym233_486541227 = buffer_486541089[p_486541090[p_486541090_Idx]];
            resultHEX60gensym233_486541228 = ((resultHEX60gensym233_486541228 + (((bHEX60gensym233_486541227 & 127) >>> 0) << 7)) >>> 0);
            p_486541090[p_486541090_Idx] += 1;
            if (!(((bHEX60gensym233_486541227 & 128) == 0))) {
            bHEX60gensym233_486541227 = buffer_486541089[p_486541090[p_486541090_Idx]];
            resultHEX60gensym233_486541228 = ((resultHEX60gensym233_486541228 + (((bHEX60gensym233_486541227 & 127) >>> 0) << 14)) >>> 0);
            p_486541090[p_486541090_Idx] += 1;
            if (!(((bHEX60gensym233_486541227 & 128) == 0))) {
            bHEX60gensym233_486541227 = buffer_486541089[p_486541090[p_486541090_Idx]];
            resultHEX60gensym233_486541228 = ((resultHEX60gensym233_486541228 + (((bHEX60gensym233_486541227 & 127) >>> 0) << 21)) >>> 0);
            p_486541090[p_486541090_Idx] += 1;
            if (!(((bHEX60gensym233_486541227 & 128) == 0))) {
            bHEX60gensym233_486541227 = buffer_486541089[p_486541090[p_486541090_Idx]];
            resultHEX60gensym233_486541228 = ((resultHEX60gensym233_486541228 + (((bHEX60gensym233_486541227 & 127) >>> 0) << 28)) >>> 0);
            p_486541090[p_486541090_Idx] += 1;
            if (!(((bHEX60gensym233_486541227 & 128) == 0))) {
            raiseException({message: makeNimstrLit("Malformed Varint"), parent: null, m_type: NTI33555112, name: null, trace: [], up: null}, "Exception");
            }
            
            }
            
            }
            
            }
            
            }
            
            var prefixHEX60gensym230_486541282 = resultHEX60gensym233_486541228;
            Label10: do {
              var pendHEX60gensym244_486541296 = (p_486541090[p_486541090_Idx] + (prefixHEX60gensym230_486541282 >>> 3));
              var resultHEX60gensym244_486541300 = (buffer_486541089.toString('utf8', p_486541090[p_486541090_Idx], pendHEX60gensym244_486541296));
              p_486541090[p_486541090_Idx] = pendHEX60gensym244_486541296;
            } while (false);
            var keyHEX60gensym230_486541301 = resultHEX60gensym244_486541300;
            var valueHEX60gensym230_486541309 = deserializeNext_486541084(factory_486541088, factory_486541088_Idx, buffer_486541089, p_486541090, p_486541090_Idx);
            resultHEX60gensym230_486541222[toString_486539388(keyHEX60gensym230_486541301)] = valueHEX60gensym230_486541309;
          }
      } while (false);
      Temporary1 = resultHEX60gensym230_486541222;
      break;
    case 6:
      if ((size_486541155 == 0)) {
      Temporary11 = null;
      }
      else {
      if ((size_486541155 == 1)) {
      switch (buffer_486541089[p_486541090[p_486541090_Idx]]) {
      case 0:
        p_486541090[p_486541090_Idx] += 1;
        Temporary12 = false;
        break;
      case 1:
        p_486541090[p_486541090_Idx] += 1;
        Temporary12 = true;
        break;
      default: 
        raiseException({message: makeNimstrLit("Invalid value for bool/null node (compat \'invalid boolnull\')"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
        break;
      }
      Temporary11 = Temporary12;
      }
      else {
        raiseException({message: makeNimstrLit("Invalid length for bool/null node (compat \'invalid boolnull, length must = 1\')"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      }
      }
      Temporary1 = Temporary11;
      break;
    case 7:
      Label13: do {
        var pendHEX60gensym249_486541327 = (p_486541090[p_486541090_Idx] + size_486541155);
        var resultHEX60gensym249_486541331 = (buffer_486541089.subarray(p_486541090[p_486541090_Idx], pendHEX60gensym249_486541327));
        p_486541090[p_486541090_Idx] = pendHEX60gensym249_486541327;
      } while (false);
      Temporary1 = resultHEX60gensym249_486541331;
      break;
    }
    result_486541091 = Temporary1;

  return result_486541091;

}

function deserialize_486541075(factory_486541079, factory_486541079_Idx, buffer_486541080, at_486541081) {
  var result_486541082 = null;

    var p_486541083 = [at_486541081];
    result_486541082 = deserializeNext_486541084(factory_486541079, factory_486541079_Idx, buffer_486541080, p_486541083, 0);

  return result_486541082;

}

function deserialize_486541071(buffer_486541072, start_486541073) {
    var Temporary1;

  var result_486541074 = null;

    if ((start_486541073 === undefined)) {
    Temporary1 = 0;
    }
    else {
    Temporary1 = start_486541073;
    }
    
    result_486541074 = deserialize_486541075(jsObjectFactory_486541027, 0, (buffer_486541072), Temporary1);

  return result_486541074;

}

function encodingLength_486540985(obj_486540986) {
  var result_486540987 = 0;

    lastBufferProduced_486540984[0] = serialize_486540965(obj_486540986);
    lastObjectVisited_486540983[0] = obj_486540986;
    result_486540987 = lastBufferProduced_486540984[0].length;

  return result_486540987;

}

function encode_486540990(obj_486540991, buffer_486540992, offset_486540993) {
    var Temporary1;

  var result_486540994 = 0;

    if ((offset_486540993 === undefined)) {
    Temporary1 = 0;
    }
    else {
    Temporary1 = offset_486540993;
    }
    
    var offset_486540998 = Temporary1;
    if (!((obj_486540991 == lastObjectVisited_486540983[0]))) {
    lastBufferProduced_486540984[0] = serialize_486540965(obj_486540991);
    lastObjectVisited_486540983[0] = obj_486540991;
    }
    
    if ((((buffer_486540992.length - offset_486540998) < lastBufferProduced_486540984[0].length) && !(( typeof Buffer !== 'undefined' && Buffer.isBuffer(buffer_486540992) )))) {
    raiseException({message: makeNimstrLit("Buffer too small"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var p_486541004 = offset_486540998;
    if ((lastBufferProduced_486540984[0].length == 0)) {
    }
    else {
      buffer_486540992.set(lastBufferProduced_486540984[0],p_486541004);;
      p_486541004 += lastBufferProduced_486540984[0].length;
    }
    
    result_486540994 = (p_486541004 - offset_486540998);

  return result_486540994;

}

function newSeq_486541491(len_486541493) {
  var result_486541494 = [];

    result_486541494 = new Array(len_486541493); for (var i = 0 ; i < len_486541493 ; ++i) { result_486541494[i] = null; }
  return result_486541494;

}

function readPrefix_1325400071(buffer_1325400072, p_1325400073, p_1325400073_Idx) {
  var result_1325400074 = 0;

    var bHEX60gensym0_1325400078 = buffer_1325400072[p_1325400073[p_1325400073_Idx]];
    var resultHEX60gensym0_1325400079 = ((bHEX60gensym0_1325400078 & 127) >>> 0);
    p_1325400073[p_1325400073_Idx] += 1;
    if (!(((bHEX60gensym0_1325400078 & 128) == 0))) {
    bHEX60gensym0_1325400078 = buffer_1325400072[p_1325400073[p_1325400073_Idx]];
    resultHEX60gensym0_1325400079 = ((resultHEX60gensym0_1325400079 + (((bHEX60gensym0_1325400078 & 127) >>> 0) << 7)) >>> 0);
    p_1325400073[p_1325400073_Idx] += 1;
    if (!(((bHEX60gensym0_1325400078 & 128) == 0))) {
    bHEX60gensym0_1325400078 = buffer_1325400072[p_1325400073[p_1325400073_Idx]];
    resultHEX60gensym0_1325400079 = ((resultHEX60gensym0_1325400079 + (((bHEX60gensym0_1325400078 & 127) >>> 0) << 14)) >>> 0);
    p_1325400073[p_1325400073_Idx] += 1;
    if (!(((bHEX60gensym0_1325400078 & 128) == 0))) {
    bHEX60gensym0_1325400078 = buffer_1325400072[p_1325400073[p_1325400073_Idx]];
    resultHEX60gensym0_1325400079 = ((resultHEX60gensym0_1325400079 + (((bHEX60gensym0_1325400078 & 127) >>> 0) << 21)) >>> 0);
    p_1325400073[p_1325400073_Idx] += 1;
    if (!(((bHEX60gensym0_1325400078 & 128) == 0))) {
    bHEX60gensym0_1325400078 = buffer_1325400072[p_1325400073[p_1325400073_Idx]];
    resultHEX60gensym0_1325400079 = ((resultHEX60gensym0_1325400079 + (((bHEX60gensym0_1325400078 & 127) >>> 0) << 28)) >>> 0);
    p_1325400073[p_1325400073_Idx] += 1;
    if (!(((bHEX60gensym0_1325400078 & 128) == 0))) {
    raiseException({message: makeNimstrLit("Malformed Varint"), parent: null, m_type: NTI33555112, name: null, trace: [], up: null}, "Exception");
    }
    
    }
    
    }
    
    }
    
    }
    
    result_1325400074 = resultHEX60gensym0_1325400079;

  return result_1325400074;

}

function asByteBuffer_1325400068(b_1325400069) {
  var result_1325400070 = null;

    result_1325400070 = b_1325400069;

  return result_1325400070;

}

function readBufferValue_1325400155(buffer_1325400156, p_1325400157, p_1325400157_Idx, size_1325400158) {
    var Temporary1;

  var result_1325400159 = null;

    if ((size_1325400158 == 0)) {
    Temporary1 = Buffer.allocUnsafe(0);
    }
    else {
      p_1325400157[p_1325400157_Idx] += size_1325400158;
    Temporary1 = new Uint8Array(buffer_1325400156.buffer, ((buffer_1325400156.byteOffset + p_1325400157[p_1325400157_Idx]) - size_1325400158), size_1325400158);
    }
    
    result_1325400159 = Temporary1;

  return result_1325400159;

}

function compileSimplePath_486541537(path_486541539) {
  var result_486541543 = [];

    result_486541543 = nimCopy(null, [], NTI486541056);
    Label1: do {
      var key_486541563 = null;
      var i_486542440 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486542440 < (path_486541539).length)) break Label3;
            key_486541563 = path_486541539[i_486542440];
            var keyPrefix_486541568 = ((key_486541563.length << 3) | 0);
            result_486541543.push({opCode: 0, prefix: keyPrefix_486541568, key: key_486541563});;
            i_486542440 += 1;
          }
      } while (false);
    } while (false);

  return result_486541543;

}

function skipNext_1342177318(buffer_1342177320, p_1342177321, p_1342177321_Idx) {
    var prefix_1342177322 = readPrefix_1325400071(asByteBuffer_1325400068(buffer_1342177320), p_1342177321, p_1342177321_Idx);
    p_1342177321[p_1342177321_Idx] += (prefix_1342177322 >>> 3);

  
}

function runBPath_486541623(buffer_486541626, path_486541627, start_486541628) {
              var Temporary4;
              var Temporary5;
                      var Temporary8;

  var result_486541629 = 0;

  BeforeRet: do {
    var p_486541633 = [start_486541628];
    Label1: do {
      var op_486541653 = ({opCode: 0, prefix: 0, key: null});
      var i_486542445 = 0;
      var L_486542446 = (path_486541627).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486542445 < L_486542446)) break Label3;
            op_486541653 = path_486541627[i_486542445];
            switch (op_486541653.opCode) {
            case 0:
              var Temporary4 = op_486541653;
              if (ConstSet36[Temporary4.opCode]===undefined) { raiseFieldError2(makeNimstrLit("field \'prefix\' is not accessible for type \'BipfQueryOp\' using \'opCode = "), reprDiscriminant(Temporary4.opCode, NTI1358954499)); }
              var opPrefix_486541664 = Temporary4.prefix;
              var Temporary5 = op_486541653;
              if (ConstSet37[Temporary5.opCode]===undefined) { raiseFieldError2(makeNimstrLit("field \'key\' is not accessible for type \'BipfQueryOp\' using \'opCode = "), reprDiscriminant(Temporary5.opCode, NTI1358954499)); }
              var opKey_486541665 = Temporary5.key;
              var prefix_486541666 = readPrefix_1325400071(asByteBuffer_1325400068(buffer_486541626), p_486541633, 0);
              if (!(((prefix_486541666 & 7) == 5))) {
              result_486541629 = -1;
              break BeforeRet;
              }
              
              var endOffset_486541675 = (p_486541633[0] + (prefix_486541666 >>> 3));
              Label6: do {
                  Label7: while (true) {
                  if (!(p_486541633[0] < endOffset_486541675)) break Label7;
                    var prefix_486541676 = readPrefix_1325400071(asByteBuffer_1325400068(buffer_486541626), p_486541633, 0);
                      if (!(prefix_486541676 == opPrefix_486541664)) Temporary8 = false; else {                        Temporary8 = (buffer_486541626.compare(opKey_486541665, 0, opKey_486541665.length, p_486541633[0], (p_486541633[0] + opKey_486541665.length)) == 0);                      }                    if (Temporary8) {
                    p_486541633[0] += (prefix_486541676 >>> 3);
                    break Label6;
                    }
                    
                    p_486541633[0] += (prefix_486541676 >>> 3);
                    skipNext_1342177318(buffer_486541626, p_486541633, 0);
                  }
              } while (false);
              if ((endOffset_486541675 <= p_486541633[0])) {
              result_486541629 = -1;
              break BeforeRet;
              }
              
              break;
            }
            i_486542445 += 1;
          }
      } while (false);
    } while (false);
    result_486541629 = p_486541633[0];
    break BeforeRet;
  } while (false);

  return result_486541629;

}

function seekPath_486541481(buffer_486541482, start_486541483, target_486541484, targetStart_486541485) {
    var Temporary1;

  var result_486541486 = 0;

    var path_486541508 = newSeq_486541491(0);
    if ((targetStart_486541485 === undefined)) {
    Temporary1 = 0;
    }
    else {
    Temporary1 = targetStart_486541485;
    }
    
    var pTarget_486541512 = [Temporary1];
    var arrPrefix_486541513 = readPrefix_1325400071(asByteBuffer_1325400068(target_486541484), pTarget_486541512, 0);
    Label2: do {
        Label3: while (true) {
        if (!(pTarget_486541512[0] < target_486541484.length)) break Label3;
          var prefix_486541521 = readPrefix_1325400071(asByteBuffer_1325400068(target_486541484), pTarget_486541512, 0);
          path_486541508.push(readBufferValue_1325400155(asByteBuffer_1325400068(target_486541484), pTarget_486541512, 0, (prefix_486541521 >>> 3)));;
        }
    } while (false);
    var bpath_486541619 = compileSimplePath_486541537(path_486541508);
    result_486541486 = runBPath_486541623(buffer_486541482, bpath_486541619, start_486541483);

  return result_486541486;

}

function findKey_1342177284(buffer_1342177285, key_1342177286, keyPrefix_1342177287, start_1342177288) {
            var Temporary3;

  var result_1342177289 = 0;

    result_1342177289 = -1;
    var p_1342177290 = [start_1342177288];
    var prefix_1342177291 = readPrefix_1325400071(asByteBuffer_1325400068(buffer_1342177285), p_1342177290, 0);
    if (((prefix_1342177291 & 7) == 5)) {
    var endOffset_1342177300 = (p_1342177290[0] + (prefix_1342177291 >>> 3));
    Label1: do {
        Label2: while (true) {
        if (!(p_1342177290[0] < endOffset_1342177300)) break Label2;
          var prefix_1342177301 = readPrefix_1325400071(asByteBuffer_1325400068(buffer_1342177285), p_1342177290, 0);
            if (!(prefix_1342177301 == keyPrefix_1342177287)) Temporary3 = false; else {              Temporary3 = (buffer_1342177285.compare(key_1342177286, 0, key_1342177286.length, p_1342177290[0], (p_1342177290[0] + key_1342177286.length)) == 0);            }          if (Temporary3) {
          p_1342177290[0] += (prefix_1342177301 >>> 3);
          result_1342177289 = p_1342177290[0];
          break Label1;
          }
          
          p_1342177290[0] += (prefix_1342177301 >>> 3);
          skipNext_1342177318(buffer_1342177285, p_1342177290, 0);
        }
    } while (false);
    }
    

  return result_1342177289;

}

function findKey_1342177331(buffer_1342177332, key_1342177333, start_1342177334) {
  var result_1342177335 = 0;

    var keyPrefix_1342177340 = ((key_1342177333.length << 3) | 0);
    result_1342177335 = findKey_1342177284(buffer_1342177332, key_1342177333, keyPrefix_1342177340, start_1342177334);

  return result_1342177335;

}

function seekKey_486541374(buffer_486541375, start_486541376, key_486541377) {
    var Temporary1;

  var result_486541378 = 0;

    if ((typeof(key_486541377) == "string")) {
    Temporary1 = Buffer.from(toString_486539388(key_486541377));
    }
    else {
    if (((typeof(key_486541377) == "object") && ( typeof Buffer !== 'undefined' && Buffer.isBuffer(toBuffer_486539394(key_486541377)) ))) {
    Temporary1 = key_486541377;
    }
    else {
      raiseException({message: (makeNimstrLit("Unsupported key type: ") || []).concat(cstrToNimstr(typeof(key_486541377)) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    }
    var keyBuffer_486541380 = Temporary1;
    result_486541378 = findKey_1342177331(buffer_486541375, keyBuffer_486541380, start_486541376);

  return result_486541378;

}

function findKey_1342177341(buffer_1342177342, key_1342177343, start_1342177344, keyStart_1342177345) {
  var result_1342177346 = 0;

    var pKey_1342177347 = [keyStart_1342177345];
    var keyPrefix_1342177348 = readPrefix_1325400071(asByteBuffer_1325400068(key_1342177343), pKey_1342177347, 0);
    if (!(((keyPrefix_1342177348 & 7) == 0))) {
    raiseException({message: makeNimstrLit("key must be encoded string"), parent: null, m_type: NTI1174405123, name: null, trace: [], up: null}, "BipfValueError");
    }
    
    var keyBuffer_1342177358 = readBufferValue_1325400155(asByteBuffer_1325400068(key_1342177343), pKey_1342177347, 0, (keyPrefix_1342177348 >>> 3));
    result_1342177346 = findKey_1342177284(buffer_1342177342, keyBuffer_1342177358, keyPrefix_1342177348, start_1342177344);

  return result_1342177346;

}

function seekKey2_486541381(buffer_486541382, start_486541383, key_486541384, keyStart_486541385) {
    var Temporary1;

  var result_486541386 = 0;

    if ((keyStart_486541385 === undefined)) {
    Temporary1 = 0;
    }
    else {
    Temporary1 = keyStart_486541385;
    }
    
    result_486541386 = findKey_1342177341(buffer_486541382, key_486541384, start_486541383, Temporary1);

  return result_486541386;

}

function seekKeyCached_486541410(buffer_486541411, start_486541412, key_486541413) {
  var result_486541414 = 0;

    if (!((typeof((key_486541413)) == "string"))) {
    raiseException({message: (makeNimstrLit("Unsupported key type (formely \'seekKeyCached only supports string target\'): ") || []).concat(cstrToNimstr(typeof((key_486541413))) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    
    var keyBuffer_486541454 = seekKeyCache_486541400[0][key_486541413];
    if ((keyBuffer_486541454 === undefined)) {
    keyBuffer_486541454 = Buffer.from(key_486541413);
    seekKeyCache_486541400[0][key_486541413] = keyBuffer_486541454;
    }
    
    result_486541414 = findKey_1342177331(buffer_486541411, keyBuffer_486541454, start_486541412);

  return result_486541414;

}

function slice_486541945(buffer_486541946, start_486541947) {
  var result_486541948 = null;

    var p_486541949 = [start_486541947];
    var prefix_486541950 = readPrefix_1325400071(asByteBuffer_1325400068(buffer_486541946), p_486541949, 0);
    var size_486541955 = (prefix_486541950 >>> 3);
    result_486541948 = Buffer.from(readBufferValue_1325400155(asByteBuffer_1325400068(buffer_486541946), p_486541949, 0, size_486541955));

  return result_486541948;

}

function pluck_486541956(buffer_486541957, start_486541958) {
  var result_486541959 = null;

    var p_486541960 = [start_486541958];
    var prefix_486541961 = readPrefix_1325400071(asByteBuffer_1325400068(buffer_486541957), p_486541960, 0);
    var size_486541966 = ((prefix_486541961 >>> 3) + (p_486541960[0] - start_486541958));
    p_486541960[0] = start_486541958;
    result_486541959 = Buffer.from(readBufferValue_1325400155(asByteBuffer_1325400068(buffer_486541957), p_486541960, 0, size_486541966));

  return result_486541959;

}

function encodeIdempotent_486541967(obj_486541968, buffer_486541969, offset_486541970) {
  var result_486541971 = 0;

    result_486541971 = encode_486540990(obj_486541968, buffer_486541969, offset_486541970);
    (result_486541971)[bipfBufferSymbol_486539358[0]] = true;

  return result_486541971;

}

function markIdempotent_486541980(buffer_486541981) {
  var result_486541982 = null;

    result_486541982 = buffer_486541981;
    (result_486541982)[bipfBufferSymbol_486539358[0]] = true;

  return result_486541982;

}

function getEncodedLength_486542054(obj_486542055, start_486542056) {
    var Temporary1;

  var result_486542057 = 0;

  BeforeRet: do {
    if ((start_486542056 === undefined)) {
    Temporary1 = 0;
    }
    else {
    Temporary1 = start_486542056;
    }
    
    var p_486542061 = [Temporary1];
    var prefix_486542062 = readPrefix_1325400071(asByteBuffer_1325400068(obj_486542055), p_486542061, 0);
    result_486542057 = (prefix_486542062 >>> 3);
    break BeforeRet;
  } while (false);

  return result_486542057;

}

function getEncodedType_486542067(obj_486542068, start_486542069) {
    var Temporary1;

  var result_486542070 = 0;

  BeforeRet: do {
    if ((start_486542069 === undefined)) {
    Temporary1 = 0;
    }
    else {
    Temporary1 = start_486542069;
    }
    
    var p_486542074 = [Temporary1];
    var prefix_486542075 = readPrefix_1325400071(asByteBuffer_1325400068(obj_486542068), p_486542074, 0);
    result_486542070 = (prefix_486542075 & 7);
    break BeforeRet;
  } while (false);

  return result_486542070;

}

function iterate_486541997(objBuf_486541998, start_486541999, callback_486542000) {
  var result_486542001 = 0;

  BeforeRet: do {
    var p_486542002 = [start_486541999];
    var prefix_486542003 = readPrefix_1325400071(asByteBuffer_1325400068(objBuf_486541998), p_486542002, 0);
    var size_486542008 = (prefix_486542003 >>> 3);
    var tag_486542009 = (prefix_486542003 & 7);
    var endOffset_486542010 = (p_486542002[0] + size_486542008);
    if ((tag_486542009 == 5)) {
    Label1: do {
        Label2: while (true) {
        if (!(p_486542002[0] < endOffset_486542010)) break Label2;
          var keyPointer_486542015 = p_486542002[0];
          var keyPrefix_486542016 = readPrefix_1325400071(asByteBuffer_1325400068(objBuf_486541998), p_486542002, 0);
          p_486542002[0] += (keyPrefix_486542016 >>> 3);
          var valuePointer_486542025 = p_486542002[0];
          var valuePrefix_486542026 = readPrefix_1325400071(asByteBuffer_1325400068(objBuf_486541998), p_486542002, 0);
          p_486542002[0] += (valuePrefix_486542026 >>> 3);
          if (callback_486542000(objBuf_486541998, valuePointer_486542025, keyPointer_486542015)) {
          break Label1;
          }
          
        }
    } while (false);
    result_486542001 = start_486541999;
    break BeforeRet;
    }
    else {
    if ((tag_486542009 == 4)) {
    var i_486542039 = 0;
    Label3: do {
        Label4: while (true) {
        if (!(p_486542002[0] < endOffset_486542010)) break Label4;
          var valuePointer_486542040 = p_486542002[0];
          var valuePrefix_486542041 = readPrefix_1325400071(asByteBuffer_1325400068(objBuf_486541998), p_486542002, 0);
          p_486542002[0] += (valuePrefix_486542041 >>> 3);
          if (callback_486542000(objBuf_486541998, valuePointer_486542040, i_486542039)) {
          break Label3;
          }
          
          i_486542039 += 1;
        }
    } while (false);
    result_486542001 = start_486541999;
    break BeforeRet;
    }
    else {
      result_486542001 = -1;
      break BeforeRet;
    }
    }
  } while (false);

  return result_486542001;

}

function compileSimplePath_486541737(path_486541738) {
  var result_486541740 = [];

    var bufArr_486541752 = newSeq_486541491((path_486541738).length);
    Label1: do {
      var i_486541775 = 0;
      var p_486541776 = null;
      var i_486542453 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486542453 < (path_486541738).length)) break Label3;
            i_486541775 = i_486542453;
            p_486541776 = path_486541738[i_486542453];
            bufArr_486541752[i_486541775] = Buffer.from(p_486541776);
            i_486542453 += 1;
          }
      } while (false);
    } while (false);
    result_486541740 = nimCopy(null, compileSimplePath_486541537(bufArr_486541752), NTI486541056);

  return result_486541740;

}

function createSeekPath_486541780(path_486541781) {
    
function HEX3Aanonymous_486541784(buffer_486541785, start_486541786) {
      var result_486541787 = 0;

        result_486541787 = runBPath_486541623(buffer_486541785, bpath_486541783, start_486541786);

      return result_486541787;

    }

  var result_486541782 = null;

    var bpath_486541783 = compileSimplePath_486541737(path_486541781);
    result_486541782 = HEX3Aanonymous_486541784;

  return result_486541782;

}

function newSeq_486541819(len_486541821) {
  var result_486541822 = [];

    result_486541822 = new Array(len_486541821); for (var i = 0 ; i < len_486541821 ; ++i) { result_486541822[i] = []; }
  return result_486541822;

}

function readIntValue_1325400173(buffer_1325400174, p_1325400175, p_1325400175_Idx, size_1325400176) {
  var result_1325400177 = 0;

    Label1: do {
      var resultHEX60gensym9_1325400179 = buffer_1325400174.readInt32LE(p_1325400175[p_1325400175_Idx]);
      p_1325400175[p_1325400175_Idx] += 4;
    } while (false);
    result_1325400177 = resultHEX60gensym9_1325400179;

  return result_1325400177;

}

function readFloatValue_1325400184(buffer_1325400185, p_1325400186, p_1325400186_Idx, size_1325400187) {
  var result_1325400188 = 0.0;

    Label1: do {
      var resultHEX60gensym10_1325400190 = buffer_1325400185.readDoubleLE(p_1325400186[p_1325400186_Idx]);
      p_1325400186[p_1325400186_Idx] += 8;
    } while (false);
    result_1325400188 = resultHEX60gensym10_1325400190;

  return result_1325400188;

}

function cmp_1325400241(x_1325400243, y_1325400244) {
  var result_1325400245 = 0;

  BeforeRet: do {
    if ((x_1325400243 == y_1325400244)) {
    result_1325400245 = 0;
    break BeforeRet;
    }
    
    if ((x_1325400243 < y_1325400244)) {
    result_1325400245 = -1;
    break BeforeRet;
    }
    
    result_1325400245 = 1;
    break BeforeRet;
  } while (false);

  return result_1325400245;

}

function cmp_1325400270(x_1325400272, y_1325400273) {
  var result_1325400274 = 0;

  BeforeRet: do {
    if ((x_1325400272 == y_1325400273)) {
    result_1325400274 = 0;
    break BeforeRet;
    }
    
    if ((x_1325400272 < y_1325400273)) {
    result_1325400274 = -1;
    break BeforeRet;
    }
    
    result_1325400274 = 1;
    break BeforeRet;
  } while (false);

  return result_1325400274;

}

function compare_1023410296(source_1023410297, target_1023410298, targetStart_1023410299, targetLen_1023410300, sourceStart_1023410301, sourceLen_1023410302) {
  var result_1023410303 = 0;

    var len_1023410304 = nimMin(sourceLen_1023410302, targetLen_1023410300);
    result_1023410303 = source_1023410297.compare(target_1023410298, targetStart_1023410299, (targetStart_1023410299 + len_1023410304), sourceStart_1023410301, (sourceStart_1023410301 + len_1023410304));
    if ((result_1023410303 == 0)) {
    result_1023410303 = (sourceLen_1023410302 - targetLen_1023410300);
    }
    

  return result_1023410303;

}

function compare_1325400208(b1_1325400209, b2_1325400210, start1_1325400211, start2_1325400212) {
  var result_1325400213 = 0;

  BeforeRet: do {
    if ((start1_1325400211 < 0)) {
    if ((start2_1325400212 < 0)) {
    result_1325400213 = 0;
    break BeforeRet;
    }
    else {
      result_1325400213 = 1;
      break BeforeRet;
    }
    
    }
    else {
    if ((start2_1325400212 < 0)) {
    result_1325400213 = -1;
    break BeforeRet;
    }
    }
    var p1_1325400214 = [start1_1325400211];
    var p2_1325400215 = [start2_1325400212];
    var prefix1_1325400216 = readPrefix_1325400071(asByteBuffer_1325400068(b1_1325400209), p1_1325400214, 0);
    var prefix2_1325400217 = readPrefix_1325400071(asByteBuffer_1325400068(b2_1325400210), p2_1325400215, 0);
    if ((prefix1_1325400216 == 6)) {
    if ((prefix2_1325400217 == 6)) {
    result_1325400213 = 0;
    break BeforeRet;
    }
    else {
      result_1325400213 = -1;
      break BeforeRet;
    }
    
    }
    else {
    if ((prefix2_1325400217 == 6)) {
    result_1325400213 = 1;
    break BeforeRet;
    }
    }
    var tag1_1325400218 = (prefix1_1325400216 & 7);
    var size1_1325400223 = (prefix1_1325400216 >>> 3);
    var tag2_1325400224 = (prefix2_1325400217 & 7);
    var size2_1325400229 = (prefix2_1325400217 >>> 3);
    if (((tag1_1325400218 == 2) && (tag2_1325400224 == 3))) {
    var v1_1325400239 = readIntValue_1325400173(asByteBuffer_1325400068(b1_1325400209), p1_1325400214, 0, size1_1325400223);
    var v2_1325400240 = readFloatValue_1325400184(asByteBuffer_1325400068(b2_1325400210), p2_1325400215, 0, size2_1325400229);
    result_1325400213 = cmp_1325400241(v1_1325400239, v2_1325400240);
    break BeforeRet;
    }
    else {
    if (((tag2_1325400224 == 2) && (tag1_1325400218 == 3))) {
    var v2_1325400254 = readIntValue_1325400173(asByteBuffer_1325400068(b2_1325400210), p2_1325400215, 0, size2_1325400229);
    var v1_1325400255 = readFloatValue_1325400184(asByteBuffer_1325400068(b1_1325400209), p1_1325400214, 0, size1_1325400223);
    result_1325400213 = cmp_1325400241(v1_1325400255, v2_1325400254);
    break BeforeRet;
    }
    }
    if (!((tag1_1325400218 == tag2_1325400224))) {
    result_1325400213 = (((tag1_1325400218) | 0) - ((tag2_1325400224) | 0));
    break BeforeRet;
    }
    
    if ((tag1_1325400218 == 2)) {
    var v1_1325400268 = readIntValue_1325400173(asByteBuffer_1325400068(b1_1325400209), p1_1325400214, 0, size1_1325400223);
    var v2_1325400269 = readIntValue_1325400173(asByteBuffer_1325400068(b2_1325400210), p2_1325400215, 0, size2_1325400229);
    result_1325400213 = cmp_1325400270(v1_1325400268, v2_1325400269);
    break BeforeRet;
    }
    else {
    if ((tag1_1325400218 == 3)) {
    var v1_1325400279 = readFloatValue_1325400184(asByteBuffer_1325400068(b1_1325400209), p1_1325400214, 0, size1_1325400223);
    var v2_1325400280 = readFloatValue_1325400184(asByteBuffer_1325400068(b2_1325400210), p2_1325400215, 0, size2_1325400229);
    result_1325400213 = cmp_1325400241(v1_1325400279, v2_1325400280);
    break BeforeRet;
    }
    else {
      result_1325400213 = compare_1023410296(b1_1325400209, b2_1325400210, p1_1325400214[0], size1_1325400223, p2_1325400215[0], size2_1325400229);
      break BeforeRet;
    }
    }
  } while (false);

  return result_1325400213;

}

function createCompareAt_486541811(paths_486541812) {
    
function HEX3Aanonymous_486541865(b1_486541866, b2_486541867) {
      var result_486541868 = 0;

      BeforeRet: do {
        Label1: do {
          var pPath_486541888 = [];
          var i_486542462 = 0;
          var L_486542463 = (bPathArray_486541840).length;
          Label2: do {
              Label3: while (true) {
              if (!(i_486542462 < L_486542463)) break Label3;
                pPath_486541888 = bPathArray_486541840[i_486542462];
                var v1_486541898 = runBPath_486541623(b1_486541866, pPath_486541888, 0);
                var v2_486541908 = runBPath_486541623(b2_486541867, pPath_486541888, 0);
                result_486541868 = compare_1325400208(b1_486541866, b2_486541867, v1_486541898, v2_486541908);
                if (!((result_486541868 == 0))) {
                break BeforeRet;
                }
                
                i_486542462 += 1;
              }
          } while (false);
        } while (false);
        result_486541868 = 0;
        break BeforeRet;
      } while (false);

      return result_486541868;

    }

  var result_486541813 = null;

    var bPathArray_486541840 = newSeq_486541819((paths_486541812).length);
    var i_486541841 = 0;
    Label1: do {
      var path_486541860 = [];
      var i_486542457 = 0;
      var L_486542458 = (paths_486541812).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486542457 < L_486542458)) break Label3;
            path_486541860 = paths_486541812[i_486542457];
            bPathArray_486541840[i_486541841] = nimCopy(null, compileSimplePath_486541737(path_486541860), NTI486541056);
            i_486541841 += 1;
            i_486542457 += 1;
          }
      } while (false);
    } while (false);
    result_486541813 = HEX3Aanonymous_486541865;

  return result_486541813;

}

function compareCompat_486542117(b1_486542118, v1_486542119, b2_486542120, v2_486542121) {
  var result_486542122 = 0;

    result_486542122 = compare_1325400208(b1_486542118, b2_486542120, v1_486542119, v2_486542121);

  return result_486542122;

}
  var Temporary2;
  if ((module.exports == null)) Temporary2 = true; else {    Temporary2 = (module.exports == undefined);  }if (Temporary2) {
module.exports = {};
}

module.exports["serialize"] = serialize_486540965;
module.exports["deserialize"] = deserialize_486541071;
module.exports["encodingLength"] = encodingLength_486540985;
module.exports["encode"] = encode_486540990;
module.exports["allocAndEncode"] = serialize_486540965;
module.exports["decode"] = deserialize_486541071;
module.exports["seekPath"] = seekPath_486541481;
module.exports["seekKey"] = seekKey_486541374;
module.exports["seekKey2"] = seekKey2_486541381;
module.exports["seekKeyCached"] = seekKeyCached_486541410;
module.exports["slice"] = slice_486541945;
module.exports["pluck"] = pluck_486541956;
module.exports["encodeIdempotent"] = encodeIdempotent_486541967;
module.exports["markIdempotent"] = markIdempotent_486541980;
module.exports["getEncodedLength"] = getEncodedLength_486542054;
module.exports["getEncodedType"] = getEncodedType_486542067;
module.exports["allocAndEncodeIdempotent"] = serialize_486540965;
module.exports["isIdempotent"] = isBipfBuffer_486539360;
module.exports["iterate"] = iterate_486541997;
module.exports["types"] = typesConstants_486542076[0];
module.exports["createSeekPath"] = createSeekPath_486541780;
module.exports["createCompareAt"] = createCompareAt_486541811;
module.exports["compare"] = compareCompat_486542117;

function sysFatal_33557003(message_33557006) {
    raiseException({message: nimCopy(null, message_33557006, NTI33554439), m_type: NTI33555142, parent: null, name: null, trace: [], up: null}, "NilAccessDefect");

  
}

function chckNilDisp(p_33557002, p_33557002_Idx) {
    if ((p_33557002 == null && p_33557002_Idx == 0)) {
    sysFatal_33557003(makeNimstrLit("cannot dispatch; dispatcher is nil"));
    }
    

  
}

function nsuToLowerAsciiChar(c_637534276) {
  var result_637534277 = 0;

    if ((ConstSet39[c_637534276] != undefined)) {
    result_637534277 = (c_637534276 ^ 32);
    }
    else {
      result_637534277 = c_637534276;
    }
    

  return result_637534277;

}

function nsuIntToStr(x_637534991, minchars_637534992) {
  var result_637534993 = [];

    result_637534993 = nimCopy(null, HEX24_335544323(Math.abs(x_637534991)), NTI33554439);
    Label1: do {
      var i_637534998 = 0;
      var colontmp__486542477 = 0;
      colontmp__486542477 = (minchars_637534992 - (result_637534993).length);
      var res_486542478 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_486542478 <= colontmp__486542477)) break Label3;
            i_637534998 = res_486542478;
            result_637534993 = nimCopy(null, [48].concat(result_637534993 || []), NTI33554439);
            res_486542478 += 1;
          }
      } while (false);
    } while (false);
    if ((x_637534991 < 0)) {
    result_637534993 = nimCopy(null, [45].concat(result_637534993 || []), NTI33554439);
    }
    

  return result_637534993;

}

function monthday_654312577(dt_654312578) {
  var result_654312579 = 0;

    result_654312579 = dt_654312578.monthdayZero;

  return result_654312579;

}

function ntgetDateStr(dt_654312906) {
  var result_654312907 = [];

    result_654312907 = nimCopy(null, (HEX24_335544323(dt_654312906.year) || []).concat([45],nsuIntToStr(dt_654312906.monthZero, 2) || [],[45],nsuIntToStr(monthday_654312577(dt_654312906), 2) || []), NTI33554439);

  return result_654312907;

}

function HEX2B_654311442(a_654311443, b_654311444) {
  var result_654311445 = 0;

    result_654311445 = (a_654311443 + b_654311444);

  return result_654311445;

}

function HEX2A_654311434(a_654311435, b_654311436) {
  var result_654311437 = 0;

    result_654311437 = (a_654311435 * b_654311436);

  return result_654311437;

}

function convert_654311833(unitFrom_654311835, unitTo_654311836, quantity_654311837) {
    var Temporary1;

  var result_654311838 = 0;

    if ((unitFrom_654311835 < unitTo_654311836)) {
    Temporary1 = Math.trunc(quantity_654311837 / Math.trunc(unitWeights_654311570[unitTo_654311836] / unitWeights_654311570[unitFrom_654311835]));
    }
    else {
    Temporary1 = HEX2A_654311434(Math.trunc(unitWeights_654311570[unitFrom_654311835] / unitWeights_654311570[unitTo_654311836]), quantity_654311837);
    }
    
    result_654311838 = Temporary1;

  return result_654311838;

}

function convert_654311900(unitFrom_654311902, unitTo_654311903, quantity_654311904) {
    var Temporary1;

  var result_654311905 = 0;

    if ((unitFrom_654311902 < unitTo_654311903)) {
    Temporary1 = Math.trunc(quantity_654311904 / Math.trunc(unitWeights_654311570[unitTo_654311903] / unitWeights_654311570[unitFrom_654311902]));
    }
    else {
    Temporary1 = HEX2A_654311434(Math.trunc(unitWeights_654311570[unitFrom_654311902] / unitWeights_654311570[unitTo_654311903]), quantity_654311904);
    }
    
    result_654311905 = Temporary1;

  return result_654311905;

}

function normalize_654312461(seconds_654312463, nanoseconds_654312464) {
  var result_654312465 = ({seconds: 0, nanosecond: 0});

    result_654312465.seconds = HEX2B_654311442(seconds_654312463, convert_654311833(0, 3, nanoseconds_654312464));
    var nanosecond_654312476 = Math.trunc(nanoseconds_654312464 % convert_654311900(3, 0, 1));
    if ((nanosecond_654312476 < 0)) {
    nanosecond_654312476 += convert_654311900(3, 0, 1);
    result_654312465.seconds -= 1;
    }
    
    result_654312465.nanosecond = nanosecond_654312476;

  return result_654312465;

}

function HEX2D_654311450(a_654311451, b_654311452) {
  var result_654311453 = 0;

    result_654311453 = (a_654311451 - b_654311452);

  return result_654311453;

}

function HEX2D_654311454(a_654311455, b_654311456) {
  var result_654311457 = 0;

    result_654311457 = (a_654311455 - b_654311456);

  return result_654311457;

}

function ntSubTime(a_654312491, b_654312492) {
  var result_654312493 = ({seconds: 0, nanosecond: 0});

    result_654312493 = nimCopy(result_654312493, normalize_654312461(HEX2D_654311450(a_654312491.seconds, b_654312492.seconds), HEX2D_654311454(a_654312491.nanosecond, b_654312492.nanosecond)), NTI654311454);

  return result_654312493;

}

function normalize_654311890(seconds_654311892, nanoseconds_654311893) {
  var result_654311894 = ({seconds: 0, nanosecond: 0});

    result_654311894.seconds = HEX2B_654311442(seconds_654311892, convert_654311833(0, 3, nanoseconds_654311893));
    var nanosecond_654311910 = Math.trunc(nanoseconds_654311893 % convert_654311900(3, 0, 1));
    if ((nanosecond_654311910 < 0)) {
    nanosecond_654311910 += convert_654311900(3, 0, 1);
    result_654311894.seconds -= 1;
    }
    
    result_654311894.nanosecond = nanosecond_654311910;

  return result_654311894;

}

function initDuration_654311823(nanoseconds_654311824, microseconds_654311825, milliseconds_654311826, seconds_654311827, minutes_654311828, hours_654311829, days_654311830, weeks_654311831) {
  var result_654311832 = ({seconds: 0, nanosecond: 0});

    var seconds_654311878 = HEX2B_654311442(HEX2B_654311442(HEX2B_654311442(HEX2B_654311442(HEX2B_654311442(HEX2B_654311442(HEX2B_654311442(convert_654311833(7, 3, weeks_654311831), convert_654311833(6, 3, days_654311830)), convert_654311833(4, 3, minutes_654311828)), convert_654311833(5, 3, hours_654311829)), convert_654311833(3, 3, seconds_654311827)), convert_654311833(2, 3, milliseconds_654311826)), convert_654311833(1, 3, microseconds_654311825)), convert_654311833(0, 3, nanoseconds_654311824));
    var nanoseconds_654311889 = HEX2B_654311442(HEX2B_654311442(convert_654311833(2, 0, Math.trunc(milliseconds_654311826 % 1000)), convert_654311833(1, 0, Math.trunc(microseconds_654311825 % 1000000))), Math.trunc(nanoseconds_654311824 % 1000000000));
    result_654311832 = nimCopy(result_654311832, normalize_654311890(seconds_654311878, nanoseconds_654311889), NTI654311456);

  return result_654311832;

}

function floorDiv_654311715(x_654311717, y_654311718) {
      var Temporary1;
      var Temporary2;
        var Temporary3;

  var result_654311719 = 0;

    result_654311719 = Math.trunc(x_654311717 / y_654311718);
    var r_654311720 = Math.trunc(x_654311717 % y_654311718);
      if (!(0 < r_654311720)) Temporary2 = false; else {        Temporary2 = (y_654311718 < 0);      }      if (Temporary2) Temporary1 = true; else {        if (!(r_654311720 < 0)) Temporary3 = false; else {          Temporary3 = (0 < y_654311718);        }        Temporary1 = Temporary3;      }    if (Temporary1) {
    result_654311719 -= 1;
    }
    

  return result_654311719;

}

function inc_654311465(a_654311466, a_654311466_Idx, b_654311467) {
    a_654311466[a_654311466_Idx] += b_654311467;

  
}

function fromEpochDay_654311648(epochday_654311649) {
    var Temporary1;
    var Temporary2;

  var result_654311653 = {Field0: 0, Field1: 0, Field2: 0};

  BeforeRet: do {
    var z_654311654 = [epochday_654311649];
    inc_654311465(z_654311654, 0, 719468);
    if ((0 <= z_654311654[0])) {
    Temporary1 = z_654311654[0];
    }
    else {
    Temporary1 = HEX2D_654311450(z_654311654[0], 146096);
    }
    
    var era_654311655 = Math.trunc(Temporary1 / 146097);
    var doe_654311656 = HEX2D_654311450(z_654311654[0], HEX2A_654311434(era_654311655, 146097));
    var yoe_654311657 = Math.trunc(HEX2D_654311450(HEX2B_654311442(HEX2D_654311450(doe_654311656, Math.trunc(doe_654311656 / 1460)), Math.trunc(doe_654311656 / 36524)), Math.trunc(doe_654311656 / 146096)) / 365);
    var y_654311658 = HEX2B_654311442(yoe_654311657, HEX2A_654311434(era_654311655, 400));
    var doy_654311659 = HEX2D_654311450(doe_654311656, HEX2D_654311450(HEX2B_654311442(HEX2A_654311434(365, yoe_654311657), Math.trunc(yoe_654311657 / 4)), Math.trunc(yoe_654311657 / 100)));
    var mp_654311660 = Math.trunc(HEX2B_654311442(HEX2A_654311434(5, doy_654311659), 2) / 153);
    var d_654311661 = HEX2B_654311442(HEX2D_654311450(doy_654311659, Math.trunc(HEX2B_654311442(HEX2A_654311434(153, mp_654311660), 2) / 5)), 1);
    if ((mp_654311660 < 10)) {
    Temporary2 = 3;
    }
    else {
    Temporary2 = -9;
    }
    
    var m_654311662 = HEX2B_654311442(mp_654311660, Temporary2);
    var colontmp__486542481 = d_654311661;
    var colontmp__486542482 = m_654311662;
    var colontmp__486542483 = HEX2B_654311442(y_654311658, ((m_654311662 <= 2) ? 1 : 0));
    result_654311653 = nimCopy(result_654311653, {Field0: nimCopy(null, colontmp__486542481, NTI654311448), Field1: colontmp__486542482, Field2: colontmp__486542483}, NTI654311615);
    break BeforeRet;
  } while (false);

  return result_654311653;

}

function assertValidDate_654311600(monthday_654311601, month_654311602, year_654311603) {
  
}

function HEX2A_654311438(a_654311439, b_654311440) {
  var result_654311441 = 0;

    result_654311441 = (a_654311439 * b_654311440);

  return result_654311441;

}

function HEX2B_654311446(a_654311447, b_654311448) {
  var result_654311449 = 0;

    result_654311449 = (a_654311447 + b_654311448);

  return result_654311449;

}

function toEpochDay_654311611(monthday_654311612, month_654311613, year_654311614) {
    var Temporary1;
    var Temporary2;

  var result_654311615 = 0;

  BeforeRet: do {
    assertValidDate_654311600(monthday_654311612, month_654311613, year_654311614);
    var colontmp__486542484 = {Field0: year_654311614, Field1: month_654311613, Field2: monthday_654311612};
    var y_654311619 = colontmp__486542484["Field0"];
    var m_654311620 = colontmp__486542484["Field1"];
    var d_654311621 = colontmp__486542484["Field2"];
    if ((m_654311620 <= 2)) {
    y_654311619 -= 1;
    }
    
    if ((0 <= y_654311619)) {
    Temporary1 = y_654311619;
    }
    else {
    Temporary1 = HEX2D_654311454(y_654311619, 399);
    }
    
    var era_654311626 = Math.trunc(Temporary1 / 400);
    var yoe_654311627 = HEX2D_654311454(y_654311619, HEX2A_654311438(era_654311626, 400));
    if ((2 < m_654311620)) {
    Temporary2 = -3;
    }
    else {
    Temporary2 = 9;
    }
    
    var doy_654311628 = HEX2D_654311454(HEX2B_654311446(Math.trunc(HEX2B_654311446(HEX2A_654311438(153, HEX2B_654311446(m_654311620, Temporary2)), 2) / 5), d_654311621), 1);
    var doe_654311629 = HEX2B_654311446(HEX2D_654311454(HEX2B_654311446(HEX2A_654311438(yoe_654311627, 365), Math.trunc(yoe_654311627 / 4)), Math.trunc(yoe_654311627 / 100)), doy_654311628);
    result_654311615 = HEX2D_654311454(HEX2B_654311446(HEX2A_654311438(era_654311626, 146097), doe_654311629), 719468);
    break BeforeRet;
  } while (false);

  return result_654311615;

}

function getDayOfWeek_654311709(monthday_654311710, month_654311711, year_654311712) {
    var Temporary1;

  var result_654311713 = 0;

    assertValidDate_654311600(monthday_654311710, month_654311711, year_654311712);
    var days_654311714 = HEX2D_654311450(toEpochDay_654311611(monthday_654311710, month_654311711, year_654311712), 3);
    var weeks_654311725 = floorDiv_654311715(days_654311714, 7);
    var wd_654311726 = HEX2D_654311450(days_654311714, HEX2A_654311434(weeks_654311725, 7));
    if ((wd_654311726 == 0)) {
    Temporary1 = 6;
    }
    else {
    Temporary1 = HEX2D_654311450(wd_654311726, 1);
    }
    
    result_654311713 = Temporary1;

  return result_654311713;

}

function isLeapYear_654311593(year_654311594) {
    var Temporary1;
      var Temporary2;

  var result_654311595 = false;

    if (!(Math.trunc(year_654311594 % 4) == 0)) Temporary1 = false; else {      if (!((Math.trunc(year_654311594 % 100) == 0))) Temporary2 = true; else {        Temporary2 = (Math.trunc(year_654311594 % 400) == 0);      }      Temporary1 = Temporary2;    }    result_654311595 = Temporary1;

  return result_654311595;

}

function getDayOfYear_654311684(monthday_654311685, month_654311686, year_654311687) {
  var result_654311688 = 0;

    assertValidDate_654311600(monthday_654311685, month_654311686, year_654311687);
    if (isLeapYear_654311593(year_654311687)) {
    result_654311688 = HEX2D_654311454(HEX2B_654311446(daysUntilMonthLeap_654311690[(month_654311686) - (1)], monthday_654311685), 1);
    }
    else {
      result_654311688 = HEX2D_654311454(HEX2B_654311446(daysUntilMonth_654311689[(month_654311686) - (1)], monthday_654311685), 1);
    }
    

  return result_654311688;

}

function initDateTime_654312664(zt_654312665, zone_654312666) {
  var result_654312667 = ({m_type: NTI654311455, nanosecond: 0, second: 0, minute: 0, hour: 0, monthdayZero: 0, monthZero: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0});

    var adjTime_654312668 = ntSubTime(zt_654312665.time, initDuration_654311823(0, 0, 0, zt_654312665.utcOffset, 0, 0, 0, 0));
    var s_654312669 = adjTime_654312668.seconds;
    var epochday_654312674 = floorDiv_654311715(s_654312669, 86400);
    var rem_654312675 = HEX2D_654311450(s_654312669, HEX2A_654311434(epochday_654312674, 86400));
    var hour_654312676 = Math.trunc(rem_654312675 / 3600);
    rem_654312675 = HEX2D_654311450(rem_654312675, HEX2A_654311434(hour_654312676, 3600));
    var minute_654312677 = Math.trunc(rem_654312675 / 60);
    rem_654312675 = HEX2D_654311450(rem_654312675, HEX2A_654311434(minute_654312677, 60));
    var second_654312678 = rem_654312675;
    var colontmp__486542480 = fromEpochDay_654311648(epochday_654312674);
    var d_654312679 = colontmp__486542480["Field0"];
    var m_654312680 = colontmp__486542480["Field1"];
    var y_654312681 = colontmp__486542480["Field2"];
    result_654312667 = nimCopy(result_654312667, {year: y_654312681, monthZero: ((m_654312680) | 0), monthdayZero: d_654312679, hour: nimCopy(null, hour_654312676, NTI654311449), minute: nimCopy(null, minute_654312677, NTI654311450), second: nimCopy(null, second_654312678, NTI654311451), nanosecond: nimCopy(null, zt_654312665.time.nanosecond, NTI654311453), weekday: getDayOfWeek_654311709(d_654312679, m_654312680, y_654312681), yearday: getDayOfYear_654311684(d_654312679, m_654312680, y_654312681), isDst: zt_654312665.isDst, timezone: zone_654312666, utcOffset: zt_654312665.utcOffset, m_type: NTI654311455}, NTI654311455);

  return result_654312667;

}

function zonedTimeFromTime_654312721(zone_654312722, time_654312723) {
  var result_654312724 = ({time: ({seconds: 0, nanosecond: 0}), utcOffset: 0, isDst: false});

    result_654312724 = nimCopy(result_654312724, zone_654312722.zonedTimeFromTimeImpl(time_654312723), NTI654311461);

  return result_654312724;

}

function inZone_654312761(time_654312762, zone_654312763) {
  var result_654312764 = ({m_type: NTI654311455, nanosecond: 0, second: 0, minute: 0, hour: 0, monthdayZero: 0, monthZero: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0});

    result_654312764 = nimCopy(result_654312764, initDateTime_654312664(zonedTimeFromTime_654312721(zone_654312763, time_654312762), zone_654312763), NTI654311455);

  return result_654312764;

}

function newTimezone_654312691(name_654312692, zonedTimeFromTimeImpl_654312695, zonedTimeFromAdjTimeImpl_654312698) {
  var result_654312699 = null;

    result_654312699 = {name: nimCopy(null, name_654312692, NTI33554439), zonedTimeFromTimeImpl: zonedTimeFromTimeImpl_654312695, zonedTimeFromAdjTimeImpl: zonedTimeFromAdjTimeImpl_654312698};

  return result_654312699;

}

function localZonedTimeFromTime_654312777(time_654312778) {
  var result_654312779 = ({time: ({seconds: 0, nanosecond: 0}), utcOffset: 0, isDst: false});

    var jsDate_654312783 = new Date(HEX2A_654311434(time_654312778.seconds, 1000));
    var offset_654312784 = HEX2A_654311438(jsDate_654312783.getTimezoneOffset(), 60);
    result_654312779.time = nimCopy(result_654312779.time, time_654312778, NTI654311454);
    result_654312779.utcOffset = offset_654312784;
    result_654312779.isDst = false;

  return result_654312779;

}

function contains_654312800(s_654312804, value_654312805) {
  var result_654312806 = false;

    result_654312806 = ((s_654312804.a <= value_654312805) && (value_654312805 <= s_654312804.b));

  return result_654312806;

}

function HEX2EHEX2E_905970513(a_905970516, b_905970517) {
  var result_905970518 = ({a: 0, b: 0});

    result_905970518 = nimCopy(result_905970518, {a: a_905970516, b: b_905970517}, NTI704643133);

  return result_905970518;

}

function ntAddTime(a_654312455, b_654312456) {
  var result_654312457 = ({seconds: 0, nanosecond: 0});

    result_654312457 = nimCopy(result_654312457, normalize_654312461(HEX2B_654311442(a_654312455.seconds, b_654312456.seconds), HEX2B_654311446(a_654312455.nanosecond, b_654312456.nanosecond)), NTI654311454);

  return result_654312457;

}

function localZonedTimeFromAdjTime_654312785(adjTime_654312786) {
  var result_654312787 = ({time: ({seconds: 0, nanosecond: 0}), utcOffset: 0, isDst: false});

    var utcDate_654312791 = new Date(HEX2A_654311434(adjTime_654312786.seconds, 1000));
    var localDate_654312792 = new Date(utcDate_654312791.getUTCFullYear(),utcDate_654312791.getUTCMonth(),utcDate_654312791.getUTCDate(),utcDate_654312791.getUTCHours(),utcDate_654312791.getUTCMinutes(),utcDate_654312791.getUTCSeconds(),0);
    if (contains_654312800(HEX2EHEX2E_905970513(0, 99), utcDate_654312791.getUTCFullYear())) {
    localDate_654312792.setFullYear(utcDate_654312791.getUTCFullYear());
    }
    
    result_654312787.utcOffset = HEX2A_654311438(localDate_654312792.getTimezoneOffset(), 60);
    result_654312787.time = nimCopy(result_654312787.time, ntAddTime(adjTime_654312786, initDuration_654311823(0, 0, 0, result_654312787.utcOffset, 0, 0, 0, 0)), NTI654311454);
    result_654312787.isDst = false;

  return result_654312787;

}

function local_654312826() {
  var result_654312827 = null;

    if ((localInstance_654312811[0] == null)) {
    localInstance_654312811[0] = newTimezone_654312691(makeNimstrLit("LOCAL"), localZonedTimeFromTime_654312777, localZonedTimeFromAdjTime_654312785);
    }
    
    result_654312827 = localInstance_654312811[0];

  return result_654312827;

}

function local_654312840(t_654312841) {
  var result_654312842 = ({m_type: NTI654311455, nanosecond: 0, second: 0, minute: 0, hour: 0, monthdayZero: 0, monthZero: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0});

    result_654312842 = nimCopy(result_654312842, inZone_654312761(t_654312841, local_654312826()), NTI654311455);

  return result_654312842;

}

function initTime_654312348(unix_654312349, nanosecond_654312350) {
  var result_654312351 = ({seconds: 0, nanosecond: 0});

    result_654312351.seconds = unix_654312349;
    result_654312351.nanosecond = nanosecond_654312350;

  return result_654312351;

}

function getTime_654312414() {
  var result_654312415 = ({seconds: 0, nanosecond: 0});

    var millis_654312416 = new Date().getTime();
    var seconds_654312422 = convert_654311900(2, 3, millis_654312416);
    var nanos_654312433 = convert_654311900(2, 0, Math.trunc(millis_654312416 % convert_654311900(3, 2, 1)));
    result_654312415 = nimCopy(result_654312415, initTime_654312348(seconds_654312422, nanos_654312433), NTI654311454);

  return result_654312415;

}

function now_654312843() {
  var result_654312844 = ({m_type: NTI654311455, nanosecond: 0, second: 0, minute: 0, hour: 0, monthdayZero: 0, monthZero: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0});

    result_654312844 = nimCopy(result_654312844, local_654312840(getTime_654312414()), NTI654311455);

  return result_654312844;

}

function ntgetClockStr(dt_654312912) {
  var result_654312913 = [];

    result_654312913 = nimCopy(null, (nsuIntToStr(dt_654312912.hour, 2) || []).concat([58],nsuIntToStr(dt_654312912.minute, 2) || [],[58],nsuIntToStr(dt_654312912.second, 2) || []), NTI33554439);

  return result_654312913;

}

function substituteLog_620757046(frmt_620757047, level_620757048, args_620757049) {
                  var Temporary8;

  var result_620757050 = [];

    var msgLen_620757051 = 0;
    Label1: do {
      var arg_620757055 = [];
      var i_486542469 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486542469 < (args_620757049).length)) break Label3;
            arg_620757055 = args_620757049[i_486542469];
            msgLen_620757051 += (arg_620757055).length;
            i_486542469 += 1;
          }
      } while (false);
    } while (false);
    result_620757050 = nimCopy(null, mnewString(0), NTI33554439);
    var i_620757060 = 0;
    Label4: do {
        Label5: while (true) {
        if (!(i_620757060 < (frmt_620757047).length)) break Label5;
          if (!((frmt_620757047[i_620757060] == 36))) {
          addChar(result_620757050, frmt_620757047[i_620757060]);;
          i_620757060 += 1;
          }
          else {
            i_620757060 += 1;
            var v_620757069 = [];
            var app_620757070 = [];
            Label6: do {
                Label7: while (true) {
                  if (!(i_620757060 < (frmt_620757047).length)) Temporary8 = false; else {                    Temporary8 = (ConstSet38[frmt_620757047[i_620757060]] != undefined);                  }                if (!Temporary8) break Label7;
                  addChar(v_620757069, nsuToLowerAsciiChar(frmt_620757047[i_620757060]));;
                  i_620757060 += 1;
                }
            } while (false);
            switch (toJSStr(v_620757069)) {
            case "date":
              result_620757050.push.apply(result_620757050, ntgetDateStr(now_654312843()));;
              break;
            case "time":
              result_620757050.push.apply(result_620757050, ntgetClockStr(now_654312843()));;
              break;
            case "datetime":
              result_620757050.push.apply(result_620757050, (ntgetDateStr(now_654312843()) || []).concat(makeNimstrLit("T") || [],ntgetClockStr(now_654312843()) || []));;
              break;
            case "app":
              result_620757050.push.apply(result_620757050, app_620757070);;
              break;
            case "appdir":
              break;
            case "appname":
              break;
            case "levelid":
              addChar(result_620757050, LevelNames_620757007[level_620757048][0]);;
              break;
            case "levelname":
              result_620757050.push.apply(result_620757050, LevelNames_620757007[level_620757048]);;
              break;
            default: 
              break;
            }
          }
          
        }
    } while (false);
    Label9: do {
      var arg_620757082 = [];
      var i_486542474 = 0;
      Label10: do {
          Label11: while (true) {
          if (!(i_486542474 < (args_620757049).length)) break Label11;
            arg_620757082 = args_620757049[i_486542474];
            result_620757050.push.apply(result_620757050, arg_620757082);;
            i_486542474 += 1;
          }
      } while (false);
    } while (false);

  return result_620757050;

}

function log_620757088(logger_620757089, level_620757090, args_620757091) {
      var Temporary1;

      if (!(level_620757017[0] <= level_620757090)) Temporary1 = false; else {        Temporary1 = (logger_620757089.levelThreshold <= level_620757090);      }    if (Temporary1) {
    var ln_620757100 = substituteLog_620757046(logger_620757089.fmtStr, level_620757090, args_620757091);
    var cln_620757101 = toJSStr(ln_620757100);
    switch (level_620757090) {
    case 1:
      console.debug(cln_620757101);
      break;
    case 2:
      console.info(cln_620757101);
      break;
    case 4:
      console.warn(cln_620757101);
      break;
    case 5:
      console.error(cln_620757101);
      break;
    default: 
      console.log(cln_620757101);
      break;
    }
    }
    

  
}

function log_620757083(logger_620757084, level_620757085, args_620757086) {
  
}

function log_620757087(logger_620757084, level_620757085, args_620757086) {
    chckNilDisp(logger_620757084);
    if (isObj(logger_620757084.m_type, NTI620757005)) {
    log_620757088(logger_620757084, level_620757085, args_620757086);
    }
    else {
    if (isObj(logger_620757084.m_type, NTI620757004)) {
    log_620757083(logger_620757084, level_620757085, args_620757086);
    }
    }

  
}
